
GenericHID.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00006b46  00006bfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006b46  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000150  00800152  00800152  00006c4c  2**0
                  ALLOC
  3 .eeprom       00000040  00810000  00810000  00006c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000027  00000000  00000000  00006c8c  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000b20  00000000  00000000  00006cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017b88  00000000  00000000  000077d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000445c  00000000  00000000  0001f35b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004722  00000000  00000000  000237b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000029e4  00000000  00000000  00027edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005c04  00000000  00000000  0002a8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000118c6  00000000  00000000  000304c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c68  00000000  00000000  00041d8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <__ctors_end>
       4:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
       8:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
       c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      10:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      14:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      18:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      1c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      20:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      24:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      28:	0c 94 cf 2f 	jmp	0x5f9e	; 0x5f9e <__vector_10>
      2c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      30:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      34:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      38:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      3c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      40:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      44:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      48:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      4c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      50:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      54:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      58:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      5c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      60:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      64:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      68:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      6c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      70:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      74:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      78:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      7c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      80:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      84:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      88:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      8c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      90:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      94:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      98:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      9c:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      a0:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      a4:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      a8:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__bad_interrupt>
      ac:	ca 12       	cpse	r12, r26
      ae:	e6 12       	cpse	r14, r22
      b0:	e8 12       	cpse	r14, r24
      b2:	f5 12       	cpse	r15, r21
      b4:	f7 12       	cpse	r15, r23
      b6:	fb 12       	cpse	r15, r27
      b8:	06 13       	cpse	r16, r22
      ba:	bc 30       	cpi	r27, 0x0C	; 12
      bc:	de 30       	cpi	r29, 0x0E	; 14
      be:	c5 31       	cpi	r28, 0x15	; 21
      c0:	de 30       	cpi	r29, 0x0E	; 14
      c2:	c5 31       	cpi	r28, 0x15	; 21
      c4:	23 31       	cpi	r18, 0x13	; 19
      c6:	45 31       	cpi	r20, 0x15	; 21
      c8:	c5 31       	cpi	r28, 0x15	; 21
      ca:	97 31       	cpi	r25, 0x17	; 23
      cc:	a9 31       	cpi	r26, 0x19	; 25
      ce:	05 a8       	ldd	r0, Z+53	; 0x35
      d0:	4c cd       	rjmp	.-1384   	; 0xfffffb6a <__eeprom_end+0xff7efb2a>
      d2:	b2 d4       	rcall	.+2404   	; 0xa38 <__trampolines_end+0x94c>
      d4:	4e b9       	out	0x0e, r20	; 14
      d6:	38 36       	cpi	r19, 0x68	; 104
      d8:	a9 02       	muls	r26, r25
      da:	0c 50       	subi	r16, 0x0C	; 12
      dc:	b9 91       	ld	r27, Y+
      de:	86 88       	ldd	r8, Z+22	; 0x16
      e0:	08 3c       	cpi	r16, 0xC8	; 200
      e2:	a6 aa       	std	Z+54, r10	; 0x36
      e4:	aa 2a       	or	r10, r26
      e6:	be 00       	.word	0x00be	; ????
      e8:	00 00       	nop
      ea:	80 3f       	cpi	r24, 0xF0	; 240

000000ec <__trampolines_end>:
      ec:	00 2f       	mov	r16, r16
      ee:	2c f0       	brlt	.+10     	; 0xfa <__trampolines_end+0xe>
      f0:	f6 14       	cp	r15, r6
      f2:	04 dc       	rcall	.-2040   	; 0xfffff8fc <__eeprom_end+0xff7ef8bc>
      f4:	0b 90       	.word	0x900b	; ????
      f6:	20 7f       	andi	r18, 0xF0	; 240
      f8:	f8 1a       	sub	r15, r24
      fa:	f8 19       	sub	r31, r8
      fc:	f8 00       	.word	0x00f8	; ????
      fe:	00 00       	nop
     100:	07 00       	.word	0x0007	; ????
     102:	00 04       	cpc	r0, r0
     104:	17 17       	cp	r17, r23
     106:	09 02       	muls	r16, r25
     108:	00 30       	cpi	r16, 0x00	; 0
     10a:	70 70       	andi	r23, 0x00	; 0
     10c:	70 70       	andi	r23, 0x00	; 0
     10e:	70 70       	andi	r23, 0x00	; 0
     110:	70 70       	andi	r23, 0x00	; 0
     112:	60 60       	ori	r22, 0x00	; 0
     114:	60 60       	ori	r22, 0x00	; 0
     116:	60 60       	ori	r22, 0x00	; 0
     118:	60 60       	ori	r22, 0x00	; 0
     11a:	40 00       	.word	0x0040	; ????
     11c:	70 f0       	brcs	.+28     	; 0x13a <__trampolines_end+0x4e>
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	08 0a       	sbc	r0, r24
     122:	0a 0e       	add	r0, r26
     124:	03 0d       	add	r16, r3
     126:	e3 c7       	rjmp	.+4038   	; 0x10ee <__stack+0x5ef>
     128:	c7 c7       	rjmp	.+3982   	; 0x10b8 <__stack+0x5b9>
     12a:	c7 c3       	rjmp	.+1934   	; 0x8ba <__trampolines_end+0x7ce>
     12c:	c3 c3       	rjmp	.+1926   	; 0x8b4 <__trampolines_end+0x7c8>
     12e:	c3 c2       	rjmp	.+1414   	; 0x6b6 <__trampolines_end+0x5ca>
     130:	0e 12       	cpse	r0, r30
     132:	24 0f       	add	r18, r20
     134:	01 02       	muls	r16, r17
     136:	01 18       	sub	r0, r1
     138:	03 18       	sub	r0, r3
     13a:	03 10       	cpse	r0, r3
     13c:	02 30       	cpi	r16, 0x02	; 2
     13e:	06 30       	cpi	r16, 0x06	; 6
     140:	3f fc       	.word	0xfc3f	; ????
     142:	04 60       	ori	r16, 0x04	; 4
     144:	0c 60       	ori	r16, 0x0C	; 12
     146:	0c 60       	ori	r16, 0x0C	; 12
     148:	0c 40       	sbci	r16, 0x0C	; 12
     14a:	08 c0       	rjmp	.+16     	; 0x15c <__trampolines_end+0x70>
     14c:	ff f8       	.word	0xf8ff	; ????
     14e:	18 80       	ld	r1, Y
     150:	11 80       	ldd	r1, Z+1	; 0x01
     152:	31 80       	ldd	r3, Z+1	; 0x01
     154:	31 80       	ldd	r3, Z+1	; 0x01
     156:	31 00       	.word	0x0031	; ????
     158:	23 00       	.word	0x0023	; ????
     15a:	0c 19       	sub	r16, r12
     15c:	32 0f       	add	r19, r18
     15e:	01 fd       	sbrc	r16, 1
     160:	06 00       	.word	0x0006	; ????
     162:	06 00       	.word	0x0006	; ????
     164:	06 00       	.word	0x0006	; ????
     166:	1f c0       	rjmp	.+62     	; 0x1a6 <__trampolines_end+0xba>
     168:	3f f0       	brie	.+14     	; 0x178 <__trampolines_end+0x8c>
     16a:	66 60       	ori	r22, 0x06	; 6
     16c:	66 00       	.word	0x0066	; ????
     16e:	66 00       	.word	0x0066	; ????
     170:	66 00       	.word	0x0066	; ????
     172:	76 00       	.word	0x0076	; ????
     174:	3e 00       	.word	0x003e	; ????
     176:	1f 80       	ldd	r1, Y+7	; 0x07
     178:	07 c0       	rjmp	.+14     	; 0x188 <__trampolines_end+0x9c>
     17a:	07 e0       	ldi	r16, 0x07	; 7
     17c:	06 70       	andi	r16, 0x06	; 6
     17e:	06 30       	cpi	r16, 0x06	; 6
     180:	06 30       	cpi	r16, 0x06	; 6
     182:	86 30       	cpi	r24, 0x06	; 6
     184:	c6 30       	cpi	r28, 0x06	; 6
     186:	e6 60       	ori	r30, 0x06	; 6
     188:	ff c0       	rjmp	.+510    	; 0x388 <__trampolines_end+0x29c>
     18a:	7f 80       	ldd	r7, Y+7	; 0x07
     18c:	06 00       	.word	0x0006	; ????
     18e:	06 00       	.word	0x0006	; ????
     190:	06 00       	.word	0x0006	; ????
     192:	14 14       	cp	r1, r4
     194:	3c 16       	cp	r3, r28
     196:	01 ff       	sbrs	r16, 1
     198:	1e 00       	.word	0x001e	; ????
     19a:	c0 63       	ori	r28, 0x30	; 48
     19c:	01 80       	ldd	r0, Z+1	; 0x01
     19e:	43 03       	mulsu	r20, r19
     1a0:	80 c1       	rjmp	.+768    	; 0x4a2 <__trampolines_end+0x3b6>
     1a2:	83 00       	.word	0x0083	; ????
     1a4:	c1 86       	std	Z+9, r12	; 0x09
     1a6:	00 c1       	rjmp	.+512    	; 0x3a8 <__trampolines_end+0x2bc>
     1a8:	8c 00       	.word	0x008c	; ????
     1aa:	c1 9c       	mul	r12, r1
     1ac:	00 61       	ori	r16, 0x10	; 16
     1ae:	18 00       	.word	0x0018	; ????
     1b0:	63 30       	cpi	r22, 0x03	; 3
     1b2:	00 3c       	cpi	r16, 0xC0	; 192
     1b4:	73 c0       	rjmp	.+230    	; 0x29c <__trampolines_end+0x1b0>
     1b6:	00 6c       	ori	r16, 0xC0	; 192
     1b8:	60 00       	.word	0x0060	; ????
     1ba:	c8 60       	ori	r28, 0x08	; 8
     1bc:	01 98       	cbi	0x00, 1	; 0
     1be:	30 03       	mulsu	r19, r16
     1c0:	98 30       	cpi	r25, 0x08	; 8
     1c2:	03 18       	sub	r0, r3
     1c4:	30 06       	cpc	r3, r16
     1c6:	18 30       	cpi	r17, 0x08	; 8
     1c8:	0e 08       	sbc	r0, r14
     1ca:	20 1c       	adc	r2, r0
     1cc:	0c 60       	ori	r16, 0x0C	; 12
     1ce:	18 07       	cpc	r17, r24
     1d0:	80 30       	cpi	r24, 0x00	; 0
     1d2:	00 00       	nop
     1d4:	13 16       	cp	r1, r19
     1d6:	42 15       	cp	r20, r2
     1d8:	02 00       	.word	0x0002	; ????
     1da:	03 c0       	rjmp	.+6      	; 0x1e2 <__trampolines_end+0xf6>
     1dc:	00 04       	cpc	r0, r0
     1de:	e0 00       	.word	0x00e0	; ????
     1e0:	08 60       	ori	r16, 0x08	; 8
     1e2:	00 18       	sub	r0, r0
     1e4:	60 00       	.word	0x0060	; ????
     1e6:	18 60       	ori	r17, 0x08	; 8
     1e8:	00 18       	sub	r0, r0
     1ea:	60 00       	.word	0x0060	; ????
     1ec:	18 c0       	rjmp	.+48     	; 0x21e <__trampolines_end+0x132>
     1ee:	00 1d       	adc	r16, r0
     1f0:	80 00       	.word	0x0080	; ????
     1f2:	0f 00       	.word	0x000f	; ????
     1f4:	00 0c       	add	r0, r0
     1f6:	00 00       	nop
     1f8:	1c 3f       	cpi	r17, 0xFC	; 252
     1fa:	e0 3e       	cpi	r30, 0xE0	; 224
     1fc:	0e 80       	ldd	r0, Y+6	; 0x06
     1fe:	77 06       	cpc	r7, r23
     200:	00 63       	ori	r16, 0x30	; 48
     202:	86 00       	.word	0x0086	; ????
     204:	c1 86       	std	Z+9, r12	; 0x09
     206:	00 c1       	rjmp	.+512    	; 0x408 <__trampolines_end+0x31c>
     208:	c6 00       	.word	0x00c6	; ????
     20a:	c0 ec       	ldi	r28, 0xC0	; 192
     20c:	00 c0       	rjmp	.+0      	; 0x20e <__trampolines_end+0x122>
     20e:	7c 00       	.word	0x007c	; ????
     210:	c0 3c       	cpi	r28, 0xC0	; 192
     212:	00 60       	ori	r16, 0x00	; 0
     214:	1e 00       	.word	0x001e	; ????
     216:	30 2f       	mov	r19, r16
     218:	c0 1f       	adc	r28, r16
     21a:	c3 80       	ldd	r12, Z+3	; 0x03
     21c:	03 0a       	sbc	r0, r19
     21e:	0a 08       	sbc	r0, r10
     220:	03 0d       	add	r16, r3
     222:	e0 c0       	rjmp	.+448    	; 0x3e4 <__trampolines_end+0x2f8>
     224:	c0 c0       	rjmp	.+384    	; 0x3a6 <__trampolines_end+0x2ba>
     226:	c0 c0       	rjmp	.+384    	; 0x3a8 <__trampolines_end+0x2bc>
     228:	c0 c0       	rjmp	.+384    	; 0x3aa <__trampolines_end+0x2be>
     22a:	c0 c0       	rjmp	.+384    	; 0x3ac <__trampolines_end+0x2c0>
     22c:	07 1e       	adc	r0, r23
     22e:	1e 0a       	sbc	r1, r30
     230:	02 fb       	bst	r16, 2
     232:	02 0c       	add	r0, r2
     234:	18 18       	sub	r1, r8
     236:	30 30       	cpi	r19, 0x00	; 0
     238:	60 60       	ori	r22, 0x00	; 0
     23a:	60 60       	ori	r22, 0x00	; 0
     23c:	c0 c0       	rjmp	.+384    	; 0x3be <__trampolines_end+0x2d2>
     23e:	c0 c0       	rjmp	.+384    	; 0x3c0 <__trampolines_end+0x2d4>
     240:	c0 c0       	rjmp	.+384    	; 0x3c2 <__trampolines_end+0x2d6>
     242:	c0 c0       	rjmp	.+384    	; 0x3c4 <__trampolines_end+0x2d8>
     244:	c0 c0       	rjmp	.+384    	; 0x3c6 <__trampolines_end+0x2da>
     246:	e0 60       	ori	r30, 0x00	; 0
     248:	60 60       	ori	r22, 0x00	; 0
     24a:	70 30       	cpi	r23, 0x00	; 0
     24c:	38 18       	sub	r3, r8
     24e:	0c 02       	muls	r16, r28
     250:	07 1e       	adc	r0, r23
     252:	1e 0a       	sbc	r1, r30
     254:	01 fb       	bst	r16, 1
     256:	80 60       	ori	r24, 0x00	; 0
     258:	30 38       	cpi	r19, 0x80	; 128
     25a:	18 1c       	adc	r1, r8
     25c:	0c 0c       	add	r0, r12
     25e:	0c 0e       	add	r0, r28
     260:	06 06       	cpc	r0, r22
     262:	06 06       	cpc	r0, r22
     264:	06 06       	cpc	r0, r22
     266:	06 06       	cpc	r0, r22
     268:	06 06       	cpc	r0, r22
     26a:	0c 0c       	add	r0, r12
     26c:	0c 0c       	add	r0, r12
     26e:	18 18       	sub	r1, r8
     270:	30 30       	cpi	r19, 0x00	; 0
     272:	60 80       	ld	r6, Z
     274:	0c 0d       	add	r16, r12
     276:	1a 0e       	add	r1, r26
     278:	01 0b       	sbc	r16, r17
     27a:	06 00       	.word	0x0006	; ????
     27c:	06 00       	.word	0x0006	; ????
     27e:	86 00       	.word	0x0086	; ????
     280:	66 30       	cpi	r22, 0x06	; 6
     282:	f2 f0       	brmi	.+60     	; 0x2c0 <__trampolines_end+0x1d4>
     284:	1b 80       	ldd	r1, Y+3	; 0x03
     286:	06 00       	.word	0x0006	; ????
     288:	1b 80       	ldd	r1, Y+3	; 0x03
     28a:	72 f0       	brmi	.+28     	; 0x2a8 <__trampolines_end+0x1bc>
     28c:	e6 30       	cpi	r30, 0x06	; 6
     28e:	06 20       	and	r0, r6
     290:	06 00       	.word	0x0006	; ????
     292:	06 00       	.word	0x0006	; ????
     294:	0c 0b       	sbc	r16, r28
     296:	16 0d       	add	r17, r6
     298:	01 03       	mulsu	r16, r17
     29a:	06 00       	.word	0x0006	; ????
     29c:	06 00       	.word	0x0006	; ????
     29e:	06 00       	.word	0x0006	; ????
     2a0:	06 00       	.word	0x0006	; ????
     2a2:	06 00       	.word	0x0006	; ????
     2a4:	ff f0       	brie	.+62     	; 0x2e4 <__trampolines_end+0x1f8>
     2a6:	06 00       	.word	0x0006	; ????
     2a8:	06 00       	.word	0x0006	; ????
     2aa:	06 00       	.word	0x0006	; ????
     2ac:	06 00       	.word	0x0006	; ????
     2ae:	06 00       	.word	0x0006	; ????
     2b0:	04 08       	sbc	r0, r4
     2b2:	08 07       	cpc	r16, r24
     2b4:	02 fb       	bst	r16, 2
     2b6:	70 f0       	brcs	.+28     	; 0x2d4 <__trampolines_end+0x1e8>
     2b8:	30 30       	cpi	r19, 0x00	; 0
     2ba:	30 20       	and	r3, r0
     2bc:	40 c0       	rjmp	.+128    	; 0x33e <__trampolines_end+0x252>
     2be:	09 01       	movw	r0, r18
     2c0:	02 0b       	sbc	r16, r18
     2c2:	01 08       	sbc	r0, r1
     2c4:	ff 80       	ldd	r15, Y+7	; 0x07
     2c6:	04 04       	cpc	r0, r4
     2c8:	04 07       	cpc	r16, r20
     2ca:	02 00       	.word	0x0002	; ????
     2cc:	70 f0       	brcs	.+28     	; 0x2ea <__trampolines_end+0x1fe>
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	0d 1e       	adc	r0, r29
     2d2:	3c 0f       	add	r19, r28
     2d4:	01 fb       	bst	r16, 1
     2d6:	00 18       	sub	r0, r0
     2d8:	00 38       	cpi	r16, 0x80	; 128
     2da:	00 30       	cpi	r16, 0x00	; 0
     2dc:	00 30       	cpi	r16, 0x00	; 0
     2de:	00 70       	andi	r16, 0x00	; 0
     2e0:	00 60       	ori	r16, 0x00	; 0
     2e2:	00 60       	ori	r16, 0x00	; 0
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <__trampolines_end+0x1fc>
     2e8:	01 c0       	rjmp	.+2      	; 0x2ec <__trampolines_end+0x200>
     2ea:	01 80       	ldd	r0, Z+1	; 0x01
     2ec:	01 80       	ldd	r0, Z+1	; 0x01
     2ee:	03 80       	ldd	r0, Z+3	; 0x03
     2f0:	03 00       	.word	0x0003	; ????
     2f2:	07 00       	.word	0x0007	; ????
     2f4:	06 00       	.word	0x0006	; ????
     2f6:	06 00       	.word	0x0006	; ????
     2f8:	0e 00       	.word	0x000e	; ????
     2fa:	0c 00       	.word	0x000c	; ????
     2fc:	0c 00       	.word	0x000c	; ????
     2fe:	1c 00       	.word	0x001c	; ????
     300:	18 00       	.word	0x0018	; ????
     302:	38 00       	.word	0x0038	; ????
     304:	30 00       	.word	0x0030	; ????
     306:	30 00       	.word	0x0030	; ????
     308:	70 00       	.word	0x0070	; ????
     30a:	60 00       	.word	0x0060	; ????
     30c:	60 00       	.word	0x0060	; ????
     30e:	e0 00       	.word	0x00e0	; ????
     310:	c0 00       	.word	0x00c0	; ????
     312:	0d 13       	cpse	r16, r29
     314:	26 0f       	add	r18, r22
     316:	01 00       	.word	0x0001	; ????
     318:	07 80       	ldd	r0, Z+7	; 0x07
     31a:	18 c0       	rjmp	.+48     	; 0x34c <__trampolines_end+0x260>
     31c:	20 60       	ori	r18, 0x00	; 0
     31e:	60 30       	cpi	r22, 0x00	; 0
     320:	40 30       	cpi	r20, 0x00	; 0
     322:	40 38       	cpi	r20, 0x80	; 128
     324:	c0 18       	sub	r12, r0
     326:	c0 18       	sub	r12, r0
     328:	c0 18       	sub	r12, r0
     32a:	c0 18       	sub	r12, r0
     32c:	c0 18       	sub	r12, r0
     32e:	c0 18       	sub	r12, r0
     330:	c0 18       	sub	r12, r0
     332:	c0 10       	cpse	r12, r0
     334:	60 10       	cpse	r6, r0
     336:	60 30       	cpi	r22, 0x00	; 0
     338:	30 20       	and	r3, r0
     33a:	18 40       	sbci	r17, 0x08	; 8
     33c:	0f 80       	ldd	r0, Y+7	; 0x07
     33e:	0b 13       	cpse	r16, r27
     340:	26 0f       	add	r18, r22
     342:	02 00       	.word	0x0002	; ????
     344:	02 00       	.word	0x0002	; ????
     346:	1e 00       	.word	0x001e	; ????
     348:	7e 00       	.word	0x007e	; ????
     34a:	86 00       	.word	0x0086	; ????
     34c:	06 00       	.word	0x0006	; ????
     34e:	06 00       	.word	0x0006	; ????
     350:	06 00       	.word	0x0006	; ????
     352:	06 00       	.word	0x0006	; ????
     354:	06 00       	.word	0x0006	; ????
     356:	06 00       	.word	0x0006	; ????
     358:	06 00       	.word	0x0006	; ????
     35a:	06 00       	.word	0x0006	; ????
     35c:	06 00       	.word	0x0006	; ????
     35e:	06 00       	.word	0x0006	; ????
     360:	06 00       	.word	0x0006	; ????
     362:	06 00       	.word	0x0006	; ????
     364:	06 00       	.word	0x0006	; ????
     366:	0f 00       	.word	0x000f	; ????
     368:	7f e0       	ldi	r23, 0x0F	; 15
     36a:	0b 13       	cpse	r16, r27
     36c:	26 0f       	add	r18, r22
     36e:	02 00       	.word	0x0002	; ????
     370:	0f 80       	ldd	r0, Y+7	; 0x07
     372:	30 c0       	rjmp	.+96     	; 0x3d4 <__trampolines_end+0x2e8>
     374:	60 60       	ori	r22, 0x00	; 0
     376:	60 60       	ori	r22, 0x00	; 0
     378:	60 60       	ori	r22, 0x00	; 0
     37a:	00 60       	ori	r16, 0x00	; 0
     37c:	00 60       	ori	r16, 0x00	; 0
     37e:	00 c0       	rjmp	.+0      	; 0x380 <__trampolines_end+0x294>
     380:	00 c0       	rjmp	.+0      	; 0x382 <__trampolines_end+0x296>
     382:	01 80       	ldd	r0, Z+1	; 0x01
     384:	03 00       	.word	0x0003	; ????
     386:	07 00       	.word	0x0007	; ????
     388:	06 00       	.word	0x0006	; ????
     38a:	0c 00       	.word	0x000c	; ????
     38c:	18 00       	.word	0x0018	; ????
     38e:	30 20       	and	r3, r0
     390:	70 20       	and	r7, r0
     392:	e0 20       	and	r14, r0
     394:	ff e0       	ldi	r31, 0x0F	; 15
     396:	0b 13       	cpse	r16, r27
     398:	26 0f       	add	r18, r22
     39a:	02 00       	.word	0x0002	; ????
     39c:	1f 00       	.word	0x001f	; ????
     39e:	71 80       	ldd	r7, Z+1	; 0x01
     3a0:	60 c0       	rjmp	.+192    	; 0x462 <__trampolines_end+0x376>
     3a2:	e0 c0       	rjmp	.+448    	; 0x564 <__trampolines_end+0x478>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <__trampolines_end+0x2ba>
     3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <__trampolines_end+0x2bc>
     3a8:	01 80       	ldd	r0, Z+1	; 0x01
     3aa:	03 00       	.word	0x0003	; ????
     3ac:	0f 00       	.word	0x000f	; ????
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <__trampolines_end+0x2ca>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <__trampolines_end+0x2c6>
     3b2:	00 e0       	ldi	r16, 0x00	; 0
     3b4:	00 60       	ori	r16, 0x00	; 0
     3b6:	00 60       	ori	r16, 0x00	; 0
     3b8:	00 60       	ori	r16, 0x00	; 0
     3ba:	00 60       	ori	r16, 0x00	; 0
     3bc:	80 c0       	rjmp	.+256    	; 0x4be <__trampolines_end+0x3d2>
     3be:	c1 80       	ldd	r12, Z+1	; 0x01
     3c0:	7f 00       	.word	0x007f	; ????
     3c2:	0c 13       	cpse	r16, r28
     3c4:	26 0f       	add	r18, r22
     3c6:	01 00       	.word	0x0001	; ????
     3c8:	00 40       	sbci	r16, 0x00	; 0
     3ca:	01 c0       	rjmp	.+2      	; 0x3ce <__trampolines_end+0x2e2>
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <__trampolines_end+0x2e8>
     3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <__trampolines_end+0x2ea>
     3d0:	06 c0       	rjmp	.+12     	; 0x3de <__trampolines_end+0x2f2>
     3d2:	0c c0       	rjmp	.+24     	; 0x3ec <__trampolines_end+0x300>
     3d4:	0c c0       	rjmp	.+24     	; 0x3ee <__trampolines_end+0x302>
     3d6:	18 c0       	rjmp	.+48     	; 0x408 <__trampolines_end+0x31c>
     3d8:	30 c0       	rjmp	.+96     	; 0x43a <__trampolines_end+0x34e>
     3da:	30 c0       	rjmp	.+96     	; 0x43c <__trampolines_end+0x350>
     3dc:	60 c0       	rjmp	.+192    	; 0x49e <__trampolines_end+0x3b2>
     3de:	e0 c0       	rjmp	.+448    	; 0x5a0 <__trampolines_end+0x4b4>
     3e0:	ff f0       	brie	.+62     	; 0x420 <__trampolines_end+0x334>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <__trampolines_end+0x2f8>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <__trampolines_end+0x2fa>
     3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <__trampolines_end+0x2fc>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <__trampolines_end+0x2fe>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <__trampolines_end+0x300>
     3ec:	07 f0       	brie	.+0      	; 0x3ee <__trampolines_end+0x302>
     3ee:	0b 13       	cpse	r16, r27
     3f0:	26 0f       	add	r18, r22
     3f2:	02 00       	.word	0x0002	; ????
     3f4:	3f e0       	ldi	r19, 0x0F	; 15
     3f6:	20 00       	.word	0x0020	; ????
     3f8:	20 00       	.word	0x0020	; ????
     3fa:	60 00       	.word	0x0060	; ????
     3fc:	60 00       	.word	0x0060	; ????
     3fe:	60 00       	.word	0x0060	; ????
     400:	60 00       	.word	0x0060	; ????
     402:	7f 00       	.word	0x007f	; ????
     404:	61 c0       	rjmp	.+194    	; 0x4c8 <__trampolines_end+0x3dc>
     406:	00 c0       	rjmp	.+0      	; 0x408 <__trampolines_end+0x31c>
     408:	00 60       	ori	r16, 0x00	; 0
     40a:	00 60       	ori	r16, 0x00	; 0
     40c:	00 60       	ori	r16, 0x00	; 0
     40e:	00 60       	ori	r16, 0x00	; 0
     410:	00 60       	ori	r16, 0x00	; 0
     412:	00 40       	sbci	r16, 0x00	; 0
     414:	80 c0       	rjmp	.+256    	; 0x516 <__trampolines_end+0x42a>
     416:	c1 80       	ldd	r12, Z+1	; 0x01
     418:	3f 00       	.word	0x003f	; ????
     41a:	0c 14       	cp	r0, r12
     41c:	28 0f       	add	r18, r24
     41e:	02 00       	.word	0x0002	; ????
     420:	00 c0       	rjmp	.+0      	; 0x422 <__trampolines_end+0x336>
     422:	07 00       	.word	0x0007	; ????
     424:	0e 00       	.word	0x000e	; ????
     426:	18 00       	.word	0x0018	; ????
     428:	30 00       	.word	0x0030	; ????
     42a:	70 00       	.word	0x0070	; ????
     42c:	60 00       	.word	0x0060	; ????
     42e:	60 00       	.word	0x0060	; ????
     430:	cf 80       	ldd	r12, Y+7	; 0x07
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	e0 60       	ori	r30, 0x00	; 0
     436:	c0 70       	andi	r28, 0x00	; 0
     438:	c0 30       	cpi	r28, 0x00	; 0
     43a:	c0 30       	cpi	r28, 0x00	; 0
     43c:	c0 30       	cpi	r28, 0x00	; 0
     43e:	60 30       	cpi	r22, 0x00	; 0
     440:	60 20       	and	r6, r0
     442:	20 60       	ori	r18, 0x00	; 0
     444:	30 40       	sbci	r19, 0x00	; 0
     446:	0f 80       	ldd	r0, Y+7	; 0x07
     448:	0c 13       	cpse	r16, r28
     44a:	26 0f       	add	r18, r22
     44c:	02 00       	.word	0x0002	; ????
     44e:	ff f0       	brie	.+62     	; 0x48e <__trampolines_end+0x3a2>
     450:	80 60       	ori	r24, 0x00	; 0
     452:	80 60       	ori	r24, 0x00	; 0
     454:	00 e0       	ldi	r16, 0x00	; 0
     456:	00 c0       	rjmp	.+0      	; 0x458 <__trampolines_end+0x36c>
     458:	00 c0       	rjmp	.+0      	; 0x45a <__trampolines_end+0x36e>
     45a:	01 80       	ldd	r0, Z+1	; 0x01
     45c:	01 80       	ldd	r0, Z+1	; 0x01
     45e:	03 00       	.word	0x0003	; ????
     460:	03 00       	.word	0x0003	; ????
     462:	07 00       	.word	0x0007	; ????
     464:	06 00       	.word	0x0006	; ????
     466:	06 00       	.word	0x0006	; ????
     468:	0c 00       	.word	0x000c	; ????
     46a:	0c 00       	.word	0x000c	; ????
     46c:	1c 00       	.word	0x001c	; ????
     46e:	18 00       	.word	0x0018	; ????
     470:	38 00       	.word	0x0038	; ????
     472:	30 00       	.word	0x0030	; ????
     474:	0c 13       	cpse	r16, r28
     476:	26 0f       	add	r18, r22
     478:	02 00       	.word	0x0002	; ????
     47a:	1f 80       	ldd	r1, Y+7	; 0x07
     47c:	30 c0       	rjmp	.+96     	; 0x4de <__trampolines_end+0x3f2>
     47e:	60 60       	ori	r22, 0x00	; 0
     480:	e0 60       	ori	r30, 0x00	; 0
     482:	e0 60       	ori	r30, 0x00	; 0
     484:	e0 60       	ori	r30, 0x00	; 0
     486:	f8 c0       	rjmp	.+496    	; 0x678 <__trampolines_end+0x58c>
     488:	7f 80       	ldd	r7, Y+7	; 0x07
     48a:	1f 80       	ldd	r1, Y+7	; 0x07
     48c:	1f c0       	rjmp	.+62     	; 0x4cc <__trampolines_end+0x3e0>
     48e:	31 e0       	ldi	r19, 0x01	; 1
     490:	60 70       	andi	r22, 0x00	; 0
     492:	c0 70       	andi	r28, 0x00	; 0
     494:	c0 30       	cpi	r28, 0x00	; 0
     496:	c0 30       	cpi	r28, 0x00	; 0
     498:	c0 20       	and	r12, r0
     49a:	60 20       	and	r6, r0
     49c:	70 40       	sbci	r23, 0x00	; 0
     49e:	1f 80       	ldd	r1, Y+7	; 0x07
     4a0:	0c 14       	cp	r0, r12
     4a2:	28 0f       	add	r18, r24
     4a4:	02 ff       	sbrs	r16, 2
     4a6:	0f 80       	ldd	r0, Y+7	; 0x07
     4a8:	31 c0       	rjmp	.+98     	; 0x50c <__trampolines_end+0x420>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	40 60       	ori	r20, 0x00	; 0
     4ae:	c0 70       	andi	r28, 0x00	; 0
     4b0:	c0 30       	cpi	r28, 0x00	; 0
     4b2:	c0 30       	cpi	r28, 0x00	; 0
     4b4:	c0 30       	cpi	r28, 0x00	; 0
     4b6:	c0 30       	cpi	r28, 0x00	; 0
     4b8:	60 70       	andi	r22, 0x00	; 0
     4ba:	30 b0       	in	r3, 0x00	; 0
     4bc:	1f 30       	cpi	r17, 0x0F	; 15
     4be:	00 60       	ori	r16, 0x00	; 0
     4c0:	00 60       	ori	r16, 0x00	; 0
     4c2:	00 60       	ori	r16, 0x00	; 0
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__trampolines_end+0x3da>
     4c6:	01 80       	ldd	r0, Z+1	; 0x01
     4c8:	07 00       	.word	0x0007	; ????
     4ca:	1e 00       	.word	0x001e	; ????
     4cc:	30 00       	.word	0x0030	; ????
     4ce:	04 0f       	add	r16, r20
     4d0:	0f 07       	cpc	r16, r31
     4d2:	02 00       	.word	0x0002	; ????
     4d4:	70 f0       	brcs	.+28     	; 0x4f2 <__trampolines_end+0x406>
     4d6:	f0 60       	ori	r31, 0x00	; 0
     4d8:	00 00       	nop
     4da:	00 00       	nop
     4dc:	00 00       	nop
     4de:	00 70       	andi	r16, 0x00	; 0
     4e0:	f0 f0       	brcs	.+60     	; 0x51e <__trampolines_end+0x432>
     4e2:	e0 04       	cpc	r14, r0
     4e4:	14 14       	cp	r1, r4
     4e6:	07 02       	muls	r16, r23
     4e8:	fb 70       	andi	r31, 0x0B	; 11
     4ea:	f0 f0       	brcs	.+60     	; 0x528 <__trampolines_end+0x43c>
     4ec:	60 00       	.word	0x0060	; ????
     4ee:	00 00       	nop
     4f0:	00 00       	nop
     4f2:	00 00       	nop
     4f4:	00 70       	andi	r16, 0x00	; 0
     4f6:	f0 30       	cpi	r31, 0x00	; 0
     4f8:	30 30       	cpi	r19, 0x00	; 0
     4fa:	20 40       	sbci	r18, 0x00	; 0
     4fc:	c0 0c       	add	r12, r0
     4fe:	0a 14       	cp	r0, r10
     500:	0e 01       	movw	r0, r28
     502:	04 00       	.word	0x0004	; ????
     504:	30 00       	.word	0x0030	; ????
     506:	f0 07       	cpc	r31, r16
     508:	c0 3e       	cpi	r28, 0xE0	; 224
     50a:	00 f8       	bld	r0, 0
     50c:	00 f0       	brcs	.+0      	; 0x50e <__trampolines_end+0x422>
     50e:	00 7e       	andi	r16, 0xE0	; 224
     510:	00 0f       	add	r16, r16
     512:	80 01       	movw	r16, r0
     514:	f0 00       	.word	0x00f0	; ????
     516:	70 0c       	add	r7, r0
     518:	06 0c       	add	r0, r6
     51a:	0e 01       	movw	r0, r28
     51c:	06 ff       	sbrs	r16, 6
     51e:	f0 00       	.word	0x00f0	; ????
     520:	00 00       	nop
     522:	00 00       	nop
     524:	00 00       	nop
     526:	00 ff       	sbrs	r16, 0
     528:	f0 0c       	add	r15, r0
     52a:	0a 14       	cp	r0, r10
     52c:	0e 01       	movw	r0, r28
     52e:	04 60       	ori	r16, 0x04	; 4
     530:	00 f8       	bld	r0, 0
     532:	00 1f       	adc	r16, r16
     534:	00 07       	cpc	r16, r16
     536:	e0 00       	.word	0x00e0	; ????
     538:	f0 01       	movw	r30, r0
     53a:	f0 07       	cpc	r31, r16
     53c:	c0 3e       	cpi	r28, 0xE0	; 224
     53e:	00 f0       	brcs	.+0      	; 0x540 <__trampolines_end+0x454>
     540:	00 c0       	rjmp	.+0      	; 0x542 <__trampolines_end+0x456>
     542:	00 0a       	sbc	r0, r16
     544:	17 2e       	mov	r1, r23
     546:	0e 02       	muls	r16, r30
     548:	00 1f       	adc	r16, r16
     54a:	00 63       	ori	r16, 0x30	; 48
     54c:	80 41       	sbci	r24, 0x10	; 16
     54e:	c0 c0       	rjmp	.+384    	; 0x6d0 <__trampolines_end+0x5e4>
     550:	c0 c0       	rjmp	.+384    	; 0x6d2 <__trampolines_end+0x5e6>
     552:	c0 80       	ld	r12, Z
     554:	c0 00       	.word	0x00c0	; ????
     556:	c0 01       	movw	r24, r0
     558:	80 01       	movw	r16, r0
     55a:	80 03       	fmuls	r16, r16
     55c:	00 03       	mulsu	r16, r16
     55e:	00 06       	cpc	r0, r16
     560:	00 0e       	add	r0, r16
     562:	00 0c       	add	r0, r0
     564:	00 0c       	add	r0, r0
     566:	00 0c       	add	r0, r0
     568:	00 0c       	add	r0, r0
     56a:	00 00       	nop
     56c:	00 00       	nop
     56e:	00 0e       	add	r0, r16
     570:	00 1e       	adc	r0, r16
     572:	00 1e       	adc	r0, r16
     574:	00 1c       	adc	r0, r0
     576:	00 18       	sub	r0, r0
     578:	19 4b       	sbci	r17, 0xB9	; 185
     57a:	1a 01       	movw	r2, r20
     57c:	fb 00       	.word	0x00fb	; ????
     57e:	3f 80       	ldd	r3, Y+7	; 0x07
     580:	01 c0       	rjmp	.+2      	; 0x584 <__trampolines_end+0x498>
     582:	e0 02       	muls	r30, r16
     584:	00 38       	cpi	r16, 0x80	; 128
     586:	0c 00       	.word	0x000c	; ????
     588:	1c 18       	sub	r1, r12
     58a:	00 0c       	add	r0, r0
     58c:	10 3c       	cpi	r17, 0xC0	; 192
     58e:	8e 20       	and	r8, r14
     590:	43 86       	std	Z+11, r4	; 0x0b
     592:	60 81       	ld	r22, Z
     594:	87 41       	sbci	r24, 0x17	; 23
     596:	81 83       	std	Z+1, r24	; 0x01
     598:	c1 01       	movw	r24, r2
     59a:	83 c3       	rjmp	.+1798   	; 0xca2 <__stack+0x1a3>
     59c:	01 83       	std	Z+1, r16	; 0x01
     59e:	c3 01       	movw	r24, r6
     5a0:	83 c3       	rjmp	.+1798   	; 0xca8 <__stack+0x1a9>
     5a2:	01 83       	std	Z+1, r16	; 0x01
     5a4:	c3 01       	movw	r24, r6
     5a6:	83 c3       	rjmp	.+1798   	; 0xcae <__stack+0x1af>
     5a8:	01 83       	std	Z+1, r16	; 0x01
     5aa:	c3 01       	movw	r24, r6
     5ac:	82 e1       	ldi	r24, 0x12	; 18
     5ae:	81 86       	std	Z+9, r8	; 0x09
     5b0:	61 83       	std	Z+1, r22	; 0x01
     5b2:	84 70       	andi	r24, 0x04	; 4
     5b4:	c5 c8       	rjmp	.-3702   	; 0xfffff740 <__eeprom_end+0xff7ef700>
     5b6:	30 78       	andi	r19, 0x80	; 128
     5b8:	f0 38       	cpi	r31, 0x80	; 128
     5ba:	00 00       	nop
     5bc:	1c 00       	.word	0x001c	; ????
     5be:	04 0f       	add	r16, r20
     5c0:	00 1c       	adc	r0, r0
     5c2:	03 c0       	rjmp	.+6      	; 0x5ca <__trampolines_end+0x4de>
     5c4:	70 00       	.word	0x0070	; ????
     5c6:	7f 80       	ldd	r7, Y+7	; 0x07
     5c8:	13 14       	cp	r1, r3
     5ca:	3c 13       	cpse	r19, r28
     5cc:	00 00       	nop
     5ce:	00 40       	sbci	r16, 0x00	; 0
     5d0:	00 00       	nop
     5d2:	e0 00       	.word	0x00e0	; ????
     5d4:	00 e0       	ldi	r16, 0x00	; 0
     5d6:	00 01       	movw	r0, r0
     5d8:	e0 00       	.word	0x00e0	; ????
     5da:	01 f0       	breq	.+0      	; 0x5dc <__trampolines_end+0x4f0>
     5dc:	00 01       	movw	r0, r0
     5de:	b0 00       	.word	0x00b0	; ????
     5e0:	03 30       	cpi	r16, 0x03	; 3
     5e2:	00 03       	mulsu	r16, r16
     5e4:	38 00       	.word	0x0038	; ????
     5e6:	03 18       	sub	r0, r3
     5e8:	00 06       	cpc	r0, r16
     5ea:	1c 00       	.word	0x001c	; ????
     5ec:	06 1c       	adc	r0, r6
     5ee:	00 06       	cpc	r0, r16
     5f0:	0c 00       	.word	0x000c	; ????
     5f2:	0f fe       	.word	0xfe0f	; ????
     5f4:	00 0c       	add	r0, r0
     5f6:	06 00       	.word	0x0006	; ????
     5f8:	08 06       	cpc	r0, r24
     5fa:	00 18       	sub	r0, r0
     5fc:	07 00       	.word	0x0007	; ????
     5fe:	18 03       	fmul	r17, r16
     600:	00 10       	cpse	r0, r0
     602:	03 00       	.word	0x0003	; ????
     604:	30 03       	mulsu	r19, r16
     606:	80 fe       	sbrs	r8, 0
     608:	0f e0       	ldi	r16, 0x0F	; 15
     60a:	0e 14       	cp	r0, r14
     60c:	28 11       	cpse	r18, r8
     60e:	01 00       	.word	0x0001	; ????
     610:	3f c0       	rjmp	.+126    	; 0x690 <__trampolines_end+0x5a4>
     612:	f0 70       	andi	r31, 0x00	; 0
     614:	30 38       	cpi	r19, 0x80	; 128
     616:	30 18       	sub	r3, r0
     618:	30 18       	sub	r3, r0
     61a:	30 18       	sub	r3, r0
     61c:	30 18       	sub	r3, r0
     61e:	30 30       	cpi	r19, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	3f e0       	ldi	r19, 0x0F	; 15
     624:	30 70       	andi	r19, 0x00	; 0
     626:	30 38       	cpi	r19, 0x80	; 128
     628:	30 1c       	adc	r3, r0
     62a:	30 0c       	add	r3, r0
     62c:	30 0c       	add	r3, r0
     62e:	30 0c       	add	r3, r0
     630:	30 0c       	add	r3, r0
     632:	30 18       	sub	r3, r0
     634:	30 30       	cpi	r19, 0x00	; 0
     636:	ff c0       	rjmp	.+510    	; 0x836 <__trampolines_end+0x74a>
     638:	0e 14       	cp	r0, r14
     63a:	28 11       	cpse	r18, r8
     63c:	01 00       	.word	0x0001	; ????
     63e:	03 f8       	bld	r0, 3
     640:	0c 1c       	adc	r0, r12
     642:	10 08       	sbc	r1, r0
     644:	30 00       	.word	0x0030	; ????
     646:	60 00       	.word	0x0060	; ????
     648:	60 00       	.word	0x0060	; ????
     64a:	40 00       	.word	0x0040	; ????
     64c:	c0 00       	.word	0x00c0	; ????
     64e:	c0 00       	.word	0x00c0	; ????
     650:	c0 00       	.word	0x00c0	; ????
     652:	c0 00       	.word	0x00c0	; ????
     654:	c0 00       	.word	0x00c0	; ????
     656:	c0 00       	.word	0x00c0	; ????
     658:	c0 00       	.word	0x00c0	; ????
     65a:	60 00       	.word	0x0060	; ????
     65c:	60 00       	.word	0x0060	; ????
     65e:	70 00       	.word	0x0070	; ????
     660:	38 04       	cpc	r3, r8
     662:	1c 18       	sub	r1, r12
     664:	07 e0       	ldi	r16, 0x07	; 7
     666:	11 14       	cp	r1, r1
     668:	3c 13       	cpse	r19, r28
     66a:	01 00       	.word	0x0001	; ????
     66c:	3f e0       	ldi	r19, 0x0F	; 15
     66e:	00 f0       	brcs	.+0      	; 0x670 <__trampolines_end+0x584>
     670:	38 00       	.word	0x0038	; ????
     672:	30 0c       	add	r3, r0
     674:	00 30       	cpi	r16, 0x00	; 0
     676:	06 00       	.word	0x0006	; ????
     678:	30 03       	mulsu	r19, r16
     67a:	00 30       	cpi	r16, 0x00	; 0
     67c:	03 00       	.word	0x0003	; ????
     67e:	30 03       	mulsu	r19, r16
     680:	80 30       	cpi	r24, 0x00	; 0
     682:	01 80       	ldd	r0, Z+1	; 0x01
     684:	30 01       	movw	r6, r0
     686:	80 30       	cpi	r24, 0x00	; 0
     688:	01 80       	ldd	r0, Z+1	; 0x01
     68a:	30 01       	movw	r6, r0
     68c:	80 30       	cpi	r24, 0x00	; 0
     68e:	01 80       	ldd	r0, Z+1	; 0x01
     690:	30 01       	movw	r6, r0
     692:	80 30       	cpi	r24, 0x00	; 0
     694:	03 00       	.word	0x0003	; ????
     696:	30 03       	mulsu	r19, r16
     698:	00 30       	cpi	r16, 0x00	; 0
     69a:	03 00       	.word	0x0003	; ????
     69c:	30 06       	cpc	r3, r16
     69e:	00 30       	cpi	r16, 0x00	; 0
     6a0:	0c 00       	.word	0x000c	; ????
     6a2:	30 38       	cpi	r19, 0x80	; 128
     6a4:	00 ff       	sbrs	r16, 0
     6a6:	e0 00       	.word	0x00e0	; ????
     6a8:	0d 14       	cp	r0, r13
     6aa:	28 10       	cpse	r2, r8
     6ac:	01 00       	.word	0x0001	; ????
     6ae:	ff f0       	brie	.+62     	; 0x6ee <__trampolines_end+0x602>
     6b0:	30 10       	cpse	r3, r0
     6b2:	30 10       	cpse	r3, r0
     6b4:	30 10       	cpse	r3, r0
     6b6:	30 00       	.word	0x0030	; ????
     6b8:	30 00       	.word	0x0030	; ????
     6ba:	30 00       	.word	0x0030	; ????
     6bc:	30 00       	.word	0x0030	; ????
     6be:	30 00       	.word	0x0030	; ????
     6c0:	3f e0       	ldi	r19, 0x0F	; 15
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	30 00       	.word	0x0030	; ????
     6c6:	30 00       	.word	0x0030	; ????
     6c8:	30 00       	.word	0x0030	; ????
     6ca:	30 00       	.word	0x0030	; ????
     6cc:	30 00       	.word	0x0030	; ????
     6ce:	30 08       	sbc	r3, r0
     6d0:	30 08       	sbc	r3, r0
     6d2:	30 18       	sub	r3, r0
     6d4:	ff f8       	.word	0xf8ff	; ????
     6d6:	0c 14       	cp	r0, r12
     6d8:	28 0f       	add	r18, r24
     6da:	01 00       	.word	0x0001	; ????
     6dc:	ff f0       	brie	.+62     	; 0x71c <__trampolines_end+0x630>
     6de:	30 10       	cpse	r3, r0
     6e0:	30 10       	cpse	r3, r0
     6e2:	30 10       	cpse	r3, r0
     6e4:	30 00       	.word	0x0030	; ????
     6e6:	30 00       	.word	0x0030	; ????
     6e8:	30 00       	.word	0x0030	; ????
     6ea:	30 00       	.word	0x0030	; ????
     6ec:	30 00       	.word	0x0030	; ????
     6ee:	3f c0       	rjmp	.+126    	; 0x76e <__trampolines_end+0x682>
     6f0:	30 80       	ld	r3, Z
     6f2:	30 00       	.word	0x0030	; ????
     6f4:	30 00       	.word	0x0030	; ????
     6f6:	30 00       	.word	0x0030	; ????
     6f8:	30 00       	.word	0x0030	; ????
     6fa:	30 00       	.word	0x0030	; ????
     6fc:	30 00       	.word	0x0030	; ????
     6fe:	30 00       	.word	0x0030	; ????
     700:	30 00       	.word	0x0030	; ????
     702:	fe 00       	.word	0x00fe	; ????
     704:	12 14       	cp	r1, r2
     706:	3c 13       	cpse	r19, r28
     708:	01 00       	.word	0x0001	; ????
     70a:	01 fe       	sbrs	r0, 1
     70c:	00 06       	cpc	r0, r16
     70e:	0f 00       	.word	0x000f	; ????
     710:	08 00       	.word	0x0008	; ????
     712:	00 10       	cpse	r0, r0
     714:	00 00       	nop
     716:	20 00       	.word	0x0020	; ????
     718:	00 60       	ori	r16, 0x00	; 0
     71a:	00 00       	nop
     71c:	40 00       	.word	0x0040	; ????
     71e:	00 c0       	rjmp	.+0      	; 0x720 <__trampolines_end+0x634>
     720:	00 00       	nop
     722:	c0 00       	.word	0x00c0	; ????
     724:	00 c0       	rjmp	.+0      	; 0x726 <__trampolines_end+0x63a>
     726:	00 00       	nop
     728:	c0 00       	.word	0x00c0	; ????
     72a:	00 c0       	rjmp	.+0      	; 0x72c <__trampolines_end+0x640>
     72c:	1f c0       	rjmp	.+62     	; 0x76c <__trampolines_end+0x680>
     72e:	c0 07       	cpc	r28, r16
     730:	00 c0       	rjmp	.+0      	; 0x732 <__trampolines_end+0x646>
     732:	03 00       	.word	0x0003	; ????
     734:	60 03       	mulsu	r22, r16
     736:	00 60       	ori	r16, 0x00	; 0
     738:	03 00       	.word	0x0003	; ????
     73a:	30 03       	mulsu	r19, r16
     73c:	00 18       	sub	r0, r0
     73e:	03 00       	.word	0x0003	; ????
     740:	0c 03       	fmul	r16, r20
     742:	00 03       	mulsu	r16, r16
     744:	fc 00       	.word	0x00fc	; ????
     746:	13 14       	cp	r1, r3
     748:	3c 15       	cp	r19, r12
     74a:	01 00       	.word	0x0001	; ????
     74c:	fc 07       	cpc	r31, r28
     74e:	e0 30       	cpi	r30, 0x00	; 0
     750:	01 80       	ldd	r0, Z+1	; 0x01
     752:	30 01       	movw	r6, r0
     754:	80 30       	cpi	r24, 0x00	; 0
     756:	01 80       	ldd	r0, Z+1	; 0x01
     758:	30 01       	movw	r6, r0
     75a:	80 30       	cpi	r24, 0x00	; 0
     75c:	01 80       	ldd	r0, Z+1	; 0x01
     75e:	30 01       	movw	r6, r0
     760:	80 30       	cpi	r24, 0x00	; 0
     762:	01 80       	ldd	r0, Z+1	; 0x01
     764:	30 01       	movw	r6, r0
     766:	80 3f       	cpi	r24, 0xF0	; 240
     768:	ff 80       	ldd	r15, Y+7	; 0x07
     76a:	30 01       	movw	r6, r0
     76c:	80 30       	cpi	r24, 0x00	; 0
     76e:	01 80       	ldd	r0, Z+1	; 0x01
     770:	30 01       	movw	r6, r0
     772:	80 30       	cpi	r24, 0x00	; 0
     774:	01 80       	ldd	r0, Z+1	; 0x01
     776:	30 01       	movw	r6, r0
     778:	80 30       	cpi	r24, 0x00	; 0
     77a:	01 80       	ldd	r0, Z+1	; 0x01
     77c:	30 01       	movw	r6, r0
     77e:	80 30       	cpi	r24, 0x00	; 0
     780:	01 80       	ldd	r0, Z+1	; 0x01
     782:	30 01       	movw	r6, r0
     784:	80 fc       	sbrc	r8, 0
     786:	07 e0       	ldi	r16, 0x07	; 7
     788:	06 14       	cp	r0, r6
     78a:	14 0a       	sbc	r1, r20
     78c:	02 00       	.word	0x0002	; ????
     78e:	fc 30       	cpi	r31, 0x0C	; 12
     790:	30 30       	cpi	r19, 0x00	; 0
     792:	30 30       	cpi	r19, 0x00	; 0
     794:	30 30       	cpi	r19, 0x00	; 0
     796:	30 30       	cpi	r19, 0x00	; 0
     798:	30 30       	cpi	r19, 0x00	; 0
     79a:	30 30       	cpi	r19, 0x00	; 0
     79c:	30 30       	cpi	r19, 0x00	; 0
     79e:	30 30       	cpi	r19, 0x00	; 0
     7a0:	30 fc       	sbrc	r3, 0
     7a2:	0b 19       	sub	r16, r11
     7a4:	32 0a       	sbc	r3, r18
     7a6:	fd fb       	.word	0xfbfd	; ????
     7a8:	0f e0       	ldi	r16, 0x0F	; 15
     7aa:	01 80       	ldd	r0, Z+1	; 0x01
     7ac:	01 80       	ldd	r0, Z+1	; 0x01
     7ae:	01 80       	ldd	r0, Z+1	; 0x01
     7b0:	01 80       	ldd	r0, Z+1	; 0x01
     7b2:	01 80       	ldd	r0, Z+1	; 0x01
     7b4:	01 80       	ldd	r0, Z+1	; 0x01
     7b6:	01 80       	ldd	r0, Z+1	; 0x01
     7b8:	01 80       	ldd	r0, Z+1	; 0x01
     7ba:	01 80       	ldd	r0, Z+1	; 0x01
     7bc:	01 80       	ldd	r0, Z+1	; 0x01
     7be:	01 80       	ldd	r0, Z+1	; 0x01
     7c0:	01 80       	ldd	r0, Z+1	; 0x01
     7c2:	01 80       	ldd	r0, Z+1	; 0x01
     7c4:	01 80       	ldd	r0, Z+1	; 0x01
     7c6:	01 80       	ldd	r0, Z+1	; 0x01
     7c8:	01 80       	ldd	r0, Z+1	; 0x01
     7ca:	01 80       	ldd	r0, Z+1	; 0x01
     7cc:	01 80       	ldd	r0, Z+1	; 0x01
     7ce:	01 80       	ldd	r0, Z+1	; 0x01
     7d0:	01 00       	.word	0x0001	; ????
     7d2:	01 00       	.word	0x0001	; ????
     7d4:	03 00       	.word	0x0003	; ????
     7d6:	62 00       	.word	0x0062	; ????
     7d8:	fc 00       	.word	0x00fc	; ????
     7da:	11 14       	cp	r1, r1
     7dc:	3c 13       	cpse	r19, r28
     7de:	01 00       	.word	0x0001	; ????
     7e0:	fc 7f       	andi	r31, 0xFC	; 252
     7e2:	00 30       	cpi	r16, 0x00	; 0
     7e4:	18 00       	.word	0x0018	; ????
     7e6:	30 30       	cpi	r19, 0x00	; 0
     7e8:	00 30       	cpi	r16, 0x00	; 0
     7ea:	60 00       	.word	0x0060	; ????
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	00 31       	cpi	r16, 0x10	; 16
     7f0:	c0 00       	.word	0x00c0	; ????
     7f2:	31 80       	ldd	r3, Z+1	; 0x01
     7f4:	00 33       	cpi	r16, 0x30	; 48
     7f6:	00 00       	nop
     7f8:	36 00       	.word	0x0036	; ????
     7fa:	00 3e       	cpi	r16, 0xE0	; 224
     7fc:	00 00       	nop
     7fe:	36 00       	.word	0x0036	; ????
     800:	00 37       	cpi	r16, 0x70	; 112
     802:	00 00       	nop
     804:	33 80       	ldd	r3, Z+3	; 0x03
     806:	00 31       	cpi	r16, 0x10	; 16
     808:	c0 00       	.word	0x00c0	; ????
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	00 30       	cpi	r16, 0x00	; 0
     80e:	70 00       	.word	0x0070	; ????
     810:	30 78       	andi	r19, 0x80	; 128
     812:	00 30       	cpi	r16, 0x00	; 0
     814:	3c 00       	.word	0x003c	; ????
     816:	30 1e       	adc	r3, r16
     818:	00 fc       	sbrc	r0, 0
     81a:	0f 80       	ldd	r0, Y+7	; 0x07
     81c:	0d 14       	cp	r0, r13
     81e:	28 0f       	add	r18, r24
     820:	01 00       	.word	0x0001	; ????
     822:	fc 00       	.word	0x00fc	; ????
     824:	30 00       	.word	0x0030	; ????
     826:	30 00       	.word	0x0030	; ????
     828:	30 00       	.word	0x0030	; ????
     82a:	30 00       	.word	0x0030	; ????
     82c:	30 00       	.word	0x0030	; ????
     82e:	30 00       	.word	0x0030	; ????
     830:	30 00       	.word	0x0030	; ????
     832:	30 00       	.word	0x0030	; ????
     834:	30 00       	.word	0x0030	; ????
     836:	30 00       	.word	0x0030	; ????
     838:	30 00       	.word	0x0030	; ????
     83a:	30 00       	.word	0x0030	; ????
     83c:	30 00       	.word	0x0030	; ????
     83e:	30 00       	.word	0x0030	; ????
     840:	30 00       	.word	0x0030	; ????
     842:	30 08       	sbc	r3, r0
     844:	30 08       	sbc	r3, r0
     846:	30 18       	sub	r3, r0
     848:	ff f8       	.word	0xf8ff	; ????
     84a:	18 14       	cp	r1, r8
     84c:	3c 1a       	sub	r3, r28
     84e:	01 00       	.word	0x0001	; ????
     850:	f8 00       	.word	0x00f8	; ????
     852:	3e 3c       	cpi	r19, 0xCE	; 206
     854:	00 38       	cpi	r16, 0x80	; 128
     856:	3c 00       	.word	0x003c	; ????
     858:	78 3e       	cpi	r23, 0xE8	; 232
     85a:	00 78       	andi	r16, 0x80	; 128
     85c:	36 00       	.word	0x0036	; ????
     85e:	d8 36       	cpi	r29, 0x68	; 104
     860:	00 d8       	rcall	.-4096   	; 0xfffff862 <__eeprom_end+0xff7ef822>
     862:	37 00       	.word	0x0037	; ????
     864:	98 33       	cpi	r25, 0x38	; 56
     866:	01 98       	cbi	0x00, 1	; 0
     868:	33 81       	ldd	r19, Z+3	; 0x03
     86a:	98 31       	cpi	r25, 0x18	; 24
     86c:	83 18       	sub	r8, r3
     86e:	31 c3       	rjmp	.+1634   	; 0xed2 <__stack+0x3d3>
     870:	18 31       	cpi	r17, 0x18	; 24
     872:	c6 18       	sub	r12, r6
     874:	30 c6       	rjmp	.+3168   	; 0x14d6 <u8g_font_gdr10r+0x362>
     876:	18 30       	cpi	r17, 0x08	; 8
     878:	e6 18       	sub	r14, r6
     87a:	30 6c       	ori	r19, 0xC0	; 192
     87c:	18 30       	cpi	r17, 0x08	; 8
     87e:	7c 18       	sub	r7, r12
     880:	30 38       	cpi	r19, 0x80	; 128
     882:	18 30       	cpi	r17, 0x08	; 8
     884:	38 18       	sub	r3, r8
     886:	30 38       	cpi	r19, 0x80	; 128
     888:	18 fc       	.word	0xfc18	; ????
     88a:	10 ff       	sbrs	r17, 0
     88c:	13 14       	cp	r1, r3
     88e:	3c 15       	cp	r19, r12
     890:	01 00       	.word	0x0001	; ????
     892:	f0 07       	cpc	r31, r16
     894:	e0 38       	cpi	r30, 0x80	; 128
     896:	01 80       	ldd	r0, Z+1	; 0x01
     898:	3c 01       	movw	r6, r24
     89a:	80 3c       	cpi	r24, 0xC0	; 192
     89c:	01 80       	ldd	r0, Z+1	; 0x01
     89e:	3e 01       	movw	r6, r28
     8a0:	80 37       	cpi	r24, 0x70	; 112
     8a2:	01 80       	ldd	r0, Z+1	; 0x01
     8a4:	33 81       	ldd	r19, Z+3	; 0x03
     8a6:	80 33       	cpi	r24, 0x30	; 48
     8a8:	81 80       	ldd	r8, Z+1	; 0x01
     8aa:	31 c1       	rjmp	.+610    	; 0xb0e <__stack+0xf>
     8ac:	80 30       	cpi	r24, 0x00	; 0
     8ae:	e1 80       	ldd	r14, Z+1	; 0x01
     8b0:	30 61       	ori	r19, 0x10	; 16
     8b2:	80 30       	cpi	r24, 0x00	; 0
     8b4:	71 80       	ldd	r7, Z+1	; 0x01
     8b6:	30 39       	cpi	r19, 0x90	; 144
     8b8:	80 30       	cpi	r24, 0x00	; 0
     8ba:	1d 80       	ldd	r1, Y+5	; 0x05
     8bc:	30 0d       	add	r19, r0
     8be:	80 30       	cpi	r24, 0x00	; 0
     8c0:	0f 80       	ldd	r0, Y+7	; 0x07
     8c2:	30 07       	cpc	r19, r16
     8c4:	80 30       	cpi	r24, 0x00	; 0
     8c6:	03 80       	ldd	r0, Z+3	; 0x03
     8c8:	30 03       	mulsu	r19, r16
     8ca:	80 fc       	sbrc	r8, 0
     8cc:	01 80       	ldd	r0, Z+1	; 0x01
     8ce:	11 14       	cp	r1, r1
     8d0:	3c 13       	cpse	r19, r28
     8d2:	01 00       	.word	0x0001	; ????
     8d4:	03 f0       	brvs	.+0      	; 0x8d6 <__trampolines_end+0x7ea>
     8d6:	00 0c       	add	r0, r0
     8d8:	18 00       	.word	0x0018	; ????
     8da:	10 0c       	add	r1, r0
     8dc:	00 30       	cpi	r16, 0x00	; 0
     8de:	06 00       	.word	0x0006	; ????
     8e0:	20 03       	mulsu	r18, r16
     8e2:	00 60       	ori	r16, 0x00	; 0
     8e4:	03 00       	.word	0x0003	; ????
     8e6:	40 03       	mulsu	r20, r16
     8e8:	80 c0       	rjmp	.+256    	; 0x9ea <__trampolines_end+0x8fe>
     8ea:	01 80       	ldd	r0, Z+1	; 0x01
     8ec:	c0 01       	movw	r24, r0
     8ee:	80 c0       	rjmp	.+256    	; 0x9f0 <__trampolines_end+0x904>
     8f0:	01 80       	ldd	r0, Z+1	; 0x01
     8f2:	c0 01       	movw	r24, r0
     8f4:	80 c0       	rjmp	.+256    	; 0x9f6 <__trampolines_end+0x90a>
     8f6:	01 80       	ldd	r0, Z+1	; 0x01
     8f8:	c0 01       	movw	r24, r0
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	01 00       	.word	0x0001	; ????
     8fe:	60 03       	mulsu	r22, r16
     900:	00 60       	ori	r16, 0x00	; 0
     902:	02 00       	.word	0x0002	; ????
     904:	30 06       	cpc	r3, r16
     906:	00 38       	cpi	r16, 0x80	; 128
     908:	04 00       	.word	0x0004	; ????
     90a:	0c 18       	sub	r0, r12
     90c:	00 07       	cpc	r16, r16
     90e:	e0 00       	.word	0x00e0	; ????
     910:	0f 14       	cp	r0, r15
     912:	28 11       	cpse	r18, r8
     914:	01 00       	.word	0x0001	; ????
     916:	3f e0       	ldi	r19, 0x0F	; 15
     918:	f0 38       	cpi	r31, 0x80	; 128
     91a:	30 1c       	adc	r3, r0
     91c:	30 0e       	add	r3, r16
     91e:	30 06       	cpc	r3, r16
     920:	30 06       	cpc	r3, r16
     922:	30 06       	cpc	r3, r16
     924:	30 06       	cpc	r3, r16
     926:	30 0c       	add	r3, r0
     928:	30 0c       	add	r3, r0
     92a:	34 38       	cpi	r19, 0x84	; 132
     92c:	33 e0       	ldi	r19, 0x03	; 3
     92e:	30 00       	.word	0x0030	; ????
     930:	30 00       	.word	0x0030	; ????
     932:	30 00       	.word	0x0030	; ????
     934:	30 00       	.word	0x0030	; ????
     936:	30 00       	.word	0x0030	; ????
     938:	30 00       	.word	0x0030	; ????
     93a:	30 00       	.word	0x0030	; ????
     93c:	fe 00       	.word	0x00fe	; ????
     93e:	13 19       	sub	r17, r3
     940:	4b 13       	cpse	r20, r27
     942:	01 fb       	bst	r16, 1
     944:	03 f0       	brvs	.+0      	; 0x946 <__trampolines_end+0x85a>
     946:	00 0c       	add	r0, r0
     948:	18 00       	.word	0x0018	; ????
     94a:	10 0c       	add	r1, r0
     94c:	00 30       	cpi	r16, 0x00	; 0
     94e:	06 00       	.word	0x0006	; ????
     950:	20 03       	mulsu	r18, r16
     952:	00 60       	ori	r16, 0x00	; 0
     954:	03 00       	.word	0x0003	; ????
     956:	40 03       	mulsu	r20, r16
     958:	80 c0       	rjmp	.+256    	; 0xa5a <__trampolines_end+0x96e>
     95a:	01 80       	ldd	r0, Z+1	; 0x01
     95c:	c0 01       	movw	r24, r0
     95e:	80 c0       	rjmp	.+256    	; 0xa60 <__trampolines_end+0x974>
     960:	01 80       	ldd	r0, Z+1	; 0x01
     962:	c0 01       	movw	r24, r0
     964:	80 c0       	rjmp	.+256    	; 0xa66 <__trampolines_end+0x97a>
     966:	01 80       	ldd	r0, Z+1	; 0x01
     968:	c0 01       	movw	r24, r0
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	01 00       	.word	0x0001	; ????
     96e:	60 03       	mulsu	r22, r16
     970:	00 60       	ori	r16, 0x00	; 0
     972:	03 00       	.word	0x0003	; ????
     974:	30 06       	cpc	r3, r16
     976:	00 18       	sub	r0, r0
     978:	04 00       	.word	0x0004	; ????
     97a:	0c 18       	sub	r0, r12
     97c:	00 07       	cpc	r16, r16
     97e:	f0 00       	.word	0x00f0	; ????
     980:	00 70       	andi	r16, 0x00	; 0
     982:	00 00       	nop
     984:	18 00       	.word	0x0018	; ????
     986:	00 0e       	add	r0, r16
     988:	20 00       	.word	0x0020	; ????
     98a:	07 c0       	rjmp	.+14     	; 0x99a <__trampolines_end+0x8ae>
     98c:	00 01       	movw	r0, r0
     98e:	80 12       	cpse	r8, r16
     990:	14 3c       	cpi	r17, 0xC4	; 196
     992:	12 01       	movw	r2, r4
     994:	00 3f       	cpi	r16, 0xF0	; 240
     996:	c0 00       	.word	0x00c0	; ????
     998:	f0 70       	andi	r31, 0x00	; 0
     99a:	00 30       	cpi	r16, 0x00	; 0
     99c:	18 00       	.word	0x0018	; ????
     99e:	30 0c       	add	r3, r0
     9a0:	00 30       	cpi	r16, 0x00	; 0
     9a2:	0c 00       	.word	0x000c	; ????
     9a4:	30 0c       	add	r3, r0
     9a6:	00 30       	cpi	r16, 0x00	; 0
     9a8:	0c 00       	.word	0x000c	; ????
     9aa:	30 18       	sub	r3, r0
     9ac:	00 30       	cpi	r16, 0x00	; 0
     9ae:	70 00       	.word	0x0070	; ????
     9b0:	3f e0       	ldi	r19, 0x0F	; 15
     9b2:	00 3f       	cpi	r16, 0xF0	; 240
     9b4:	c0 00       	.word	0x00c0	; ????
     9b6:	31 c0       	rjmp	.+98     	; 0xa1a <__trampolines_end+0x92e>
     9b8:	00 30       	cpi	r16, 0x00	; 0
     9ba:	e0 00       	.word	0x00e0	; ????
     9bc:	30 70       	andi	r19, 0x00	; 0
     9be:	00 30       	cpi	r16, 0x00	; 0
     9c0:	70 00       	.word	0x0070	; ????
     9c2:	30 38       	cpi	r19, 0x80	; 128
     9c4:	00 30       	cpi	r16, 0x00	; 0
     9c6:	3c 00       	.word	0x003c	; ????
     9c8:	30 1c       	adc	r3, r0
     9ca:	00 30       	cpi	r16, 0x00	; 0
     9cc:	0f 00       	.word	0x000f	; ????
     9ce:	fc 0f       	add	r31, r28
     9d0:	c0 0c       	add	r12, r0
     9d2:	14 28       	or	r1, r4
     9d4:	0f 02       	muls	r16, r31
     9d6:	00 0f       	add	r16, r16
     9d8:	e0 30       	cpi	r30, 0x00	; 0
     9da:	e0 40       	sbci	r30, 0x00	; 0
     9dc:	40 c0       	rjmp	.+128    	; 0xa5e <__trampolines_end+0x972>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <__trampolines_end+0x8f4>
     9e0:	00 e0       	ldi	r16, 0x00	; 0
     9e2:	00 f8       	bld	r0, 0
     9e4:	00 7e       	andi	r16, 0xE0	; 224
     9e6:	00 7f       	andi	r16, 0xF0	; 240
     9e8:	00 1f       	adc	r16, r16
     9ea:	c0 07       	cpc	r28, r16
     9ec:	e0 01       	movw	r28, r0
     9ee:	f0 00       	.word	0x00f0	; ????
     9f0:	f0 00       	.word	0x00f0	; ????
     9f2:	70 00       	.word	0x0070	; ????
     9f4:	30 00       	.word	0x0030	; ????
     9f6:	30 80       	ld	r3, Z
     9f8:	20 c0       	rjmp	.+64     	; 0xa3a <__trampolines_end+0x94e>
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	c0 7f       	andi	r28, 0xF0	; 240
     9fe:	00 10       	cpse	r0, r0
     a00:	14 28       	or	r1, r4
     a02:	12 01       	movw	r2, r4
     a04:	00 ff       	sbrs	r16, 0
     a06:	ff 81       	ldd	r31, Y+7	; 0x07
     a08:	83 81       	ldd	r24, Z+3	; 0x03
     a0a:	81 81       	ldd	r24, Z+1	; 0x01
     a0c:	81 01       	movw	r16, r2
     a0e:	80 01       	movw	r16, r0
     a10:	80 01       	movw	r16, r0
     a12:	80 01       	movw	r16, r0
     a14:	80 01       	movw	r16, r0
     a16:	80 01       	movw	r16, r0
     a18:	80 01       	movw	r16, r0
     a1a:	80 01       	movw	r16, r0
     a1c:	80 01       	movw	r16, r0
     a1e:	80 01       	movw	r16, r0
     a20:	80 01       	movw	r16, r0
     a22:	80 01       	movw	r16, r0
     a24:	80 01       	movw	r16, r0
     a26:	80 01       	movw	r16, r0
     a28:	80 01       	movw	r16, r0
     a2a:	80 0f       	add	r24, r16
     a2c:	f0 13       	cpse	r31, r16
     a2e:	14 3c       	cpi	r17, 0xC4	; 196
     a30:	15 01       	movw	r2, r10
     a32:	00 fc       	sbrc	r0, 0
     a34:	07 e0       	ldi	r16, 0x07	; 7
     a36:	30 01       	movw	r6, r0
     a38:	80 30       	cpi	r24, 0x00	; 0
     a3a:	01 80       	ldd	r0, Z+1	; 0x01
     a3c:	30 01       	movw	r6, r0
     a3e:	80 30       	cpi	r24, 0x00	; 0
     a40:	01 80       	ldd	r0, Z+1	; 0x01
     a42:	30 01       	movw	r6, r0
     a44:	80 30       	cpi	r24, 0x00	; 0
     a46:	01 80       	ldd	r0, Z+1	; 0x01
     a48:	30 01       	movw	r6, r0
     a4a:	80 30       	cpi	r24, 0x00	; 0
     a4c:	01 80       	ldd	r0, Z+1	; 0x01
     a4e:	30 01       	movw	r6, r0
     a50:	80 30       	cpi	r24, 0x00	; 0
     a52:	01 80       	ldd	r0, Z+1	; 0x01
     a54:	30 01       	movw	r6, r0
     a56:	80 30       	cpi	r24, 0x00	; 0
     a58:	01 80       	ldd	r0, Z+1	; 0x01
     a5a:	30 01       	movw	r6, r0
     a5c:	80 30       	cpi	r24, 0x00	; 0
     a5e:	01 80       	ldd	r0, Z+1	; 0x01
     a60:	30 01       	movw	r6, r0
     a62:	00 18       	sub	r0, r0
     a64:	03 00       	.word	0x0003	; ????
     a66:	1c 06       	cpc	r1, r28
     a68:	00 0e       	add	r0, r16
     a6a:	0c 00       	.word	0x000c	; ????
     a6c:	03 f0       	brvs	.+0      	; 0xa6e <__trampolines_end+0x982>
     a6e:	00 14       	cp	r0, r0
     a70:	14 3c       	cpi	r17, 0xC4	; 196
     a72:	15 00       	.word	0x0015	; ????
     a74:	00 fe       	sbrs	r0, 0
     a76:	03 f0       	brvs	.+0      	; 0xa78 <__trampolines_end+0x98c>
     a78:	38 00       	.word	0x0038	; ????
     a7a:	c0 18       	sub	r12, r0
     a7c:	00 80       	ld	r0, Z
     a7e:	1c 01       	movw	r2, r24
     a80:	80 0c       	add	r8, r0
     a82:	01 80       	ldd	r0, Z+1	; 0x01
     a84:	0e 03       	fmul	r16, r22
     a86:	00 0e       	add	r0, r16
     a88:	03 00       	.word	0x0003	; ????
     a8a:	06 03       	mulsu	r16, r22
     a8c:	00 07       	cpc	r16, r16
     a8e:	06 00       	.word	0x0006	; ????
     a90:	07 06       	cpc	r0, r23
     a92:	00 03       	mulsu	r16, r16
     a94:	06 00       	.word	0x0006	; ????
     a96:	03 8c       	ldd	r0, Z+27	; 0x1b
     a98:	00 01       	movw	r0, r0
     a9a:	8c 00       	.word	0x008c	; ????
     a9c:	01 cc       	rjmp	.-2046   	; 0x2a0 <__trampolines_end+0x1b4>
     a9e:	00 01       	movw	r0, r0
     aa0:	d8 00       	.word	0x00d8	; ????
     aa2:	00 d8       	rcall	.-4096   	; 0xfffffaa4 <__eeprom_end+0xff7efa64>
     aa4:	00 00       	nop
     aa6:	f8 00       	.word	0x00f8	; ????
     aa8:	00 f0       	brcs	.+0      	; 0xaaa <__trampolines_end+0x9be>
     aaa:	00 00       	nop
     aac:	70 00       	.word	0x0070	; ????
     aae:	00 60       	ori	r16, 0x00	; 0
     ab0:	00 1b       	sub	r16, r16
     ab2:	14 50       	subi	r17, 0x04	; 4
     ab4:	1b 00       	.word	0x001b	; ????
     ab6:	00 fe       	sbrs	r0, 0
     ab8:	04 0f       	add	r16, r20
     aba:	e0 38       	cpi	r30, 0x80	; 128
     abc:	04 03       	mulsu	r16, r20
     abe:	00 18       	sub	r0, r0
     ac0:	0e 03       	fmul	r16, r22
     ac2:	00 18       	sub	r0, r0
     ac4:	0e 03       	fmul	r16, r22
     ac6:	00 1c       	adc	r0, r0
     ac8:	0f 03       	fmul	r16, r23
     aca:	00 1c       	adc	r0, r0
     acc:	1b 02       	muls	r17, r27
     ace:	00 0c       	add	r0, r0
     ad0:	1b 06       	cpc	r1, r27
     ad2:	00 0c       	add	r0, r0
     ad4:	1b 86       	std	Y+11, r1	; 0x0b
     ad6:	00 0c       	add	r0, r0
     ad8:	31 86       	std	Z+9, r3	; 0x09
     ada:	00 0e       	add	r0, r16
     adc:	31 86       	std	Z+9, r3	; 0x09
     ade:	00 0e       	add	r0, r16
     ae0:	31 c4       	rjmp	.+2146   	; 0x1344 <u8g_font_gdr10r+0x1d0>
     ae2:	00 06       	cpc	r0, r16
     ae4:	60 cc       	rjmp	.-1856   	; 0x3a6 <__trampolines_end+0x2ba>
     ae6:	00 06       	cpc	r0, r16
     ae8:	60 cc       	rjmp	.-1856   	; 0x3aa <__trampolines_end+0x2be>
     aea:	00 07       	cpc	r16, r16
     aec:	60 ec       	ldi	r22, 0xC0	; 192
     aee:	00 07       	cpc	r16, r16
     af0:	c0 6c       	ori	r28, 0xC0	; 192
     af2:	00 03       	mulsu	r16, r16
     af4:	c0 78       	andi	r28, 0x80	; 128
     af6:	00 03       	mulsu	r16, r16
     af8:	c0 78       	andi	r28, 0x80	; 128
     afa:	00 03       	mulsu	r16, r16
     afc:	80 38       	cpi	r24, 0x80	; 128
     afe:	00 03       	mulsu	r16, r16
     b00:	80 38       	cpi	r24, 0x80	; 128
     b02:	00 03       	mulsu	r16, r16
     b04:	00 30       	cpi	r16, 0x00	; 0
     b06:	00 13       	cpse	r16, r16
     b08:	14 3c       	cpi	r17, 0xC4	; 196
     b0a:	14 00       	.word	0x0014	; ????
     b0c:	00 7f       	andi	r16, 0xF0	; 240
     b0e:	1f c0       	rjmp	.+62     	; 0xb4e <__stack+0x4f>
     b10:	3c 07       	cpc	r19, r28
     b12:	00 1c       	adc	r0, r0
     b14:	06 00       	.word	0x0006	; ????
     b16:	0e 06       	cpc	r0, r30
     b18:	00 07       	cpc	r16, r16
     b1a:	0c 00       	.word	0x000c	; ????
     b1c:	07 1c       	adc	r0, r7
     b1e:	00 03       	mulsu	r16, r16
     b20:	98 00       	.word	0x0098	; ????
     b22:	01 f0       	breq	.+0      	; 0xb24 <__stack+0x25>
     b24:	00 01       	movw	r0, r0
     b26:	f0 00       	.word	0x00f0	; ????
     b28:	00 e0       	ldi	r16, 0x00	; 0
     b2a:	00 00       	nop
     b2c:	f0 00       	.word	0x00f0	; ????
     b2e:	01 f0       	breq	.+0      	; 0xb30 <__stack+0x31>
     b30:	00 01       	movw	r0, r0
     b32:	b8 00       	.word	0x00b8	; ????
     b34:	03 1c       	adc	r0, r3
     b36:	00 07       	cpc	r16, r16
     b38:	0c 00       	.word	0x000c	; ????
     b3a:	06 0e       	add	r0, r22
     b3c:	00 0c       	add	r0, r0
     b3e:	07 00       	.word	0x0007	; ????
     b40:	1c 03       	fmul	r17, r20
     b42:	80 38       	cpi	r24, 0x80	; 128
     b44:	03 c0       	rjmp	.+6      	; 0xb4c <__stack+0x4d>
     b46:	ff 0f       	add	r31, r31
     b48:	e0 12       	cpse	r14, r16
     b4a:	14 3c       	cpi	r17, 0xC4	; 196
     b4c:	13 00       	.word	0x0013	; ????
     b4e:	00 f0       	brcs	.+0      	; 0xb50 <__stack+0x51>
     b50:	1f c0       	rjmp	.+62     	; 0xb90 <__stack+0x91>
     b52:	38 07       	cpc	r19, r24
     b54:	00 1c       	adc	r0, r0
     b56:	06 00       	.word	0x0006	; ????
     b58:	0c 0c       	add	r0, r12
     b5a:	00 0e       	add	r0, r16
     b5c:	0c 00       	.word	0x000c	; ????
     b5e:	07 18       	sub	r0, r7
     b60:	00 07       	cpc	r16, r16
     b62:	18 00       	.word	0x0018	; ????
     b64:	03 30       	cpi	r16, 0x03	; 3
     b66:	00 03       	mulsu	r16, r16
     b68:	b0 00       	.word	0x00b0	; ????
     b6a:	01 e0       	ldi	r16, 0x01	; 1
     b6c:	00 01       	movw	r0, r0
     b6e:	e0 00       	.word	0x00e0	; ????
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <__stack+0x73>
     b72:	00 00       	nop
     b74:	c0 00       	.word	0x00c0	; ????
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <__stack+0x79>
     b78:	00 00       	nop
     b7a:	c0 00       	.word	0x00c0	; ????
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <__stack+0x7f>
     b7e:	00 00       	nop
     b80:	c0 00       	.word	0x00c0	; ????
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <__stack+0x85>
     b84:	00 00       	nop
     b86:	c0 00       	.word	0x00c0	; ????
     b88:	07 f8       	bld	r0, 7
     b8a:	00 0e       	add	r0, r16
     b8c:	14 28       	or	r1, r4
     b8e:	11 01       	movw	r2, r2
     b90:	00 7f       	andi	r16, 0xF0	; 240
     b92:	fc 60       	ori	r31, 0x0C	; 12
     b94:	1c 40       	sbci	r17, 0x0C	; 12
     b96:	38 40       	sbci	r19, 0x08	; 8
     b98:	78 00       	.word	0x0078	; ????
     b9a:	70 00       	.word	0x0070	; ????
     b9c:	e0 00       	.word	0x00e0	; ????
     b9e:	e0 01       	movw	r28, r0
     ba0:	c0 03       	fmuls	r20, r16
     ba2:	c0 03       	fmuls	r20, r16
     ba4:	80 07       	cpc	r24, r16
     ba6:	00 07       	cpc	r16, r16
     ba8:	00 0e       	add	r0, r16
     baa:	00 1e       	adc	r0, r16
     bac:	00 1c       	adc	r0, r0
     bae:	00 38       	cpi	r16, 0x80	; 128
     bb0:	00 38       	cpi	r16, 0x80	; 128
     bb2:	04 70       	andi	r16, 0x04	; 4
     bb4:	04 f0       	brlt	.+0      	; 0xbb6 <__stack+0xb7>
     bb6:	0c ff       	.word	0xff0c	; ????
     bb8:	fc 07       	cpc	r31, r28
     bba:	1e 1e       	adc	r1, r30
     bbc:	0a 02       	muls	r16, r26
     bbe:	fb fe       	.word	0xfefb	; ????
     bc0:	c0 c0       	rjmp	.+384    	; 0xd42 <__stack+0x243>
     bc2:	c0 c0       	rjmp	.+384    	; 0xd44 <__stack+0x245>
     bc4:	c0 c0       	rjmp	.+384    	; 0xd46 <__stack+0x247>
     bc6:	c0 c0       	rjmp	.+384    	; 0xd48 <__stack+0x249>
     bc8:	c0 c0       	rjmp	.+384    	; 0xd4a <__stack+0x24b>
     bca:	c0 c0       	rjmp	.+384    	; 0xd4c <__stack+0x24d>
     bcc:	c0 c0       	rjmp	.+384    	; 0xd4e <__stack+0x24f>
     bce:	c0 c0       	rjmp	.+384    	; 0xd50 <__stack+0x251>
     bd0:	c0 c0       	rjmp	.+384    	; 0xd52 <__stack+0x253>
     bd2:	c0 c0       	rjmp	.+384    	; 0xd54 <__stack+0x255>
     bd4:	c0 c0       	rjmp	.+384    	; 0xd56 <__stack+0x257>
     bd6:	c0 c0       	rjmp	.+384    	; 0xd58 <__stack+0x259>
     bd8:	c0 c0       	rjmp	.+384    	; 0xd5a <__stack+0x25b>
     bda:	c0 c0       	rjmp	.+384    	; 0xd5c <__stack+0x25d>
     bdc:	fe 0d       	add	r31, r14
     bde:	1e 3c       	cpi	r17, 0xCE	; 206
     be0:	0f 01       	movw	r0, r30
     be2:	fb c0       	rjmp	.+502    	; 0xdda <__stack+0x2db>
     be4:	00 c0       	rjmp	.+0      	; 0xbe6 <__stack+0xe7>
     be6:	00 60       	ori	r16, 0x00	; 0
     be8:	00 60       	ori	r16, 0x00	; 0
     bea:	00 70       	andi	r16, 0x00	; 0
     bec:	00 30       	cpi	r16, 0x00	; 0
     bee:	00 30       	cpi	r16, 0x00	; 0
     bf0:	00 18       	sub	r0, r0
     bf2:	00 18       	sub	r0, r0
     bf4:	00 1c       	adc	r0, r0
     bf6:	00 0c       	add	r0, r0
     bf8:	00 0c       	add	r0, r0
     bfa:	00 0e       	add	r0, r16
     bfc:	00 06       	cpc	r0, r16
     bfe:	00 06       	cpc	r0, r16
     c00:	00 03       	mulsu	r16, r16
     c02:	00 03       	mulsu	r16, r16
     c04:	00 03       	mulsu	r16, r16
     c06:	80 01       	movw	r16, r0
     c08:	80 01       	movw	r16, r0
     c0a:	80 00       	.word	0x0080	; ????
     c0c:	c0 00       	.word	0x00c0	; ????
     c0e:	c0 00       	.word	0x00c0	; ????
     c10:	c0 00       	.word	0x00c0	; ????
     c12:	60 00       	.word	0x0060	; ????
     c14:	60 00       	.word	0x0060	; ????
     c16:	70 00       	.word	0x0070	; ????
     c18:	30 00       	.word	0x0030	; ????
     c1a:	30 00       	.word	0x0030	; ????
     c1c:	18 00       	.word	0x0018	; ????
     c1e:	18 07       	cpc	r17, r24
     c20:	1e 1e       	adc	r1, r30
     c22:	0a 01       	movw	r0, r20
     c24:	fb fe       	.word	0xfefb	; ????
     c26:	06 06       	cpc	r0, r22
     c28:	06 06       	cpc	r0, r22
     c2a:	06 06       	cpc	r0, r22
     c2c:	06 06       	cpc	r0, r22
     c2e:	06 06       	cpc	r0, r22
     c30:	06 06       	cpc	r0, r22
     c32:	06 06       	cpc	r0, r22
     c34:	06 06       	cpc	r0, r22
     c36:	06 06       	cpc	r0, r22
     c38:	06 06       	cpc	r0, r22
     c3a:	06 06       	cpc	r0, r22
     c3c:	06 06       	cpc	r0, r22
     c3e:	06 06       	cpc	r0, r22
     c40:	06 06       	cpc	r0, r22
     c42:	fe 0c       	add	r15, r14
     c44:	0f 1e       	adc	r0, r31
     c46:	10 02       	muls	r17, r16
     c48:	09 02       	muls	r16, r25
     c4a:	00 06       	cpc	r0, r16
     c4c:	00 0f       	add	r16, r16
     c4e:	00 0f       	add	r16, r16
     c50:	00 1b       	sub	r16, r16
     c52:	00 1b       	sub	r16, r16
     c54:	80 11       	cpse	r24, r0
     c56:	80 31       	cpi	r24, 0x10	; 16
     c58:	c0 31       	cpi	r28, 0x10	; 16
     c5a:	c0 60       	ori	r28, 0x00	; 0
     c5c:	c0 60       	ori	r28, 0x00	; 0
     c5e:	e0 60       	ori	r30, 0x00	; 0
     c60:	60 c0       	rjmp	.+192    	; 0xd22 <__stack+0x223>
     c62:	70 c0       	rjmp	.+224    	; 0xd44 <__stack+0x245>
     c64:	30 80       	ld	r3, Z
     c66:	20 0d       	add	r18, r0
     c68:	01 02       	muls	r16, r17
     c6a:	0f 01       	movw	r0, r30
     c6c:	fd ff       	.word	0xfffd	; ????
     c6e:	f8 07       	cpc	r31, r24
     c70:	07 07       	cpc	r16, r23
     c72:	0a 00       	.word	0x000a	; ????
     c74:	10 60       	ori	r17, 0x00	; 0
     c76:	f0 38       	cpi	r31, 0x80	; 128
     c78:	18 0c       	add	r1, r8
     c7a:	04 02       	muls	r16, r20
     c7c:	0d 0f       	add	r16, r29
     c7e:	1e 0f       	add	r17, r30
     c80:	01 00       	.word	0x0001	; ????
     c82:	0f c0       	rjmp	.+30     	; 0xca2 <__stack+0x1a3>
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	70 60       	ori	r23, 0x00	; 0
     c88:	60 60       	ori	r22, 0x00	; 0
     c8a:	00 60       	ori	r16, 0x00	; 0
     c8c:	00 60       	ori	r16, 0x00	; 0
     c8e:	0f e0       	ldi	r16, 0x0F	; 15
     c90:	3f e0       	ldi	r19, 0x0F	; 15
     c92:	7e 60       	ori	r23, 0x0E	; 14
     c94:	f0 60       	ori	r31, 0x00	; 0
     c96:	e0 60       	ori	r30, 0x00	; 0
     c98:	c0 60       	ori	r28, 0x00	; 0
     c9a:	c0 60       	ori	r28, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	3e 78       	andi	r19, 0x8E	; 142
     ca0:	0f 18       	sub	r0, r15
     ca2:	30 10       	cpse	r3, r0
     ca4:	00 00       	nop
     ca6:	30 00       	.word	0x0030	; ????
     ca8:	f0 00       	.word	0x00f0	; ????
     caa:	30 00       	.word	0x0030	; ????
     cac:	30 00       	.word	0x0030	; ????
     cae:	30 00       	.word	0x0030	; ????
     cb0:	30 00       	.word	0x0030	; ????
     cb2:	30 00       	.word	0x0030	; ????
     cb4:	30 00       	.word	0x0030	; ????
     cb6:	30 00       	.word	0x0030	; ????
     cb8:	30 f0       	brcs	.+12     	; 0xcc6 <__stack+0x1c7>
     cba:	31 f8       	bld	r3, 1
     cbc:	36 1c       	adc	r3, r6
     cbe:	3c 0c       	add	r3, r12
     cc0:	38 0e       	add	r3, r24
     cc2:	30 06       	cpc	r3, r16
     cc4:	30 06       	cpc	r3, r16
     cc6:	30 06       	cpc	r3, r16
     cc8:	30 06       	cpc	r3, r16
     cca:	30 06       	cpc	r3, r16
     ccc:	30 04       	cpc	r3, r0
     cce:	30 0c       	add	r3, r0
     cd0:	30 08       	sbc	r3, r0
     cd2:	1c 10       	cpse	r1, r12
     cd4:	07 e0       	ldi	r16, 0x07	; 7
     cd6:	0c 0f       	add	r16, r28
     cd8:	1e 0e       	add	r1, r30
     cda:	01 00       	.word	0x0001	; ????
     cdc:	07 e0       	ldi	r16, 0x07	; 7
     cde:	18 60       	ori	r17, 0x08	; 8
     ce0:	20 20       	and	r2, r0
     ce2:	60 00       	.word	0x0060	; ????
     ce4:	40 00       	.word	0x0040	; ????
     ce6:	c0 00       	.word	0x00c0	; ????
     ce8:	c0 00       	.word	0x00c0	; ????
     cea:	c0 00       	.word	0x00c0	; ????
     cec:	c0 00       	.word	0x00c0	; ????
     cee:	c0 00       	.word	0x00c0	; ????
     cf0:	c0 00       	.word	0x00c0	; ????
     cf2:	60 00       	.word	0x0060	; ????
     cf4:	70 20       	and	r7, r0
     cf6:	38 70       	andi	r19, 0x08	; 8
     cf8:	1f 80       	ldd	r1, Y+7	; 0x07
     cfa:	0f 18       	sub	r0, r15
     cfc:	30 11       	cpse	r19, r0
     cfe:	01 00       	.word	0x0001	; ????
     d00:	00 18       	sub	r0, r0
     d02:	00 78       	andi	r16, 0x80	; 128
     d04:	00 18       	sub	r0, r0
     d06:	00 18       	sub	r0, r0
     d08:	00 18       	sub	r0, r0
     d0a:	00 18       	sub	r0, r0
     d0c:	00 18       	sub	r0, r0
     d0e:	00 18       	sub	r0, r0
     d10:	00 18       	sub	r0, r0
     d12:	07 f8       	bld	r0, 7
     d14:	18 38       	cpi	r17, 0x88	; 136
     d16:	20 18       	sub	r2, r0
     d18:	60 18       	sub	r6, r0
     d1a:	40 18       	sub	r4, r0
     d1c:	c0 18       	sub	r12, r0
     d1e:	c0 18       	sub	r12, r0
     d20:	c0 18       	sub	r12, r0
     d22:	c0 18       	sub	r12, r0
     d24:	c0 18       	sub	r12, r0
     d26:	c0 18       	sub	r12, r0
     d28:	60 18       	sub	r6, r0
     d2a:	70 38       	cpi	r23, 0x80	; 128
     d2c:	38 de       	rcall	.-912    	; 0x99e <__trampolines_end+0x8b2>
     d2e:	0f 18       	sub	r0, r15
     d30:	0d 0f       	add	r16, r29
     d32:	1e 0f       	add	r17, r30
     d34:	01 00       	.word	0x0001	; ????
     d36:	07 c0       	rjmp	.+14     	; 0xd46 <__stack+0x247>
     d38:	18 60       	ori	r17, 0x08	; 8
     d3a:	20 30       	cpi	r18, 0x00	; 0
     d3c:	60 18       	sub	r6, r0
     d3e:	40 18       	sub	r4, r0
     d40:	c0 18       	sub	r12, r0
     d42:	ff f0       	brie	.+62     	; 0xd82 <__stack+0x283>
     d44:	c0 00       	.word	0x00c0	; ????
     d46:	c0 00       	.word	0x00c0	; ????
     d48:	c0 00       	.word	0x00c0	; ????
     d4a:	e0 00       	.word	0x00e0	; ????
     d4c:	60 00       	.word	0x0060	; ????
     d4e:	70 08       	sbc	r7, r0
     d50:	38 30       	cpi	r19, 0x08	; 8
     d52:	0f c0       	rjmp	.+30     	; 0xd72 <__stack+0x273>
     d54:	0b 18       	sub	r0, r11
     d56:	30 0a       	sbc	r3, r16
     d58:	01 00       	.word	0x0001	; ????
     d5a:	03 e0       	ldi	r16, 0x03	; 3
     d5c:	04 c0       	rjmp	.+8      	; 0xd66 <__stack+0x267>
     d5e:	18 00       	.word	0x0018	; ????
     d60:	10 00       	.word	0x0010	; ????
     d62:	30 00       	.word	0x0030	; ????
     d64:	30 00       	.word	0x0030	; ????
     d66:	30 00       	.word	0x0030	; ????
     d68:	30 00       	.word	0x0030	; ????
     d6a:	30 00       	.word	0x0030	; ????
     d6c:	ff 00       	.word	0x00ff	; ????
     d6e:	32 00       	.word	0x0032	; ????
     d70:	30 00       	.word	0x0030	; ????
     d72:	30 00       	.word	0x0030	; ????
     d74:	30 00       	.word	0x0030	; ????
     d76:	30 00       	.word	0x0030	; ????
     d78:	30 00       	.word	0x0030	; ????
     d7a:	30 00       	.word	0x0030	; ????
     d7c:	30 00       	.word	0x0030	; ????
     d7e:	30 00       	.word	0x0030	; ????
     d80:	30 00       	.word	0x0030	; ????
     d82:	30 00       	.word	0x0030	; ????
     d84:	30 00       	.word	0x0030	; ????
     d86:	30 00       	.word	0x0030	; ????
     d88:	fe 00       	.word	0x00fe	; ????
     d8a:	0f 17       	cp	r16, r31
     d8c:	2e 10       	cpse	r2, r14
     d8e:	01 f8       	bld	r0, 1
     d90:	07 86       	std	Z+15, r0	; 0x0f
     d92:	18 fc       	.word	0xfc18	; ????
     d94:	20 60       	ori	r18, 0x00	; 0
     d96:	60 30       	cpi	r22, 0x00	; 0
     d98:	60 30       	cpi	r22, 0x00	; 0
     d9a:	60 30       	cpi	r22, 0x00	; 0
     d9c:	60 30       	cpi	r22, 0x00	; 0
     d9e:	70 60       	ori	r23, 0x00	; 0
     da0:	38 40       	sbci	r19, 0x08	; 8
     da2:	1f 80       	ldd	r1, Y+7	; 0x07
     da4:	08 00       	.word	0x0008	; ????
     da6:	10 00       	.word	0x0010	; ????
     da8:	3c 00       	.word	0x003c	; ????
     daa:	3f e0       	ldi	r19, 0x0F	; 15
     dac:	0f f8       	.word	0xf80f	; ????
     dae:	3f fc       	.word	0xfc3f	; ????
     db0:	70 7c       	andi	r23, 0xC0	; 192
     db2:	e0 0c       	add	r14, r0
     db4:	c0 0c       	add	r12, r0
     db6:	c0 08       	sbc	r12, r0
     db8:	60 10       	cpse	r6, r0
     dba:	70 20       	and	r7, r0
     dbc:	1f c0       	rjmp	.+62     	; 0xdfc <__stack+0x2fd>
     dbe:	10 18       	sub	r1, r0
     dc0:	30 12       	cpse	r3, r16
     dc2:	01 00       	.word	0x0001	; ????
     dc4:	10 00       	.word	0x0010	; ????
     dc6:	f0 00       	.word	0x00f0	; ????
     dc8:	30 00       	.word	0x0030	; ????
     dca:	30 00       	.word	0x0030	; ????
     dcc:	30 00       	.word	0x0030	; ????
     dce:	30 00       	.word	0x0030	; ????
     dd0:	30 00       	.word	0x0030	; ????
     dd2:	30 00       	.word	0x0030	; ????
     dd4:	30 00       	.word	0x0030	; ????
     dd6:	30 70       	andi	r19, 0x00	; 0
     dd8:	31 88       	ldd	r3, Z+17	; 0x11
     dda:	36 0c       	add	r3, r6
     ddc:	38 0c       	add	r3, r8
     dde:	38 0c       	add	r3, r8
     de0:	30 0c       	add	r3, r0
     de2:	30 0c       	add	r3, r0
     de4:	30 0c       	add	r3, r0
     de6:	30 0c       	add	r3, r0
     de8:	30 0c       	add	r3, r0
     dea:	30 0c       	add	r3, r0
     dec:	30 0c       	add	r3, r0
     dee:	30 0c       	add	r3, r0
     df0:	30 0c       	add	r3, r0
     df2:	fc 3f       	cpi	r31, 0xFC	; 252
     df4:	06 15       	cp	r16, r6
     df6:	15 09       	sbc	r17, r5
     df8:	01 00       	.word	0x0001	; ????
     dfa:	30 70       	andi	r19, 0x00	; 0
     dfc:	70 60       	ori	r23, 0x00	; 0
     dfe:	00 00       	nop
     e00:	30 f0       	brcs	.+12     	; 0xe0e <__stack+0x30f>
     e02:	30 30       	cpi	r19, 0x00	; 0
     e04:	30 30       	cpi	r19, 0x00	; 0
     e06:	30 30       	cpi	r19, 0x00	; 0
     e08:	30 30       	cpi	r19, 0x00	; 0
     e0a:	30 30       	cpi	r19, 0x00	; 0
     e0c:	30 30       	cpi	r19, 0x00	; 0
     e0e:	fc 09       	sbc	r31, r12
     e10:	1d 3a       	cpi	r17, 0xAD	; 173
     e12:	08 fc       	.word	0xfc08	; ????
     e14:	f8 01       	movw	r30, r16
     e16:	80 03       	fmuls	r16, r16
     e18:	80 03       	fmuls	r16, r16
     e1a:	80 03       	fmuls	r16, r16
     e1c:	00 00       	nop
     e1e:	00 00       	nop
     e20:	00 01       	movw	r0, r0
     e22:	80 07       	cpc	r24, r16
     e24:	80 01       	movw	r16, r0
     e26:	80 01       	movw	r16, r0
     e28:	80 01       	movw	r16, r0
     e2a:	80 01       	movw	r16, r0
     e2c:	80 01       	movw	r16, r0
     e2e:	80 01       	movw	r16, r0
     e30:	80 01       	movw	r16, r0
     e32:	80 01       	movw	r16, r0
     e34:	80 01       	movw	r16, r0
     e36:	80 01       	movw	r16, r0
     e38:	80 01       	movw	r16, r0
     e3a:	80 01       	movw	r16, r0
     e3c:	80 01       	movw	r16, r0
     e3e:	80 01       	movw	r16, r0
     e40:	80 01       	movw	r16, r0
     e42:	80 01       	movw	r16, r0
     e44:	80 01       	movw	r16, r0
     e46:	00 03       	mulsu	r16, r16
     e48:	00 02       	muls	r16, r16
     e4a:	00 7c       	andi	r16, 0xC0	; 192
     e4c:	00 f8       	bld	r0, 0
     e4e:	00 0f       	add	r16, r16
     e50:	18 30       	cpi	r17, 0x08	; 8
     e52:	10 01       	movw	r2, r0
     e54:	00 10       	cpse	r0, r0
     e56:	00 f0       	brcs	.+0      	; 0xe58 <__stack+0x359>
     e58:	00 30       	cpi	r16, 0x00	; 0
     e5a:	00 30       	cpi	r16, 0x00	; 0
     e5c:	00 30       	cpi	r16, 0x00	; 0
     e5e:	00 30       	cpi	r16, 0x00	; 0
     e60:	00 30       	cpi	r16, 0x00	; 0
     e62:	00 30       	cpi	r16, 0x00	; 0
     e64:	00 30       	cpi	r16, 0x00	; 0
     e66:	00 30       	cpi	r16, 0x00	; 0
     e68:	fc 30       	cpi	r31, 0x0C	; 12
     e6a:	70 30       	cpi	r23, 0x00	; 0
     e6c:	e0 31       	cpi	r30, 0x10	; 16
     e6e:	80 33       	cpi	r24, 0x30	; 48
     e70:	00 36       	cpi	r16, 0x60	; 96
     e72:	00 3e       	cpi	r16, 0xE0	; 224
     e74:	00 36       	cpi	r16, 0x60	; 96
     e76:	00 37       	cpi	r16, 0x70	; 112
     e78:	00 33       	cpi	r16, 0x30	; 48
     e7a:	80 31       	cpi	r24, 0x10	; 16
     e7c:	c0 30       	cpi	r28, 0x00	; 0
     e7e:	e0 30       	cpi	r30, 0x00	; 0
     e80:	70 30       	cpi	r23, 0x00	; 0
     e82:	78 fc       	.word	0xfc78	; ????
     e84:	3e 06       	cpc	r3, r30
     e86:	18 18       	sub	r1, r8
     e88:	09 01       	movw	r0, r18
     e8a:	00 10       	cpse	r0, r0
     e8c:	f0 30       	cpi	r31, 0x00	; 0
     e8e:	30 30       	cpi	r19, 0x00	; 0
     e90:	30 30       	cpi	r19, 0x00	; 0
     e92:	30 30       	cpi	r19, 0x00	; 0
     e94:	30 30       	cpi	r19, 0x00	; 0
     e96:	30 30       	cpi	r19, 0x00	; 0
     e98:	30 30       	cpi	r19, 0x00	; 0
     e9a:	30 30       	cpi	r19, 0x00	; 0
     e9c:	30 30       	cpi	r19, 0x00	; 0
     e9e:	30 30       	cpi	r19, 0x00	; 0
     ea0:	30 30       	cpi	r19, 0x00	; 0
     ea2:	fc 18       	sub	r15, r12
     ea4:	0f 2d       	mov	r16, r15
     ea6:	1a 01       	movw	r2, r20
     ea8:	00 f0       	brcs	.+0      	; 0xeaa <__stack+0x3ab>
     eaa:	f0 78       	andi	r31, 0x80	; 128
     eac:	33 19       	sub	r19, r3
     eae:	8c 34       	cpi	r24, 0x4C	; 76
     eb0:	1a 0c       	add	r1, r10
     eb2:	38 1c       	adc	r3, r8
     eb4:	0c 38       	cpi	r16, 0x8C	; 140
     eb6:	1c 0c       	add	r1, r12
     eb8:	30 18       	sub	r3, r0
     eba:	0c 30       	cpi	r16, 0x0C	; 12
     ebc:	18 0c       	add	r1, r8
     ebe:	30 18       	sub	r3, r0
     ec0:	0c 30       	cpi	r16, 0x0C	; 12
     ec2:	18 0c       	add	r1, r8
     ec4:	30 18       	sub	r3, r0
     ec6:	0c 30       	cpi	r16, 0x0C	; 12
     ec8:	18 0c       	add	r1, r8
     eca:	30 18       	sub	r3, r0
     ecc:	0c 30       	cpi	r16, 0x0C	; 12
     ece:	18 0c       	add	r1, r8
     ed0:	30 18       	sub	r3, r0
     ed2:	0c fc       	.word	0xfc0c	; ????
     ed4:	7e 3f       	cpi	r23, 0xFE	; 254
     ed6:	10 0f       	add	r17, r16
     ed8:	1e 12       	cpse	r1, r30
     eda:	01 00       	.word	0x0001	; ????
     edc:	70 70       	andi	r23, 0x00	; 0
     ede:	b1 88       	ldd	r11, Z+17	; 0x11
     ee0:	36 0c       	add	r3, r6
     ee2:	38 0c       	add	r3, r8
     ee4:	38 0c       	add	r3, r8
     ee6:	30 0c       	add	r3, r0
     ee8:	30 0c       	add	r3, r0
     eea:	30 0c       	add	r3, r0
     eec:	30 0c       	add	r3, r0
     eee:	30 0c       	add	r3, r0
     ef0:	30 0c       	add	r3, r0
     ef2:	30 0c       	add	r3, r0
     ef4:	30 0c       	add	r3, r0
     ef6:	30 0c       	add	r3, r0
     ef8:	fc 3f       	cpi	r31, 0xFC	; 252
     efa:	0e 0f       	add	r16, r30
     efc:	1e 10       	cpse	r1, r14
     efe:	01 00       	.word	0x0001	; ????
     f00:	07 c0       	rjmp	.+14     	; 0xf10 <__stack+0x411>
     f02:	18 70       	andi	r17, 0x08	; 8
     f04:	20 38       	cpi	r18, 0x80	; 128
     f06:	60 18       	sub	r6, r0
     f08:	40 1c       	adc	r4, r0
     f0a:	c0 0c       	add	r12, r0
     f0c:	c0 0c       	add	r12, r0
     f0e:	c0 0c       	add	r12, r0
     f10:	c0 0c       	add	r12, r0
     f12:	c0 0c       	add	r12, r0
     f14:	e0 08       	sbc	r14, r0
     f16:	60 18       	sub	r6, r0
     f18:	70 10       	cpse	r7, r0
     f1a:	38 20       	and	r3, r8
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <__stack+0x43d>
     f1e:	0f 17       	cp	r16, r31
     f20:	2e 11       	cpse	r18, r14
     f22:	01 f8       	bld	r0, 1
     f24:	70 f0       	brcs	.+28     	; 0xf42 <__stack+0x443>
     f26:	b3 18       	sub	r11, r3
     f28:	34 1c       	adc	r3, r4
     f2a:	38 0c       	add	r3, r8
     f2c:	30 0e       	add	r3, r16
     f2e:	30 06       	cpc	r3, r16
     f30:	30 06       	cpc	r3, r16
     f32:	30 06       	cpc	r3, r16
     f34:	30 06       	cpc	r3, r16
     f36:	30 06       	cpc	r3, r16
     f38:	30 04       	cpc	r3, r0
     f3a:	30 0c       	add	r3, r0
     f3c:	30 08       	sbc	r3, r0
     f3e:	3c 10       	cpse	r3, r12
     f40:	37 e0       	ldi	r19, 0x07	; 7
     f42:	30 00       	.word	0x0030	; ????
     f44:	30 00       	.word	0x0030	; ????
     f46:	30 00       	.word	0x0030	; ????
     f48:	30 00       	.word	0x0030	; ????
     f4a:	30 00       	.word	0x0030	; ????
     f4c:	30 00       	.word	0x0030	; ????
     f4e:	30 00       	.word	0x0030	; ????
     f50:	fe 00       	.word	0x00fe	; ????
     f52:	0e 17       	cp	r16, r30
     f54:	2e 10       	cpse	r2, r14
     f56:	01 f8       	bld	r0, 1
     f58:	07 90       	elpm	r0, Z+
     f5a:	18 70       	andi	r17, 0x08	; 8
     f5c:	20 30       	cpi	r18, 0x00	; 0
     f5e:	60 30       	cpi	r22, 0x00	; 0
     f60:	40 30       	cpi	r20, 0x00	; 0
     f62:	c0 30       	cpi	r28, 0x00	; 0
     f64:	c0 30       	cpi	r28, 0x00	; 0
     f66:	c0 30       	cpi	r28, 0x00	; 0
     f68:	c0 30       	cpi	r28, 0x00	; 0
     f6a:	c0 30       	cpi	r28, 0x00	; 0
     f6c:	c0 30       	cpi	r28, 0x00	; 0
     f6e:	60 30       	cpi	r22, 0x00	; 0
     f70:	60 70       	andi	r22, 0x00	; 0
     f72:	30 b0       	in	r3, 0x00	; 0
     f74:	1f 30       	cpi	r17, 0x0F	; 15
     f76:	00 30       	cpi	r16, 0x00	; 0
     f78:	00 30       	cpi	r16, 0x00	; 0
     f7a:	00 30       	cpi	r16, 0x00	; 0
     f7c:	00 30       	cpi	r16, 0x00	; 0
     f7e:	00 30       	cpi	r16, 0x00	; 0
     f80:	00 30       	cpi	r16, 0x00	; 0
     f82:	00 30       	cpi	r16, 0x00	; 0
     f84:	01 fc       	sbrc	r0, 1
     f86:	0b 0f       	add	r16, r27
     f88:	1e 0d       	add	r17, r14
     f8a:	01 00       	.word	0x0001	; ????
     f8c:	31 e0       	ldi	r19, 0x01	; 1
     f8e:	f3 e0       	ldi	r31, 0x03	; 3
     f90:	34 40       	sbci	r19, 0x04	; 4
     f92:	38 40       	sbci	r19, 0x08	; 8
     f94:	38 00       	.word	0x0038	; ????
     f96:	30 00       	.word	0x0030	; ????
     f98:	30 00       	.word	0x0030	; ????
     f9a:	30 00       	.word	0x0030	; ????
     f9c:	30 00       	.word	0x0030	; ????
     f9e:	30 00       	.word	0x0030	; ????
     fa0:	30 00       	.word	0x0030	; ????
     fa2:	30 00       	.word	0x0030	; ????
     fa4:	30 00       	.word	0x0030	; ????
     fa6:	30 00       	.word	0x0030	; ????
     fa8:	fe 00       	.word	0x00fe	; ????
     faa:	09 0f       	add	r16, r25
     fac:	1e 0c       	add	r1, r14
     fae:	02 00       	.word	0x0002	; ????
     fb0:	3f 00       	.word	0x003f	; ????
     fb2:	43 00       	.word	0x0043	; ????
     fb4:	c1 00       	.word	0x00c1	; ????
     fb6:	c0 00       	.word	0x00c0	; ????
     fb8:	e0 00       	.word	0x00e0	; ????
     fba:	f8 00       	.word	0x00f8	; ????
     fbc:	7e 00       	.word	0x007e	; ????
     fbe:	3f 00       	.word	0x003f	; ????
     fc0:	0f 80       	ldd	r0, Y+7	; 0x07
     fc2:	03 80       	ldd	r0, Z+3	; 0x03
     fc4:	01 80       	ldd	r0, Z+1	; 0x01
     fc6:	81 80       	ldd	r8, Z+1	; 0x01
     fc8:	81 00       	.word	0x0081	; ????
     fca:	c3 00       	.word	0x00c3	; ????
     fcc:	fc 00       	.word	0x00fc	; ????
     fce:	0a 14       	cp	r0, r10
     fd0:	28 0b       	sbc	r18, r24
     fd2:	01 00       	.word	0x0001	; ????
     fd4:	10 00       	.word	0x0010	; ????
     fd6:	30 00       	.word	0x0030	; ????
     fd8:	30 00       	.word	0x0030	; ????
     fda:	30 00       	.word	0x0030	; ????
     fdc:	30 00       	.word	0x0030	; ????
     fde:	ff c0       	rjmp	.+510    	; 0x11de <u8g_font_gdr10r+0x6a>
     fe0:	31 00       	.word	0x0031	; ????
     fe2:	30 00       	.word	0x0030	; ????
     fe4:	30 00       	.word	0x0030	; ????
     fe6:	30 00       	.word	0x0030	; ????
     fe8:	30 00       	.word	0x0030	; ????
     fea:	30 00       	.word	0x0030	; ????
     fec:	30 00       	.word	0x0030	; ????
     fee:	30 00       	.word	0x0030	; ????
     ff0:	30 00       	.word	0x0030	; ????
     ff2:	30 00       	.word	0x0030	; ????
     ff4:	30 00       	.word	0x0030	; ????
     ff6:	30 00       	.word	0x0030	; ????
     ff8:	30 80       	ld	r3, Z
     ffa:	1f 40       	sbci	r17, 0x0F	; 15
     ffc:	0f 0f       	add	r16, r31
     ffe:	1e 11       	cpse	r17, r14
    1000:	01 00       	.word	0x0001	; ????
    1002:	30 18       	sub	r3, r0
    1004:	f0 78       	andi	r31, 0x80	; 128
    1006:	30 18       	sub	r3, r0
    1008:	30 18       	sub	r3, r0
    100a:	30 18       	sub	r3, r0
    100c:	30 18       	sub	r3, r0
    100e:	30 18       	sub	r3, r0
    1010:	30 18       	sub	r3, r0
    1012:	30 18       	sub	r3, r0
    1014:	30 18       	sub	r3, r0
    1016:	30 18       	sub	r3, r0
    1018:	30 18       	sub	r3, r0
    101a:	30 38       	cpi	r19, 0x80	; 128
    101c:	18 de       	rcall	.-976    	; 0xc4e <__stack+0x14f>
    101e:	0f 18       	sub	r0, r15
    1020:	0f 0f       	add	r16, r31
    1022:	1e 10       	cpse	r1, r14
    1024:	00 00       	nop
    1026:	fc 3e       	cpi	r31, 0xEC	; 236
    1028:	38 0c       	add	r3, r8
    102a:	38 08       	sbc	r3, r8
    102c:	18 18       	sub	r1, r8
    102e:	1c 18       	sub	r1, r12
    1030:	0c 10       	cpse	r0, r12
    1032:	0c 30       	cpi	r16, 0x0C	; 12
    1034:	0e 30       	cpi	r16, 0x0E	; 14
    1036:	06 20       	and	r0, r6
    1038:	07 60       	ori	r16, 0x07	; 7
    103a:	07 40       	sbci	r16, 0x07	; 7
    103c:	03 40       	sbci	r16, 0x03	; 3
    103e:	03 c0       	rjmp	.+6      	; 0x1046 <__stack+0x547>
    1040:	01 80       	ldd	r0, Z+1	; 0x01
    1042:	01 00       	.word	0x0001	; ????
    1044:	16 0f       	add	r17, r22
    1046:	2d 17       	cp	r18, r29
    1048:	00 00       	nop
    104a:	fc 10       	cpse	r15, r12
    104c:	7c 30       	cpi	r23, 0x0C	; 12
    104e:	18 18       	sub	r1, r8
    1050:	38 38       	cpi	r19, 0x88	; 136
    1052:	10 18       	sub	r1, r0
    1054:	38 30       	cpi	r19, 0x08	; 8
    1056:	18 3c       	cpi	r17, 0xC8	; 200
    1058:	30 1c       	adc	r3, r0
    105a:	6c 30       	cpi	r22, 0x0C	; 12
    105c:	0c 6e       	ori	r16, 0xEC	; 236
    105e:	20 0c       	add	r2, r0
    1060:	4e 60       	ori	r20, 0x0E	; 14
    1062:	0c c6       	rjmp	.+3096   	; 0x1c7c <u8g_FirstPageLL+0x24>
    1064:	60 0e       	add	r6, r16
    1066:	c7 40       	sbci	r28, 0x07	; 7
    1068:	06 83       	std	Z+6, r16	; 0x06
    106a:	40 07       	cpc	r20, r16
    106c:	83 c0       	rjmp	.+262    	; 0x1174 <u8g_font_gdr10r>
    106e:	07 83       	std	Z+7, r16	; 0x07
    1070:	c0 03       	fmuls	r20, r16
    1072:	01 80       	ldd	r0, Z+1	; 0x01
    1074:	02 01       	movw	r0, r4
    1076:	00 10       	cpse	r0, r0
    1078:	0f 1e       	adc	r0, r31
    107a:	10 00       	.word	0x0010	; ????
    107c:	00 fe       	sbrs	r0, 0
    107e:	3f 3c       	cpi	r19, 0xCF	; 207
    1080:	1c 1c       	adc	r1, r12
    1082:	10 0e       	add	r1, r16
    1084:	30 06       	cpc	r3, r16
    1086:	60 07       	cpc	r22, r16
    1088:	c0 03       	fmuls	r20, r16
    108a:	c0 01       	movw	r24, r0
    108c:	c0 03       	fmuls	r20, r16
    108e:	c0 06       	cpc	r12, r16
    1090:	e0 0c       	add	r14, r0
    1092:	70 0c       	add	r7, r0
    1094:	38 18       	sub	r3, r8
    1096:	18 38       	cpi	r17, 0x88	; 136
    1098:	1c fc       	.word	0xfc1c	; ????
    109a:	3f 10       	cpse	r3, r15
    109c:	17 2e       	mov	r1, r23
    109e:	10 ff       	sbrs	r17, 0
    10a0:	f8 7e       	andi	r31, 0xE8	; 232
    10a2:	1f 1c       	adc	r1, r15
    10a4:	06 1c       	adc	r0, r6
    10a6:	04 0c       	add	r0, r4
    10a8:	0c 0e       	add	r0, r28
    10aa:	0c 0e       	add	r0, r28
    10ac:	08 06       	cpc	r0, r24
    10ae:	18 07       	cpc	r17, r24
    10b0:	18 03       	fmul	r17, r16
    10b2:	10 03       	mulsu	r17, r16
    10b4:	30 03       	mulsu	r19, r16
    10b6:	b0 01       	movw	r22, r0
    10b8:	a0 01       	movw	r20, r0
    10ba:	e0 01       	movw	r28, r0
    10bc:	e0 00       	.word	0x00e0	; ????
    10be:	c0 00       	.word	0x00c0	; ????
    10c0:	c0 00       	.word	0x00c0	; ????
    10c2:	80 01       	movw	r16, r0
    10c4:	80 01       	movw	r16, r0
    10c6:	80 03       	fmuls	r16, r16
    10c8:	00 7e       	andi	r16, 0xE0	; 224
    10ca:	00 7c       	andi	r16, 0xC0	; 192
    10cc:	00 f8       	bld	r0, 0
    10ce:	00 0c       	add	r0, r0
    10d0:	0f 1e       	adc	r0, r31
    10d2:	0e 01       	movw	r0, r28
    10d4:	00 7f       	andi	r16, 0xF0	; 240
    10d6:	f0 40       	sbci	r31, 0x00	; 0
    10d8:	60 40       	sbci	r22, 0x00	; 0
    10da:	e0 01       	movw	r28, r0
    10dc:	c0 01       	movw	r24, r0
    10de:	80 03       	fmuls	r16, r16
    10e0:	80 07       	cpc	r24, r16
    10e2:	00 06       	cpc	r0, r16
    10e4:	00 0e       	add	r0, r16
    10e6:	00 1c       	adc	r0, r0
    10e8:	00 1c       	adc	r0, r0
    10ea:	00 38       	cpi	r16, 0x80	; 128
    10ec:	10 70       	andi	r17, 0x00	; 0
    10ee:	10 70       	andi	r17, 0x00	; 0
    10f0:	30 ff       	sbrs	r19, 0
    10f2:	f0 08       	sbc	r15, r0
    10f4:	1e 1e       	adc	r1, r30
    10f6:	0b 02       	muls	r16, r27
    10f8:	fb 03       	fmulsu	r23, r19
    10fa:	06 0c       	add	r0, r6
    10fc:	08 18       	sub	r0, r8
    10fe:	18 18       	sub	r1, r8
    1100:	18 1c       	adc	r1, r8
    1102:	0c 0c       	add	r0, r12
    1104:	0c 0c       	add	r0, r12
    1106:	18 30       	cpi	r17, 0x08	; 8
    1108:	f8 1c       	adc	r15, r8
    110a:	0c 0c       	add	r0, r12
    110c:	0c 0c       	add	r0, r12
    110e:	1c 18       	sub	r1, r12
    1110:	18 18       	sub	r1, r8
    1112:	18 18       	sub	r1, r8
    1114:	0c 06       	cpc	r0, r28
    1116:	03 02       	muls	r16, r19
    1118:	20 20       	and	r2, r0
    111a:	07 03       	mulsu	r16, r23
    111c:	fa c0       	rjmp	.+500    	; 0x1312 <u8g_font_gdr10r+0x19e>
    111e:	c0 c0       	rjmp	.+384    	; 0x12a0 <u8g_font_gdr10r+0x12c>
    1120:	c0 c0       	rjmp	.+384    	; 0x12a2 <u8g_font_gdr10r+0x12e>
    1122:	c0 c0       	rjmp	.+384    	; 0x12a4 <u8g_font_gdr10r+0x130>
    1124:	c0 c0       	rjmp	.+384    	; 0x12a6 <u8g_font_gdr10r+0x132>
    1126:	c0 c0       	rjmp	.+384    	; 0x12a8 <u8g_font_gdr10r+0x134>
    1128:	c0 c0       	rjmp	.+384    	; 0x12aa <u8g_font_gdr10r+0x136>
    112a:	c0 c0       	rjmp	.+384    	; 0x12ac <u8g_font_gdr10r+0x138>
    112c:	c0 c0       	rjmp	.+384    	; 0x12ae <u8g_font_gdr10r+0x13a>
    112e:	c0 c0       	rjmp	.+384    	; 0x12b0 <u8g_font_gdr10r+0x13c>
    1130:	c0 c0       	rjmp	.+384    	; 0x12b2 <u8g_font_gdr10r+0x13e>
    1132:	c0 c0       	rjmp	.+384    	; 0x12b4 <u8g_font_gdr10r+0x140>
    1134:	c0 c0       	rjmp	.+384    	; 0x12b6 <u8g_font_gdr10r+0x142>
    1136:	c0 c0       	rjmp	.+384    	; 0x12b8 <u8g_font_gdr10r+0x144>
    1138:	c0 c0       	rjmp	.+384    	; 0x12ba <u8g_font_gdr10r+0x146>
    113a:	c0 c0       	rjmp	.+384    	; 0x12bc <u8g_font_gdr10r+0x148>
    113c:	c0 08       	sbc	r12, r0
    113e:	1e 1e       	adc	r1, r30
    1140:	0b 01       	movw	r0, r22
    1142:	fb c0       	rjmp	.+502    	; 0x133a <u8g_font_gdr10r+0x1c6>
    1144:	60 30       	cpi	r22, 0x00	; 0
    1146:	18 18       	sub	r1, r8
    1148:	18 18       	sub	r1, r8
    114a:	18 38       	cpi	r17, 0x88	; 136
    114c:	30 30       	cpi	r19, 0x00	; 0
    114e:	30 30       	cpi	r19, 0x00	; 0
    1150:	38 1f       	adc	r19, r24
    1152:	0c 18       	sub	r0, r12
    1154:	30 30       	cpi	r19, 0x00	; 0
    1156:	30 30       	cpi	r19, 0x00	; 0
    1158:	38 18       	sub	r3, r8
    115a:	18 18       	sub	r1, r8
    115c:	18 10       	cpse	r1, r8
    115e:	30 60       	ori	r19, 0x00	; 0
    1160:	c0 0e       	add	r12, r16
    1162:	06 0c       	add	r0, r6
    1164:	10 01       	movw	r2, r0
    1166:	07 1c       	adc	r0, r7
    1168:	08 3e       	cpi	r16, 0xE8	; 232
    116a:	0c 7f       	andi	r16, 0xFC	; 252
    116c:	88 47       	sbci	r24, 0x78	; 120
    116e:	f0 83       	st	Z, r31
    1170:	f0 80       	ld	r15, Z
    1172:	e0 ff       	sbrs	r30, 0

00001174 <u8g_font_gdr10r>:
    1174:	00 19 18 f7 fa 0a 02 1e 04 b1 20 7f fc 0e fc 0d     .......... .....
    1184:	fc 00 00 00 04 00 00 02 0c 0c 05 01 00 40 c0 40     .............@.@
    1194:	40 40 40 40 40 40 00 40 40 05 05 05 07 01 07 d8     @@@@@@.@@.......
    11a4:	d8 58 48 48 07 09 09 08 01 01 14 24 7e 28 48 fc     .XHH.......$~(H.
    11b4:	50 50 90 07 0c 0c 08 00 ff 10 38 54 50 70 38 1e     PP........8TPp8.
    11c4:	12 92 d4 78 10 0a 0a 14 0c 01 00 60 80 91 00 92     ...x.......`....
    11d4:	00 96 00 a4 00 69 80 12 40 32 40 22 40 41 80 0a     .....i..@2@"@A..
    11e4:	0c 18 0b 01 00 1c 00 24 00 24 00 24 00 28 00 33     .......$.$.$.(.3
    11f4:	c0 51 00 99 00 8d 00 86 00 87 00 79 c0 02 05 05     .Q.........y....
    1204:	04 01 07 c0 c0 40 40 40 03 10 10 05 01 fd 20 40     .....@@@...... @
    1214:	40 80 80 80 80 80 80 80 80 80 80 40 40 20 03 10     @..........@@ ..
    1224:	10 05 01 fd 80 40 40 20 20 20 20 20 20 20 20 20     .....@@         
    1234:	20 40 40 80 06 07 07 08 01 06 20 a8 ec 30 fc a4      @@....... ..0..
    1244:	20 06 06 06 07 01 02 20 20 20 fc 20 20 02 04 04      ......   .  ...
    1254:	04 01 fd c0 40 40 80 04 01 01 06 01 04 f0 01 02     ....@@..........
    1264:	02 04 02 00 80 80 08 10 10 08 00 fd 03 02 06 04     ................
    1274:	04 0c 08 08 10 10 30 20 20 60 40 c0 06 0a 0a 08     ......0  `@.....
    1284:	01 00 38 48 84 84 84 84 84 84 48 70 05 0a 0a 08     ..8H......Hp....
    1294:	02 00 20 e0 20 20 20 20 20 20 20 f8 05 0a 0a 08     .. .       .....
    12a4:	02 00 38 c8 88 08 10 20 20 40 88 f8 06 0a 0a 08     ..8....  @......
    12b4:	01 00 70 88 88 10 30 08 04 04 8c 78 06 0a 0a 08     ..p...0....x....
    12c4:	01 00 08 18 28 28 48 88 fc 08 08 3c 06 0a 0a 08     ....((H....<....
    12d4:	01 00 7c 40 40 78 8c 04 04 04 84 78 06 0a 0a 08     ..|@@x.....x....
    12e4:	01 00 18 20 40 80 f8 84 84 84 48 38 06 0a 0a 08     ... @.....H8....
    12f4:	01 00 fc 84 08 08 08 10 10 20 20 40 06 0a 0a 08     .........  @....
    1304:	01 00 78 c4 c4 c8 38 cc 84 84 84 78 06 0a 0a 08     ..x...8....x....
    1314:	01 00 38 c8 84 84 84 7c 04 08 10 60 01 08 08 04     ..8....|...`....
    1324:	02 00 80 80 00 00 00 00 80 80 02 0b 0b 04 01 fd     ................
    1334:	40 40 00 00 00 00 00 c0 40 40 80 06 05 05 07 01     @@......@@......
    1344:	02 0c 70 80 70 0c 06 03 03 07 01 03 fc 00 fc 06     ..p.p...........
    1354:	05 05 07 01 02 c0 38 0c 70 80 06 0c 0c 07 01 00     ......8.p.......
    1364:	38 44 84 04 04 08 10 20 20 20 20 20 0c 0e 1c 0e     8D.....     ....
    1374:	01 fd 0f 80 10 40 60 20 47 90 88 90 90 90 90 90     .....@` G.......
    1384:	90 90 90 90 89 a0 4e c0 60 00 30 60 0f 80 0a 0a     ......N.`.0`....
    1394:	14 0a 00 00 04 00 0c 00 14 00 12 00 12 00 1e 00     ................
    13a4:	21 00 21 00 41 80 e3 c0 07 0a 0a 09 01 00 f8 44     !.!.A..........D
    13b4:	44 44 7c 46 42 42 42 fc 07 0a 0a 09 01 00 3e 42     DD|FBBB.......>B
    13c4:	80 80 80 80 80 80 42 3c 08 0a 0a 0a 01 00 fc 46     ......B<.......F
    13d4:	41 41 41 41 41 42 42 fc 07 0a 0a 08 01 00 fc 44     AAAAABB........D
    13e4:	40 40 7c 40 40 40 42 fe 07 0a 0a 08 01 00 fe 44     @@|@@@B........D
    13f4:	40 40 78 40 40 40 40 e0 09 0a 14 0a 01 00 1e 00     @@x@@@@.........
    1404:	63 00 80 00 80 00 80 00 87 80 81 00 81 00 61 00     c.............a.
    1414:	3e 00 09 0a 14 0b 01 00 e3 80 41 00 41 00 41 00     >.........A.A.A.
    1424:	7f 00 41 00 41 00 41 00 41 00 e3 80 03 0a 0a 05     ..A.A.A.A.......
    1434:	01 00 e0 40 40 40 40 40 40 40 40 e0 06 0d 0d 05     ...@@@@@@@@.....
    1444:	fe fd 3c 08 08 08 08 08 08 08 08 08 08 10 e0 09     ..<.............
    1454:	0a 14 0a 01 00 e7 00 44 00 48 00 50 00 60 00 50     .......D.H.P.`.P
    1464:	00 58 00 4c 00 46 00 e3 80 07 0a 0a 08 01 00 e0     .X.L.F..........
    1474:	40 40 40 40 40 40 40 42 fe 0c 0a 14 0e 01 00 c0     @@@@@@@B........
    1484:	70 60 60 60 e0 70 e0 51 60 59 20 4a 20 4e 20 44     p```.p.Q`Y J N D
    1494:	20 e4 f0 09 0a 14 0b 01 00 c3 80 61 00 61 00 51      ..........a.a.Q
    14a4:	00 49 00 4d 00 45 00 43 00 43 00 e1 00 08 0a 0a     .I.M.E.C.C......
    14b4:	0a 01 00 3c 42 81 81 81 81 81 82 42 3c 07 0a 0a     ...<B......B<...
    14c4:	09 01 00 fc 46 42 42 46 78 40 40 40 e0 0a 0c 18     ....FBBFx@@@....
    14d4:	0a 01 fe 3c 00 42 00 81 00 81 00 81 00 81 00 81     ...<.B..........
    14e4:	00 82 00 42 00 3c 00 06 80 03 c0 09 0a 14 0a 01     ...B.<..........
    14f4:	00 fc 00 46 00 42 00 42 00 44 00 78 00 4c 00 44     ...F.B.B.D.x.L.D
    1504:	00 46 00 e3 80 06 0a 0a 08 01 00 78 8c 80 c0 70     .F.........x...p
    1514:	08 04 84 84 f8 09 0a 14 09 00 00 ff 80 88 80 08     ................
    1524:	00 08 00 08 00 08 00 08 00 08 00 08 00 1c 00 09     ................
    1534:	0a 14 0b 01 00 e3 80 41 00 41 00 41 00 41 00 41     .......A.A.A.A.A
    1544:	00 41 00 41 00 22 00 3c 00 0b 0a 14 0b 00 00 f1     .A.A.".<........
    1554:	e0 20 80 20 80 31 00 11 00 19 00 0a 00 0a 00 0e     . . .1..........
    1564:	00 04 00 0e 0a 14 0e 00 00 f1 1c 63 08 23 10 23     ...........c.#.#
    1574:	90 24 90 34 90 14 50 18 60 18 60 18 20 0a 0a 14     .$.4..P.`.`. ...
    1584:	0a 00 00 f3 c0 21 00 33 00 1a 00 0c 00 0c 00 12     .....!.3........
    1594:	00 31 00 21 80 f3 c0 09 0a 14 0a 01 00 c3 80 61     .1.!...........a
    15a4:	00 32 00 16 00 1c 00 08 00 08 00 08 00 08 00 1c     .2..............
    15b4:	00 08 0a 0a 09 00 00 7f 42 46 04 08 18 10 21 61     ........BF....!a
    15c4:	ff 04 10 10 05 01 fd f0 80 80 80 80 80 80 80 80     ................
    15d4:	80 80 80 80 80 80 f0 08 10 10 08 00 fd c0 40 40     ..............@@
    15e4:	20 20 30 10 10 08 08 0c 04 04 06 02 03 04 10 10       0.............
    15f4:	05 00 fd f0 10 10 10 10 10 10 10 10 10 10 10 10     ................
    1604:	10 10 f0 07 08 08 08 01 05 10 30 38 48 48 4c 84     ..........08HHL.
    1614:	86 06 01 01 08 01 fe fc 04 03 03 05 00 09 c0 60     ...............`
    1624:	30 07 08 08 08 01 00 1c 64 04 1c 64 84 8c 76 08     0.......d..d..v.
    1634:	0d 0d 09 00 00 40 c0 40 40 40 4e 73 41 41 41 41     .....@.@@@NsAAAA
    1644:	42 3c 06 08 08 07 01 00 3c 48 80 80 80 80 c4 78     B<......<H.....x
    1654:	08 0d 0d 09 01 00 06 02 02 02 02 3e 42 82 82 82     ...........>B...
    1664:	82 46 3b 06 08 08 08 01 00 38 44 84 fc 80 80 44     .F;......8D....D
    1674:	78 06 0d 0d 05 01 00 1c 28 40 40 40 f0 40 40 40     x.......(@@@.@@@
    1684:	40 40 40 f0 08 0c 0c 08 00 fc 3f 46 82 82 c4 38     @@@.......?F...8
    1694:	60 3c c3 81 c2 7c 08 0d 0d 09 01 00 40 c0 40 40     `<...|......@.@@
    16a4:	40 4e 52 62 42 42 42 42 e7 03 0b 0b 05 01 00 40     @NRbBBBB.......@
    16b4:	c0 00 40 c0 40 40 40 40 40 e0 05 0f 0f 04 fe fc     ..@.@@@@@.......
    16c4:	08 18 00 08 18 08 08 08 08 08 08 08 08 10 e0 08     ................
    16d4:	0d 0d 09 01 00 40 c0 40 40 40 4e 48 50 60 50 48     .....@.@@@NHP`PH
    16e4:	4c e7 03 0d 0d 05 01 00 40 c0 40 40 40 40 40 40     L.......@.@@@@@@
    16f4:	40 40 40 40 e0 0b 08 10 0c 01 00 dd c0 66 40 44     @@@@.........f@D
    1704:	40 44 40 44 40 44 40 44 40 ee e0 08 08 08 09 01     @D@D@D@D@.......
    1714:	00 4e d2 62 42 42 42 42 e7 07 08 08 09 01 00 38     .N.bBBBB.......8
    1724:	44 82 82 82 82 44 38 07 0c 0c 09 01 fc 5c e6 42     D....D8......\.B
    1734:	42 42 42 44 78 40 40 40 e0 08 0c 0c 09 01 fc 3e     BBBDx@@@.......>
    1744:	42 82 82 82 82 46 3a 02 02 02 07 06 08 08 07 01     B....F:.........
    1754:	00 dc 68 40 40 40 40 40 e0 05 08 08 07 01 00 70     ..h@@@@@.......p
    1764:	88 80 60 18 88 88 f0 05 0a 0a 06 01 00 40 40 f8     ..`..........@@.
    1774:	40 40 40 40 40 40 78 09 08 10 09 00 00 c3 00 41     @@@@@@x........A
    1784:	00 41 00 41 00 41 00 41 00 43 00 3d 80 08 08 08     .A.A.A.A.C.=....
    1794:	08 00 00 e3 62 22 24 34 14 18 08 0c 08 10 0c 00     ....b"$4........
    17a4:	00 e2 70 66 20 26 20 27 40 29 40 39 40 18 80 10     ..pf & '@)@9@...
    17b4:	80 08 08 08 09 00 00 f7 22 34 18 1c 24 42 e7 08     ........"4..$B..
    17c4:	0c 0c 08 00 fc e7 62 22 24 34 14 18 08 08 10 a0     ......b"$4......
    17d4:	c0 06 08 08 08 01 00 fc 88 10 30 20 40 c4 fc 04     ..........0 @...
    17e4:	10 10 06 01 fd 30 40 40 40 60 20 20 40 e0 20 20     .....0@@@`  @.  
    17f4:	60 40 40 40 20 01 11 11 04 02 fd 80 80 80 80 80     `@@@ ...........
    1804:	80 80 80 80 80 80 80 80 80 80 80 80 05 10 10 05     ................
    1814:	00 fd 40 20 20 20 20 20 20 38 30 20 20 20 20 20     ..@      80     
    1824:	20 c0 08 02 02 08 00 04 39 ce ff                     .......9..

0000182f <u8g_avr_port_P>:
    182f:	00 00 25 00 28 00 2b 00 2e 00 31 00                 ..%.(.+...1.

0000183b <u8g_avr_ddr_P>:
    183b:	00 00 24 00 27 00 2a 00 2d 00 30 00                 ..$.'.*.-.0.

00001847 <u8g_dev_ssd13xx_sleep_off>:
    1847:	ff e0 ff d1 af ff 32 ff d0 ff fe                    ......2....

00001852 <u8g_dev_ssd13xx_sleep_on>:
    1852:	ff e0 ff d1 ae ff d0 ff fe                          .........

0000185b <u8g_dev_sh1106_128x64_data_start>:
    185b:	ff e0 ff d1 10 02 ff fe                             ........

00001863 <u8g_dev_ssd1306_128x64_adafruit3_init_seq>:
    1863:	ff d0 ff e0 ff c1 ff d1 ae d5 80 a8 3f d3 00 40     ............?..@
    1873:	8d 14 20 02 a1 c8 da 12 81 cf d9 f1 db 40 2e a4     .. ..........@..
    1883:	a6 af ff d0 ff fe                                   ......

00001889 <ProductString>:
    1889:	2c 03 4c 00 55 00 46 00 41 00 20 00 47 00 65 00     ,.L.U.F.A. .G.e.
    1899:	6e 00 65 00 72 00 69 00 63 00 20 00 48 00 49 00     n.e.r.i.c. .H.I.
    18a9:	44 00 20 00 44 00 65 00 6d 00 6f 00 00 00           D. .D.e.m.o...

000018b7 <ManufacturerString>:
    18b7:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
    18c7:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000018d1 <LanguageString>:
    18d1:	04 03 09 04                                         ....

000018d5 <ConfigurationDescriptor>:
    18d5:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 00     ..).....2.......
    18e5:	00 00 09 21 11 01 00 01 22 20 00 07 05 81 03 08     ...!...." ......
    18f5:	00 05 07 05 02 03 08 00 05                          .........

000018fe <DeviceDescriptor>:
    18fe:	12 01 10 01 00 00 00 08 eb 03 4f 20 01 00 01 02     ..........O ....
    190e:	00 01                                               ..

00001910 <GenericReport>:
    1910:	06 00 ff 09 01 a1 01 09 02 15 00 25 ff 75 08 95     ...........%.u..
    1920:	3c 81 02 09 03 15 00 25 ff 75 08 95 40 91 02 c0     <......%.u..@...

00001930 <__ctors_end>:
    1930:	11 24       	eor	r1, r1
    1932:	1f be       	out	0x3f, r1	; 63
    1934:	cf ef       	ldi	r28, 0xFF	; 255
    1936:	da e0       	ldi	r29, 0x0A	; 10
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	cd bf       	out	0x3d, r28	; 61

0000193c <__do_copy_data>:
    193c:	11 e0       	ldi	r17, 0x01	; 1
    193e:	a0 e0       	ldi	r26, 0x00	; 0
    1940:	b1 e0       	ldi	r27, 0x01	; 1
    1942:	e6 e4       	ldi	r30, 0x46	; 70
    1944:	fb e6       	ldi	r31, 0x6B	; 107
    1946:	02 c0       	rjmp	.+4      	; 0x194c <__do_copy_data+0x10>
    1948:	05 90       	lpm	r0, Z+
    194a:	0d 92       	st	X+, r0
    194c:	a2 35       	cpi	r26, 0x52	; 82
    194e:	b1 07       	cpc	r27, r17
    1950:	d9 f7       	brne	.-10     	; 0x1948 <__do_copy_data+0xc>

00001952 <__do_clear_bss>:
    1952:	12 e0       	ldi	r17, 0x02	; 2
    1954:	a2 e5       	ldi	r26, 0x52	; 82
    1956:	b1 e0       	ldi	r27, 0x01	; 1
    1958:	01 c0       	rjmp	.+2      	; 0x195c <.do_clear_bss_start>

0000195a <.do_clear_bss_loop>:
    195a:	1d 92       	st	X+, r1

0000195c <.do_clear_bss_start>:
    195c:	a2 3a       	cpi	r26, 0xA2	; 162
    195e:	b1 07       	cpc	r27, r17
    1960:	e1 f7       	brne	.-8      	; 0x195a <.do_clear_bss_loop>
    1962:	0e 94 96 2c 	call	0x592c	; 0x592c <main>
    1966:	0c 94 a1 35 	jmp	0x6b42	; 0x6b42 <_exit>

0000196a <__bad_interrupt>:
    196a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000196e <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
    196e:	08 95       	ret

00001970 <u8g_pb_Clear>:

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
  uint8_t *ptr = (uint8_t *)b->buf;
    1970:	dc 01       	movw	r26, r24
    1972:	16 96       	adiw	r26, 0x06	; 6
    1974:	ed 91       	ld	r30, X+
    1976:	fc 91       	ld	r31, X
    1978:	17 97       	sbiw	r26, 0x07	; 7
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
    197a:	15 96       	adiw	r26, 0x05	; 5
    197c:	8c 91       	ld	r24, X
    197e:	9f 01       	movw	r18, r30
    1980:	28 0f       	add	r18, r24
    1982:	31 1d       	adc	r19, r1
    1984:	c9 01       	movw	r24, r18
  do
  {
    *ptr++ = 0;
    1986:	11 92       	st	Z+, r1
  } while( ptr != end_ptr );
    1988:	e8 17       	cp	r30, r24
    198a:	f9 07       	cpc	r31, r25
    198c:	e1 f7       	brne	.-8      	; 0x1986 <u8g_pb_Clear+0x16>
}
    198e:	08 95       	ret

00001990 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
    1990:	fc 01       	movw	r30, r24
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	83 81       	ldd	r24, Z+3	; 0x03
    1996:	86 17       	cp	r24, r22
    1998:	08 f4       	brcc	.+2      	; 0x199c <u8g_pb_IsYIntersection+0xc>
    199a:	90 e0       	ldi	r25, 0x00	; 0
  c2 = v1 >= pb->p.page_y0;
  c3 = v0 > v1;
    199c:	31 e0       	ldi	r19, 0x01	; 1
    199e:	46 17       	cp	r20, r22
    19a0:	08 f0       	brcs	.+2      	; 0x19a4 <u8g_pb_IsYIntersection+0x14>
    19a2:	30 e0       	ldi	r19, 0x00	; 0
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
    19a4:	83 2f       	mov	r24, r19
    19a6:	89 2b       	or	r24, r25

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
  c2 = v1 >= pb->p.page_y0;
    19a8:	21 e0       	ldi	r18, 0x01	; 1
    19aa:	52 81       	ldd	r21, Z+2	; 0x02
    19ac:	45 17       	cp	r20, r21
    19ae:	08 f4       	brcc	.+2      	; 0x19b2 <u8g_pb_IsYIntersection+0x22>
    19b0:	20 e0       	ldi	r18, 0x00	; 0
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
    19b2:	28 23       	and	r18, r24
  */
  
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
    19b4:	83 2f       	mov	r24, r19
    19b6:	89 23       	and	r24, r25
  c1 |= c2;
  c1 |= c3;
  return c1 & 1;
}
    19b8:	82 2b       	or	r24, r18
    19ba:	08 95       	ret

000019bc <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
    19bc:	dc 01       	movw	r26, r24
    19be:	fb 01       	movw	r30, r22
  box->x0 = 0;
    19c0:	10 82       	st	Z, r1
  box->y0 = pb->p.page_y0;
    19c2:	12 96       	adiw	r26, 0x02	; 2
    19c4:	8c 91       	ld	r24, X
    19c6:	12 97       	sbiw	r26, 0x02	; 2
    19c8:	81 83       	std	Z+1, r24	; 0x01
  box->x1 = pb->width;
  box->x1--;
    19ca:	15 96       	adiw	r26, 0x05	; 5
    19cc:	8c 91       	ld	r24, X
    19ce:	15 97       	sbiw	r26, 0x05	; 5
    19d0:	81 50       	subi	r24, 0x01	; 1
    19d2:	82 83       	std	Z+2, r24	; 0x02
  box->y1 = pb->p.page_y1;
    19d4:	13 96       	adiw	r26, 0x03	; 3
    19d6:	8c 91       	ld	r24, X
    19d8:	83 83       	std	Z+3, r24	; 0x03
    19da:	08 95       	ret

000019dc <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    19dc:	fb 01       	movw	r30, r22
    19de:	41 81       	ldd	r20, Z+1	; 0x01
  v1 = v0;
  switch( arg_pixel->dir )
    19e0:	23 81       	ldd	r18, Z+3	; 0x03
    19e2:	21 30       	cpi	r18, 0x01	; 1
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <u8g_pb_Is8PixelVisible+0x14>
    19e6:	23 30       	cpi	r18, 0x03	; 3
    19e8:	31 f4       	brne	.+12     	; 0x19f6 <u8g_pb_Is8PixelVisible+0x1a>
      v1 += 8;          /* this is independent from the page height */
      break;
    case 2:  
      break;
    case 3: 
      v0 -= 8;
    19ea:	68 ef       	ldi	r22, 0xF8	; 248
    19ec:	64 0f       	add	r22, r20
      break;
    19ee:	04 c0       	rjmp	.+8      	; 0x19f8 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    19f0:	64 2f       	mov	r22, r20
  switch( arg_pixel->dir )
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
    19f2:	48 5f       	subi	r20, 0xF8	; 248
      break;
    19f4:	01 c0       	rjmp	.+2      	; 0x19f8 <u8g_pb_Is8PixelVisible+0x1c>


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
    19f6:	64 2f       	mov	r22, r20
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
    19f8:	cb cf       	rjmp	.-106    	; 0x1990 <u8g_pb_IsYIntersection>

000019fa <u8g_pb_WriteBuffer>:
    19fa:	fc 01       	movw	r30, r24
}



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
    19fc:	cb 01       	movw	r24, r22
    19fe:	ba 01       	movw	r22, r20
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
    1a00:	26 81       	ldd	r18, Z+6	; 0x06
    1a02:	37 81       	ldd	r19, Z+7	; 0x07
    1a04:	45 81       	ldd	r20, Z+5	; 0x05
    1a06:	38 c0       	rjmp	.+112    	; 0x1a78 <u8g_WriteSequence>

00001a08 <u8g_InitCom>:
    1a08:	db 01       	movw	r26, r22

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
    1a0a:	14 96       	adiw	r26, 0x04	; 4
    1a0c:	ed 91       	ld	r30, X+
    1a0e:	fc 91       	ld	r31, X
    1a10:	15 97       	sbiw	r26, 0x05	; 5
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	61 e0       	ldi	r22, 0x01	; 1
    1a18:	09 94       	ijmp

00001a1a <u8g_SetChipSelect>:
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
    1a1a:	db 01       	movw	r26, r22
    1a1c:	14 96       	adiw	r26, 0x04	; 4
    1a1e:	ed 91       	ld	r30, X+
    1a20:	fc 91       	ld	r31, X
    1a22:	15 97       	sbiw	r26, 0x05	; 5
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	63 e0       	ldi	r22, 0x03	; 3
    1a2a:	09 94       	ijmp

00001a2c <u8g_SetResetLow>:
}

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
    1a2c:	db 01       	movw	r26, r22
    1a2e:	14 96       	adiw	r26, 0x04	; 4
    1a30:	ed 91       	ld	r30, X+
    1a32:	fc 91       	ld	r31, X
    1a34:	15 97       	sbiw	r26, 0x05	; 5
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	64 e0       	ldi	r22, 0x04	; 4
    1a3e:	09 94       	ijmp

00001a40 <u8g_SetResetHigh>:
}

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
    1a40:	db 01       	movw	r26, r22
    1a42:	14 96       	adiw	r26, 0x04	; 4
    1a44:	ed 91       	ld	r30, X+
    1a46:	fc 91       	ld	r31, X
    1a48:	15 97       	sbiw	r26, 0x05	; 5
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	41 e0       	ldi	r20, 0x01	; 1
    1a50:	64 e0       	ldi	r22, 0x04	; 4
    1a52:	09 94       	ijmp

00001a54 <u8g_SetAddress>:
}


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
    1a54:	db 01       	movw	r26, r22
    1a56:	14 96       	adiw	r26, 0x04	; 4
    1a58:	ed 91       	ld	r30, X+
    1a5a:	fc 91       	ld	r31, X
    1a5c:	15 97       	sbiw	r26, 0x05	; 5
    1a5e:	20 e0       	ldi	r18, 0x00	; 0
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	62 e0       	ldi	r22, 0x02	; 2
    1a64:	09 94       	ijmp

00001a66 <u8g_WriteByte>:
}

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
    1a66:	db 01       	movw	r26, r22
    1a68:	14 96       	adiw	r26, 0x04	; 4
    1a6a:	ed 91       	ld	r30, X+
    1a6c:	fc 91       	ld	r31, X
    1a6e:	15 97       	sbiw	r26, 0x05	; 5
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	65 e0       	ldi	r22, 0x05	; 5
    1a76:	09 94       	ijmp

00001a78 <u8g_WriteSequence>:
}

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
    1a78:	db 01       	movw	r26, r22
    1a7a:	14 96       	adiw	r26, 0x04	; 4
    1a7c:	ed 91       	ld	r30, X+
    1a7e:	fc 91       	ld	r31, X
    1a80:	15 97       	sbiw	r26, 0x05	; 5
    1a82:	66 e0       	ldi	r22, 0x06	; 6
    1a84:	09 94       	ijmp

00001a86 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
    1a86:	cf 92       	push	r12
    1a88:	df 92       	push	r13
    1a8a:	ef 92       	push	r14
    1a8c:	ff 92       	push	r15
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	8c 01       	movw	r16, r24
    1a98:	7b 01       	movw	r14, r22
    1a9a:	6a 01       	movw	r12, r20
  uint8_t is_escape = 0;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
    1a9e:	f6 01       	movw	r30, r12
    1aa0:	c4 91       	lpm	r28, Z
    if ( is_escape == 0 )
    1aa2:	81 11       	cpse	r24, r1
    1aa4:	09 c0       	rjmp	.+18     	; 0x1ab8 <u8g_WriteEscSeqP+0x32>
    {
      if ( value != 255 )
    1aa6:	cf 3f       	cpi	r28, 0xFF	; 255
    1aa8:	b1 f1       	breq	.+108    	; 0x1b16 <u8g_WriteEscSeqP+0x90>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1aaa:	4c 2f       	mov	r20, r28
    1aac:	b7 01       	movw	r22, r14
    1aae:	c8 01       	movw	r24, r16
    1ab0:	da df       	rcall	.-76     	; 0x1a66 <u8g_WriteByte>
    1ab2:	81 11       	cpse	r24, r1
    1ab4:	29 c0       	rjmp	.+82     	; 0x1b08 <u8g_WriteEscSeqP+0x82>
    1ab6:	34 c0       	rjmp	.+104    	; 0x1b20 <u8g_WriteEscSeqP+0x9a>
    1ab8:	cf 3f       	cpi	r28, 0xFF	; 255
        is_escape = 1;
      }
    }
    else
    {
      if ( value == 255 )
    1aba:	11 f4       	brne	.+4      	; 0x1ac0 <u8g_WriteEscSeqP+0x3a>
    1abc:	4f ef       	ldi	r20, 0xFF	; 255
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
    1abe:	f6 cf       	rjmp	.-20     	; 0x1aac <u8g_WriteEscSeqP+0x26>
    1ac0:	ce 3f       	cpi	r28, 0xFE	; 254
          return 0;
      }
      else if ( value == 254 )
    1ac2:	81 f1       	breq	.+96     	; 0x1b24 <u8g_WriteEscSeqP+0x9e>
    1ac4:	c0 3f       	cpi	r28, 0xF0	; 240
      {
        break;
      }
      else if ( value >= 0x0f0 )
    1ac6:	00 f5       	brcc	.+64     	; 0x1b08 <u8g_WriteEscSeqP+0x82>
    1ac8:	c0 3e       	cpi	r28, 0xE0	; 224
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
    1aca:	30 f0       	brcs	.+12     	; 0x1ad8 <u8g_WriteEscSeqP+0x52>
    1acc:	4c 2f       	mov	r20, r28
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
    1ace:	4f 70       	andi	r20, 0x0F	; 15
    1ad0:	b7 01       	movw	r22, r14
    1ad2:	c8 01       	movw	r24, r16
    1ad4:	bf df       	rcall	.-130    	; 0x1a54 <u8g_SetAddress>
    1ad6:	18 c0       	rjmp	.+48     	; 0x1b08 <u8g_WriteEscSeqP+0x82>
    1ad8:	c0 3d       	cpi	r28, 0xD0	; 208
    1ada:	30 f0       	brcs	.+12     	; 0x1ae8 <u8g_WriteEscSeqP+0x62>
      }
      else if ( value >= 0xd0 )
    1adc:	4c 2f       	mov	r20, r28
    1ade:	4f 70       	andi	r20, 0x0F	; 15
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
    1ae0:	b7 01       	movw	r22, r14
    1ae2:	c8 01       	movw	r24, r16
    1ae4:	9a df       	rcall	.-204    	; 0x1a1a <u8g_SetChipSelect>
    1ae6:	10 c0       	rjmp	.+32     	; 0x1b08 <u8g_WriteEscSeqP+0x82>
    1ae8:	c0 3c       	cpi	r28, 0xC0	; 192
    1aea:	80 f0       	brcs	.+32     	; 0x1b0c <u8g_WriteEscSeqP+0x86>
    1aec:	b7 01       	movw	r22, r14
      }
      else if ( value >= 0xc0 )
    1aee:	c8 01       	movw	r24, r16
    1af0:	9d df       	rcall	.-198    	; 0x1a2c <u8g_SetResetLow>
      {
        u8g_SetResetLow(u8g, dev);
    1af2:	c2 95       	swap	r28
    1af4:	c0 7f       	andi	r28, 0xF0	; 240
    1af6:	ce 5f       	subi	r28, 0xFE	; 254
    1af8:	d0 e0       	ldi	r29, 0x00	; 0
        value &= 0x0f;
        value <<= 4;
    1afa:	ce 01       	movw	r24, r28
    1afc:	1d d0       	rcall	.+58     	; 0x1b38 <u8g_Delay>
        value+=2;
    1afe:	b7 01       	movw	r22, r14
        u8g_Delay(value);
    1b00:	c8 01       	movw	r24, r16
    1b02:	9e df       	rcall	.-196    	; 0x1a40 <u8g_SetResetHigh>
    1b04:	ce 01       	movw	r24, r28
    1b06:	18 d0       	rcall	.+48     	; 0x1b38 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	06 c0       	rjmp	.+12     	; 0x1b18 <u8g_WriteEscSeqP+0x92>
    1b0c:	c7 fd       	sbrc	r28, 7
    1b0e:	fc cf       	rjmp	.-8      	; 0x1b08 <u8g_WriteEscSeqP+0x82>
        u8g_Delay(value);
    1b10:	8c 2f       	mov	r24, r28
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	f8 cf       	rjmp	.-16     	; 0x1b06 <u8g_WriteEscSeqP+0x80>
      }
      else if ( value <= 127 )
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	ff ef       	ldi	r31, 0xFF	; 255
      else if ( value >= 0xbe )
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
    1b1a:	cf 1a       	sub	r12, r31
    1b1c:	df 0a       	sbc	r13, r31
      {
        u8g_Delay(value);
    1b1e:	bf cf       	rjmp	.-130    	; 0x1a9e <u8g_WriteEscSeqP+0x18>
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	01 c0       	rjmp	.+2      	; 0x1b26 <u8g_WriteEscSeqP+0xa0>
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
      }
      else
      {
        is_escape = 1;
    1b24:	81 e0       	ldi	r24, 0x01	; 1
      {
        u8g_Delay(value);
      }
      is_escape = 0;
    }
    esc_seq++;
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
  }
    1b2c:	0f 91       	pop	r16
    if ( is_escape == 0 )
    {
      if ( value != 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
          return 0;
    1b2e:	ff 90       	pop	r15
    1b30:	ef 90       	pop	r14
      }
      is_escape = 0;
    }
    esc_seq++;
  }
  return 1;
    1b32:	df 90       	pop	r13
}
    1b34:	cf 90       	pop	r12
    1b36:	08 95       	ret

00001b38 <u8g_Delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b38:	2e e9       	ldi	r18, 0x9E	; 158
    1b3a:	3f e0       	ldi	r19, 0x0F	; 15
  ==> must be devided by 4, rounded up 7/4 = 2
*/
void u8g_Delay(uint16_t val)
{
  /* old version did a call to the arduino lib: delay(val); */
  while( val != 0 )
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	29 f0       	breq	.+10     	; 0x1b4a <u8g_Delay+0x12>
    1b40:	f9 01       	movw	r30, r18
    1b42:	31 97       	sbiw	r30, 0x01	; 1
    1b44:	f1 f7       	brne	.-4      	; 0x1b42 <u8g_Delay+0xa>
  {
    _delay_loop_2( (F_CPU / 4000 ) -2);
    val--;
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f9 cf       	rjmp	.-14     	; 0x1b3c <u8g_Delay+0x4>
  }
}
    1b4a:	08 95       	ret

00001b4c <u8g_MicroDelay>:
    1b4c:	84 e0       	ldi	r24, 0x04	; 4
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <u8g_MicroDelay+0x4>
    1b54:	08 95       	ret

00001b56 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
    1b56:	0f 93       	push	r16
    1b58:	fc 01       	movw	r30, r24
    1b5a:	01 50       	subi	r16, 0x01	; 1
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
    1b5c:	04 0f       	add	r16, r20
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    1b5e:	84 a9       	ldd	r24, Z+52	; 0x34
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1b60:	96 a9       	ldd	r25, Z+54	; 0x36
    1b62:	94 17       	cp	r25, r20
    1b64:	18 f0       	brcs	.+6      	; 0x1b6c <u8g_IsBBXIntersection+0x16>
  {
    if ( v1 >= a0 )
    1b66:	08 17       	cp	r16, r24
    1b68:	28 f4       	brcc	.+10     	; 0x1b74 <u8g_IsBBXIntersection+0x1e>
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <u8g_IsBBXIntersection+0x1a>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1b6c:	08 17       	cp	r16, r24
    1b6e:	50 f0       	brcs	.+20     	; 0x1b84 <u8g_IsBBXIntersection+0x2e>
    {
      if ( v0 > v1 )
    1b70:	04 17       	cp	r16, r20
    1b72:	40 f4       	brcc	.+16     	; 0x1b84 <u8g_IsBBXIntersection+0x2e>
    1b74:	21 50       	subi	r18, 0x01	; 1
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
    1b76:	26 0f       	add	r18, r22
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
    1b78:	83 a9       	ldd	r24, Z+51	; 0x33
//static uint8_t u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) U8G_ALWAYS_INLINE;
static uint8_t U8G_ALWAYS_INLINE u8g_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_uint_t v0, u8g_uint_t v1) 
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
    1b7a:	95 a9       	ldd	r25, Z+53	; 0x35
    1b7c:	96 17       	cp	r25, r22
    1b7e:	20 f4       	brcc	.+8      	; 0x1b88 <u8g_IsBBXIntersection+0x32>
      }
    }
  }
  else
  {
    if ( v1 >= a0 )
    1b80:	28 17       	cp	r18, r24
    1b82:	20 f4       	brcc	.+8      	; 0x1b8c <u8g_IsBBXIntersection+0x36>
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
    return 0; 
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	07 c0       	rjmp	.+14     	; 0x1b96 <u8g_IsBBXIntersection+0x40>
{
  /* surprisingly the macro leads to larger code */
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    1b88:	28 17       	cp	r18, r24
    1b8a:	20 f4       	brcc	.+8      	; 0x1b94 <u8g_IsBBXIntersection+0x3e>
  }
  else
  {
    if ( v1 >= a0 )
    {
      if ( v0 > v1 )
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	26 17       	cp	r18, r22
    1b90:	10 f0       	brcs	.+4      	; 0x1b96 <u8g_IsBBXIntersection+0x40>
    1b92:	f8 cf       	rjmp	.-16     	; 0x1b84 <u8g_IsBBXIntersection+0x2e>
  /* return U8G_IS_INTERSECTION_MACRO(a0,a1,v0,v1); */
  if ( v0 <= a1 )
  {
    if ( v1 >= a0 )
    {
      return 1;
    1b94:	81 e0       	ldi	r24, 0x01	; 1
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
}
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <u8g_init_data>:
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
}

static void u8g_init_data(u8g_t *u8g)
{
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	ec 01       	movw	r28, r24
  u8g->font = NULL;
    1ba2:	1d 82       	std	Y+5, r1	; 0x05
    1ba4:	1c 82       	std	Y+4, r1	; 0x04
  u8g->cursor_font = NULL;
    1ba6:	1f 82       	std	Y+7, r1	; 0x07
    1ba8:	1e 82       	std	Y+6, r1	; 0x06
  u8g->cursor_bg_color = 0;
    1baa:	19 86       	std	Y+9, r1	; 0x09
  u8g->cursor_fg_color = 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	88 87       	std	Y+8, r24	; 0x08
  u8g->cursor_encoding = 34;
    1bb0:	82 e2       	ldi	r24, 0x22	; 34
    1bb2:	8a 87       	std	Y+10, r24	; 0x0a
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
    1bb4:	1f 86       	std	Y+15, r1	; 0x0f
    1bb6:	1e 86       	std	Y+14, r1	; 0x0e
    1bb8:	fe 01       	movw	r30, r28
    1bba:	b3 96       	adiw	r30, 0x23	; 35
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	c1 96       	adiw	r24, 0x31	; 49

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
    1bc0:	2f ef       	ldi	r18, 0xFF	; 255
    1bc2:	21 93       	st	Z+, r18
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;

#if defined(U8G_WITH_PINLIST)  
  {
    uint8_t i;
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
    1bc4:	e8 17       	cp	r30, r24
    1bc6:	f9 07       	cpc	r31, r25
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <u8g_init_data+0x28>
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
    1bca:	11 e0       	ldi	r17, 0x01	; 1
    1bcc:	18 a3       	std	Y+32, r17	; 0x20
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);

  u8g_SetFontPosBaseline(u8g);
    1bce:	ce 01       	movw	r24, r28
    1bd0:	76 d4       	rcall	.+2284   	; 0x24be <u8g_SetFontPosBaseline>
    1bd2:	1f 8b       	std	Y+23, r17	; 0x17
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
    1bd4:	18 8e       	std	Y+24, r1	; 0x18
  u8g->font_ref_ascent = 0;
    1bd6:	19 8e       	std	Y+25, r1	; 0x19
  u8g->font_ref_descent = 0;
    1bd8:	80 e4       	ldi	r24, 0x40	; 64
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
    1bda:	8a 8f       	std	Y+26, r24	; 0x1a
    1bdc:	1b 8e       	std	Y+27, r1	; 0x1b
  u8g->line_spacing = 0;
    1bde:	87 eb       	ldi	r24, 0xB7	; 183
  
  u8g->state_cb = u8g_state_dummy_cb;
    1be0:	9c e0       	ldi	r25, 0x0C	; 12
    1be2:	9a ab       	std	Y+50, r25	; 0x32
    1be4:	89 ab       	std	Y+49, r24	; 0x31
    1be6:	df 91       	pop	r29

}
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	08 95       	ret

00001bee <u8g_call_dev_fn>:
    1bee:	db 01       	movw	r26, r22
#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  return dev->dev_fn(u8g, dev, msg, arg); 
    1bf0:	ed 91       	ld	r30, X+
    1bf2:	fc 91       	ld	r31, X
    1bf4:	09 94       	ijmp

00001bf6 <u8g_InitLL>:
}

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
    1bf6:	ef 92       	push	r14
    1bf8:	ff 92       	push	r15
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <u8g_InitLL+0xc>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	7c 01       	movw	r14, r24
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    1c08:	dc 01       	movw	r26, r24
    1c0a:	d1 96       	adiw	r26, 0x31	; 49
    1c0c:	ed 91       	ld	r30, X+
    1c0e:	fc 91       	ld	r31, X
    1c10:	d2 97       	sbiw	r26, 0x32	; 50
    1c12:	82 e0       	ldi	r24, 0x02	; 2
    1c14:	69 83       	std	Y+1, r22	; 0x01
    1c16:	7a 83       	std	Y+2, r23	; 0x02
    1c18:	09 95       	icall
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	4a e0       	ldi	r20, 0x0A	; 10
    1c20:	69 81       	ldd	r22, Y+1	; 0x01
    1c22:	7a 81       	ldd	r23, Y+2	; 0x02
    1c24:	c7 01       	movw	r24, r14
    1c26:	e3 df       	rcall	.-58     	; 0x1bee <u8g_call_dev_fn>
    1c28:	18 2f       	mov	r17, r24
    1c2a:	d7 01       	movw	r26, r14
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
    1c2c:	d1 96       	adiw	r26, 0x31	; 49
    1c2e:	ed 91       	ld	r30, X+
    1c30:	fc 91       	ld	r31, X
    1c32:	d2 97       	sbiw	r26, 0x32	; 50
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	09 95       	icall
    1c38:	d7 01       	movw	r26, r14
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    1c3a:	d1 96       	adiw	r26, 0x31	; 49
    1c3c:	ed 91       	ld	r30, X+
    1c3e:	fc 91       	ld	r31, X
    1c40:	d2 97       	sbiw	r26, 0x32	; 50
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	09 95       	icall
    1c46:	81 2f       	mov	r24, r17
  return r;
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	df 91       	pop	r29
    1c4e:	cf 91       	pop	r28
    1c50:	1f 91       	pop	r17
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	08 95       	ret

00001c58 <u8g_FirstPageLL>:
    1c58:	0f 93       	push	r16

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
    1c5a:	1f 93       	push	r17
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	ec 01       	movw	r28, r24
    1c62:	8b 01       	movw	r16, r22
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    1c64:	e9 a9       	ldd	r30, Y+49	; 0x31
    1c66:	fa a9       	ldd	r31, Y+50	; 0x32
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
    1c6c:	e9 a9       	ldd	r30, Y+49	; 0x31
    1c6e:	fa a9       	ldd	r31, Y+50	; 0x32
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	09 95       	icall
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	44 e1       	ldi	r20, 0x14	; 20
    1c7a:	b8 01       	movw	r22, r16
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	b7 df       	rcall	.-146    	; 0x1bee <u8g_call_dev_fn>
    1c80:	9e 01       	movw	r18, r28
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    1c82:	2d 5c       	subi	r18, 0xCD	; 205
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	47 e1       	ldi	r20, 0x17	; 23
    1c88:	b8 01       	movw	r22, r16
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	b0 df       	rcall	.-160    	; 0x1bee <u8g_call_dev_fn>
    1c8e:	e9 a9       	ldd	r30, Y+49	; 0x31
    1c90:	fa a9       	ldd	r31, Y+50	; 0x32
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	df 91       	pop	r29
    1c96:	cf 91       	pop	r28
}
    1c98:	1f 91       	pop	r17
    1c9a:	0f 91       	pop	r16
    1c9c:	09 94       	ijmp

00001c9e <u8g_NextPageLL>:
    1c9e:	ef 92       	push	r14
{  
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    1ca0:	ff 92       	push	r15
}

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
    1ca2:	1f 93       	push	r17
    1ca4:	cf 93       	push	r28
    1ca6:	df 93       	push	r29
    1ca8:	ec 01       	movw	r28, r24
    1caa:	7b 01       	movw	r14, r22
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
    1cac:	e9 a9       	ldd	r30, Y+49	; 0x31
    1cae:	fa a9       	ldd	r31, Y+50	; 0x32
    1cb0:	82 e0       	ldi	r24, 0x02	; 2
    1cb2:	09 95       	icall
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
    1cb4:	e9 a9       	ldd	r30, Y+49	; 0x31
    1cb6:	fa a9       	ldd	r31, Y+50	; 0x32
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	09 95       	icall
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	45 e1       	ldi	r20, 0x15	; 21
    1cc2:	b7 01       	movw	r22, r14
    1cc4:	ce 01       	movw	r24, r28
    1cc6:	93 df       	rcall	.-218    	; 0x1bee <u8g_call_dev_fn>
    1cc8:	18 2f       	mov	r17, r24
    1cca:	88 23       	and	r24, r24
  if ( r != 0 )
    1ccc:	39 f0       	breq	.+14     	; 0x1cdc <u8g_NextPageLL+0x3e>
    1cce:	9e 01       	movw	r18, r28
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    1cd0:	2d 5c       	subi	r18, 0xCD	; 205
    1cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cd4:	47 e1       	ldi	r20, 0x17	; 23
    1cd6:	b7 01       	movw	r22, r14
    1cd8:	ce 01       	movw	r24, r28
    1cda:	89 df       	rcall	.-238    	; 0x1bee <u8g_call_dev_fn>
    1cdc:	e9 a9       	ldd	r30, Y+49	; 0x31
    1cde:	fa a9       	ldd	r31, Y+50	; 0x32
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	09 95       	icall
    1ce4:	81 2f       	mov	r24, r17
    1ce6:	df 91       	pop	r29
  return r;
}
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	08 95       	ret

00001cf2 <u8g_GetWidthLL>:
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
    1cf6:	1f 92       	push	r1
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
    1cfc:	9e 01       	movw	r18, r28
    1cfe:	2f 5f       	subi	r18, 0xFF	; 255
    1d00:	3f 4f       	sbci	r19, 0xFF	; 255
    1d02:	46 e4       	ldi	r20, 0x46	; 70
    1d04:	74 df       	rcall	.-280    	; 0x1bee <u8g_call_dev_fn>
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
  return r;
}
    1d08:	0f 90       	pop	r0
    1d0a:	df 91       	pop	r29
    1d0c:	cf 91       	pop	r28
    1d0e:	08 95       	ret

00001d10 <u8g_GetHeightLL>:
    1d10:	cf 93       	push	r28

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
    1d12:	df 93       	push	r29
    1d14:	1f 92       	push	r1
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
    1d1a:	9e 01       	movw	r18, r28
    1d1c:	2f 5f       	subi	r18, 0xFF	; 255
    1d1e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d20:	47 e4       	ldi	r20, 0x47	; 71
    1d22:	65 df       	rcall	.-310    	; 0x1bee <u8g_call_dev_fn>
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
  return r;
}
    1d26:	0f 90       	pop	r0
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	08 95       	ret

00001d2e <u8g_GetModeLL>:
    1d2e:	20 e0       	ldi	r18, 0x00	; 0

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	48 e4       	ldi	r20, 0x48	; 72
    1d34:	5c cf       	rjmp	.-328    	; 0x1bee <u8g_call_dev_fn>

00001d36 <u8g_UpdateDimension>:
    1d36:	cf 93       	push	r28


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
    1d38:	df 93       	push	r29
    1d3a:	ec 01       	movw	r28, r24
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
    1d3c:	6a 81       	ldd	r22, Y+2	; 0x02
    1d3e:	7b 81       	ldd	r23, Y+3	; 0x03
    1d40:	d8 df       	rcall	.-80     	; 0x1cf2 <u8g_GetWidthLL>
    1d42:	88 83       	st	Y, r24
    1d44:	6a 81       	ldd	r22, Y+2	; 0x02
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
    1d46:	7b 81       	ldd	r23, Y+3	; 0x03
    1d48:	ce 01       	movw	r24, r28
    1d4a:	e2 df       	rcall	.-60     	; 0x1d10 <u8g_GetHeightLL>
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	6a 81       	ldd	r22, Y+2	; 0x02
    1d50:	7b 81       	ldd	r23, Y+3	; 0x03
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
    1d52:	ce 01       	movw	r24, r28
    1d54:	ec df       	rcall	.-40     	; 0x1d2e <u8g_GetModeLL>
    1d56:	8b 87       	std	Y+11, r24	; 0x0b
    1d58:	9e 01       	movw	r18, r28
    1d5a:	2d 5c       	subi	r18, 0xCD	; 205
    1d5c:	3f 4f       	sbci	r19, 0xFF	; 255
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    1d5e:	6a 81       	ldd	r22, Y+2	; 0x02
    1d60:	7b 81       	ldd	r23, Y+3	; 0x03
    1d62:	47 e1       	ldi	r20, 0x17	; 23
    1d64:	ce 01       	movw	r24, r28
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	41 cf       	rjmp	.-382    	; 0x1bee <u8g_call_dev_fn>

00001d6c <u8g_Begin>:
}
    1d6c:	cf 93       	push	r28
    1d6e:	df 93       	push	r29
{
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
    1d70:	ec 01       	movw	r28, r24
    1d72:	6a 81       	ldd	r22, Y+2	; 0x02
}

uint8_t u8g_Begin(u8g_t *u8g)
{
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
    1d74:	7b 81       	ldd	r23, Y+3	; 0x03
    1d76:	3f df       	rcall	.-386    	; 0x1bf6 <u8g_InitLL>
    1d78:	88 23       	and	r24, r24
    1d7a:	19 f0       	breq	.+6      	; 0x1d82 <u8g_Begin+0x16>
    1d7c:	ce 01       	movw	r24, r28
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
    1d7e:	db df       	rcall	.-74     	; 0x1d36 <u8g_UpdateDimension>
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	df 91       	pop	r29
  return 1;
    1d84:	cf 91       	pop	r28
}
    1d86:	08 95       	ret

00001d88 <u8g_InitSPI>:
    1d88:	8f 92       	push	r8
    1d8a:	9f 92       	push	r9
}


#if defined(U8G_WITH_PINLIST)  
uint8_t u8g_InitSPI(u8g_t *u8g, u8g_dev_t *dev, uint8_t sck, uint8_t mosi, uint8_t cs, uint8_t a0, uint8_t reset)
{
    1d8c:	af 92       	push	r10
    1d8e:	bf 92       	push	r11
    1d90:	cf 92       	push	r12
    1d92:	ef 92       	push	r14
    1d94:	0f 93       	push	r16
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <u8g_InitSPI+0x14>
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	4c 01       	movw	r8, r24
    1da2:	5b 01       	movw	r10, r22
  
  /* fill data structure with some suitable values */
  u8g_init_data(u8g);
    1da4:	2a 83       	std	Y+2, r18	; 0x02
    1da6:	49 83       	std	Y+1, r20	; 0x01
    1da8:	f8 de       	rcall	.-528    	; 0x1b9a <u8g_init_data>
    1daa:	f4 01       	movw	r30, r8
  u8g->dev = dev;
    1dac:	b3 82       	std	Z+3, r11	; 0x03
    1dae:	a2 82       	std	Z+2, r10	; 0x02
    1db0:	49 81       	ldd	r20, Y+1	; 0x01
    
  /* assign user pins */
  u8g->pin_list[U8G_PI_SCK] = sck;
    1db2:	47 a3       	std	Z+39, r20	; 0x27
    1db4:	2a 81       	ldd	r18, Y+2	; 0x02
  u8g->pin_list[U8G_PI_MOSI] = mosi;
    1db6:	20 a7       	std	Z+40, r18	; 0x28
    1db8:	05 a3       	std	Z+37, r16	; 0x25
  u8g->pin_list[U8G_PI_CS] = cs;
    1dba:	e4 a2       	std	Z+36, r14	; 0x24
  u8g->pin_list[U8G_PI_A0] = a0;
    1dbc:	c3 a2       	std	Z+35, r12	; 0x23
  u8g->pin_list[U8G_PI_RESET] = reset;
    1dbe:	c4 01       	movw	r24, r8
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
    1dc0:	0f 90       	pop	r0
}
    1dc2:	0f 90       	pop	r0
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	0f 91       	pop	r16
    1dca:	ef 90       	pop	r14
    1dcc:	cf 90       	pop	r12
    1dce:	bf 90       	pop	r11
    1dd0:	af 90       	pop	r10
    1dd2:	9f 90       	pop	r9
    1dd4:	8f 90       	pop	r8
    1dd6:	ca cf       	rjmp	.-108    	; 0x1d6c <u8g_Begin>

00001dd8 <u8g_FirstPage>:
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
    1dd8:	fc 01       	movw	r30, r24
    1dda:	62 81       	ldd	r22, Z+2	; 0x02
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
  u8g_FirstPageLL(u8g, u8g->dev);
    1ddc:	73 81       	ldd	r23, Z+3	; 0x03
    1dde:	3c cf       	rjmp	.-392    	; 0x1c58 <u8g_FirstPageLL>

00001de0 <u8g_NextPage>:
    1de0:	cf 93       	push	r28
}

uint8_t u8g_NextPage(u8g_t *u8g)
{
    1de2:	df 93       	push	r29
    1de4:	ec 01       	movw	r28, r24
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
    1de6:	ee 85       	ldd	r30, Y+14	; 0x0e
    1de8:	ff 85       	ldd	r31, Y+15	; 0x0f
    1dea:	30 97       	sbiw	r30, 0x00	; 0
    1dec:	09 f0       	breq	.+2      	; 0x1df0 <u8g_NextPage+0x10>
  {
    u8g->cursor_fn(u8g);
    1dee:	09 95       	icall
  }
  return u8g_NextPageLL(u8g, u8g->dev);
    1df0:	6a 81       	ldd	r22, Y+2	; 0x02
    1df2:	7b 81       	ldd	r23, Y+3	; 0x03
    1df4:	ce 01       	movw	r24, r28
}
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
{
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
  {
    u8g->cursor_fn(u8g);
  }
  return u8g_NextPageLL(u8g, u8g->dev);
    1dfa:	51 cf       	rjmp	.-350    	; 0x1c9e <u8g_NextPageLL>

00001dfc <u8g_Draw8Pixel>:
    1dfc:	0f 93       	push	r16
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
    1dfe:	fc 01       	movw	r30, r24
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
    1e04:	64 8f       	std	Z+28, r22	; 0x1c
  arg->y = y;
    1e06:	45 8f       	std	Z+29, r20	; 0x1d
  arg->dir = dir;
    1e08:	27 8f       	std	Z+31, r18	; 0x1f
  arg->pixel = pixel;
    1e0a:	06 8f       	std	Z+30, r16	; 0x1e
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
    1e0c:	9f 01       	movw	r18, r30
    1e0e:	24 5e       	subi	r18, 0xE4	; 228
    1e10:	3f 4f       	sbci	r19, 0xFF	; 255
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    1e12:	4b e3       	ldi	r20, 0x3B	; 59
    1e14:	bc 01       	movw	r22, r24
    1e16:	cf 01       	movw	r24, r30
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
}
    1e18:	0f 91       	pop	r16
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
  arg->x = x;
  arg->y = y;
  arg->dir = dir;
  arg->pixel = pixel;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
    1e1a:	e9 ce       	rjmp	.-558    	; 0x1bee <u8g_call_dev_fn>

00001e1c <u8g_pb8v1_set_pixel>:
    1e1c:	dc 01       	movw	r26, r24
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
  register uint8_t mask;
  uint8_t *ptr = b->buf;
    1e1e:	16 96       	adiw	r26, 0x06	; 6
    1e20:	ed 91       	ld	r30, X+
    1e22:	fc 91       	ld	r31, X
    1e24:	17 97       	sbiw	r26, 0x07	; 7
  
  y -= b->p.page_y0;
    1e26:	12 96       	adiw	r26, 0x02	; 2
    1e28:	8c 91       	ld	r24, X
    1e2a:	48 1b       	sub	r20, r24
  mask = 1;
  y &= 0x07;
    1e2c:	47 70       	andi	r20, 0x07	; 7
  mask <<= y;
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	04 2e       	mov	r0, r20
    1e34:	01 c0       	rjmp	.+2      	; 0x1e38 <u8g_pb8v1_set_pixel+0x1c>
    1e36:	88 0f       	add	r24, r24
    1e38:	0a 94       	dec	r0
    1e3a:	ea f7       	brpl	.-6      	; 0x1e36 <u8g_pb8v1_set_pixel+0x1a>
  ptr += x;
    1e3c:	e6 0f       	add	r30, r22
    1e3e:	f1 1d       	adc	r31, r1
    1e40:	30 81       	ld	r19, Z
  if ( color_index )
    1e42:	22 23       	and	r18, r18
    1e44:	11 f0       	breq	.+4      	; 0x1e4a <u8g_pb8v1_set_pixel+0x2e>
  {
    *ptr |= mask;
    1e46:	83 2b       	or	r24, r19
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <u8g_pb8v1_set_pixel+0x32>
  }
  else
  {
    mask ^=0xff;
    1e4a:	80 95       	com	r24
    *ptr &= mask;
    1e4c:	83 23       	and	r24, r19
    1e4e:	80 83       	st	Z, r24
    1e50:	08 95       	ret

00001e52 <u8g_pb8v1_SetPixel>:
  }
}


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
    1e52:	fb 01       	movw	r30, r22
  if ( arg_pixel->y < b->p.page_y0 )
    1e54:	41 81       	ldd	r20, Z+1	; 0x01
    1e56:	dc 01       	movw	r26, r24
    1e58:	12 96       	adiw	r26, 0x02	; 2
    1e5a:	2c 91       	ld	r18, X
    1e5c:	12 97       	sbiw	r26, 0x02	; 2
    1e5e:	42 17       	cp	r20, r18
    1e60:	60 f0       	brcs	.+24     	; 0x1e7a <u8g_pb8v1_SetPixel+0x28>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
    1e62:	13 96       	adiw	r26, 0x03	; 3
    1e64:	2c 91       	ld	r18, X
    1e66:	13 97       	sbiw	r26, 0x03	; 3
    1e68:	24 17       	cp	r18, r20
    1e6a:	38 f0       	brcs	.+14     	; 0x1e7a <u8g_pb8v1_SetPixel+0x28>
    return;
  if ( arg_pixel->x >= b->width )
    1e6c:	60 81       	ld	r22, Z
    1e6e:	15 96       	adiw	r26, 0x05	; 5
    1e70:	2c 91       	ld	r18, X
    1e72:	62 17       	cp	r22, r18
    1e74:	10 f4       	brcc	.+4      	; 0x1e7a <u8g_pb8v1_SetPixel+0x28>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
    1e76:	24 81       	ldd	r18, Z+4	; 0x04
    1e78:	d1 cf       	rjmp	.-94     	; 0x1e1c <u8g_pb8v1_set_pixel>
    1e7a:	08 95       	ret

00001e7c <u8g_pb8v1_Set8PixelOpt2>:
    1e7c:	cf 92       	push	r12
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
    1e7e:	df 92       	push	r13
    1e80:	ff 92       	push	r15
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
    1e8a:	6c 01       	movw	r12, r24
    1e8c:	eb 01       	movw	r28, r22
  register uint8_t pixel = arg_pixel->pixel;
    1e8e:	fa 80       	ldd	r15, Y+2	; 0x02
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
    1e90:	9b 81       	ldd	r25, Y+3	; 0x03
    1e92:	91 30       	cpi	r25, 0x01	; 1
    1e94:	51 f0       	breq	.+20     	; 0x1eaa <u8g_pb8v1_Set8PixelOpt2+0x2e>
    1e96:	30 f0       	brcs	.+12     	; 0x1ea4 <u8g_pb8v1_Set8PixelOpt2+0x28>
    1e98:	92 30       	cpi	r25, 0x02	; 2
    1e9a:	49 f0       	breq	.+18     	; 0x1eae <u8g_pb8v1_Set8PixelOpt2+0x32>
    1e9c:	93 30       	cpi	r25, 0x03	; 3
    1e9e:	51 f4       	brne	.+20     	; 0x1eb4 <u8g_pb8v1_Set8PixelOpt2+0x38>
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    case 3: dy--; break;
    1ea0:	1f ef       	ldi	r17, 0xFF	; 255
    1ea2:	09 c0       	rjmp	.+18     	; 0x1eb6 <u8g_pb8v1_Set8PixelOpt2+0x3a>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    1ea4:	10 e0       	ldi	r17, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    1ea6:	01 e0       	ldi	r16, 0x01	; 1
    1ea8:	07 c0       	rjmp	.+14     	; 0x1eb8 <u8g_pb8v1_Set8PixelOpt2+0x3c>
    case 1: dy++; break;
    1eaa:	11 e0       	ldi	r17, 0x01	; 1
    1eac:	04 c0       	rjmp	.+8      	; 0x1eb6 <u8g_pb8v1_Set8PixelOpt2+0x3a>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    1eae:	10 e0       	ldi	r17, 0x00	; 0
  
  switch( arg_pixel->dir )
  {
    case 0: dx++; break;
    case 1: dy++; break;
    case 2: dx--; break;
    1eb0:	0f ef       	ldi	r16, 0xFF	; 255
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <u8g_pb8v1_Set8PixelOpt2+0x3c>

void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
    1eb4:	10 e0       	ldi	r17, 0x00	; 0


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
    1eb6:	00 e0       	ldi	r16, 0x00	; 0
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
    1eb8:	f7 fe       	sbrs	r15, 7
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <u8g_pb8v1_Set8PixelOpt2+0x46>
      u8g_pb8v1_SetPixel(b, arg_pixel);
    1ebc:	be 01       	movw	r22, r28
    1ebe:	c6 01       	movw	r24, r12
    1ec0:	c8 df       	rcall	.-112    	; 0x1e52 <u8g_pb8v1_SetPixel>
    1ec2:	98 81       	ld	r25, Y
    arg_pixel->x += dx;
    1ec4:	90 0f       	add	r25, r16
    1ec6:	98 83       	st	Y, r25
    1ec8:	99 81       	ldd	r25, Y+1	; 0x01
    arg_pixel->y += dy;
    1eca:	91 0f       	add	r25, r17
    1ecc:	99 83       	std	Y+1, r25	; 0x01
    1ece:	ff 0c       	add	r15, r15
    pixel <<= 1;
    1ed0:	99 f7       	brne	.-26     	; 0x1eb8 <u8g_pb8v1_Set8PixelOpt2+0x3c>
  } while( pixel != 0  );
    1ed2:	df 91       	pop	r29
  
}
    1ed4:	cf 91       	pop	r28
    1ed6:	1f 91       	pop	r17
    1ed8:	0f 91       	pop	r16
    1eda:	ff 90       	pop	r15
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	08 95       	ret

00001ee2 <u8g_dev_pb8v1_base_fn>:
    1ee2:	0f 93       	push	r16

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    1ee4:	1f 93       	push	r17
    1ee6:	cf 93       	push	r28
    1ee8:	df 93       	push	r29
    1eea:	89 01       	movw	r16, r18
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    1eec:	fb 01       	movw	r30, r22
    1eee:	c2 81       	ldd	r28, Z+2	; 0x02
    1ef0:	d3 81       	ldd	r29, Z+3	; 0x03
  switch(msg)
    1ef2:	42 33       	cpi	r20, 0x32	; 50
    1ef4:	d9 f0       	breq	.+54     	; 0x1f2c <u8g_dev_pb8v1_base_fn+0x4a>
    1ef6:	58 f4       	brcc	.+22     	; 0x1f0e <u8g_dev_pb8v1_base_fn+0x2c>
    1ef8:	45 31       	cpi	r20, 0x15	; 21
    1efa:	e1 f0       	breq	.+56     	; 0x1f34 <u8g_dev_pb8v1_base_fn+0x52>
    1efc:	47 31       	cpi	r20, 0x17	; 23
    1efe:	09 f1       	breq	.+66     	; 0x1f42 <u8g_dev_pb8v1_base_fn+0x60>
    1f00:	44 31       	cpi	r20, 0x14	; 20
    1f02:	41 f5       	brne	.+80     	; 0x1f54 <u8g_dev_pb8v1_base_fn+0x72>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
    1f04:	ce 01       	movw	r24, r28
    1f06:	34 dd       	rcall	.-1432   	; 0x1970 <u8g_pb_Clear>
    1f08:	ce 01       	movw	r24, r28
      u8g_page_First(&(pb->p));
    1f0a:	f2 d2       	rcall	.+1508   	; 0x24f0 <u8g_page_First>
    1f0c:	23 c0       	rjmp	.+70     	; 0x1f54 <u8g_dev_pb8v1_base_fn+0x72>
    1f0e:	46 34       	cpi	r20, 0x46	; 70
    1f10:	e1 f0       	breq	.+56     	; 0x1f4a <u8g_dev_pb8v1_base_fn+0x68>
}

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
    1f12:	47 34       	cpi	r20, 0x47	; 71
    1f14:	e1 f0       	breq	.+56     	; 0x1f4e <u8g_dev_pb8v1_base_fn+0x6c>
    1f16:	4b 33       	cpi	r20, 0x3B	; 59
    1f18:	e9 f4       	brne	.+58     	; 0x1f54 <u8g_dev_pb8v1_base_fn+0x72>
    1f1a:	b9 01       	movw	r22, r18
    1f1c:	ce 01       	movw	r24, r28
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
    1f1e:	5e dd       	rcall	.-1348   	; 0x19dc <u8g_pb_Is8PixelVisible>
    1f20:	88 23       	and	r24, r24
    1f22:	c1 f0       	breq	.+48     	; 0x1f54 <u8g_dev_pb8v1_base_fn+0x72>
    1f24:	b8 01       	movw	r22, r16
    1f26:	ce 01       	movw	r24, r28
    1f28:	a9 df       	rcall	.-174    	; 0x1e7c <u8g_pb8v1_Set8PixelOpt2>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
    1f2a:	14 c0       	rjmp	.+40     	; 0x1f54 <u8g_dev_pb8v1_base_fn+0x72>
    1f2c:	b9 01       	movw	r22, r18
    1f2e:	ce 01       	movw	r24, r28
    1f30:	90 df       	rcall	.-224    	; 0x1e52 <u8g_pb8v1_SetPixel>
    1f32:	10 c0       	rjmp	.+32     	; 0x1f54 <u8g_dev_pb8v1_base_fn+0x72>
      break;
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
    1f34:	ce 01       	movw	r24, r28
    1f36:	e3 d2       	rcall	.+1478   	; 0x24fe <u8g_page_Next>
    1f38:	88 23       	and	r24, r24
    1f3a:	69 f0       	breq	.+26     	; 0x1f56 <u8g_dev_pb8v1_base_fn+0x74>
    1f3c:	ce 01       	movw	r24, r28
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
      u8g_page_First(&(pb->p));
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
    1f3e:	18 dd       	rcall	.-1488   	; 0x1970 <u8g_pb_Clear>
    1f40:	09 c0       	rjmp	.+18     	; 0x1f54 <u8g_dev_pb8v1_base_fn+0x72>
    1f42:	b9 01       	movw	r22, r18
    1f44:	ce 01       	movw	r24, r28
    1f46:	3a dd       	rcall	.-1420   	; 0x19bc <u8g_pb_GetPageBox>
        return 0;
      u8g_pb_Clear(pb);
    1f48:	05 c0       	rjmp	.+10     	; 0x1f54 <u8g_dev_pb8v1_base_fn+0x72>
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	01 c0       	rjmp	.+2      	; 0x1f50 <u8g_dev_pb8v1_base_fn+0x6e>
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
    1f50:	f8 01       	movw	r30, r16
    1f52:	80 83       	st	Z, r24
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
      break;
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
      break;
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
    1f5e:	08 95       	ret

00001f60 <u8g_get_avr_io_ptr>:
#endif
#endif
};

static volatile uint8_t *u8g_get_avr_io_ptr(const IO_PTR *base, uint8_t offset)
{
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	00 d0       	rcall	.+0      	; 0x1f66 <u8g_get_avr_io_ptr+0x6>
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t * tmp;
  base += offset;
    1f6a:	86 0f       	add	r24, r22
    1f6c:	91 1d       	adc	r25, r1
    1f6e:	86 0f       	add	r24, r22
    1f70:	91 1d       	adc	r25, r1
  memcpy_P(&tmp, base, sizeof(volatile uint8_t * PROGMEM));
    1f72:	42 e0       	ldi	r20, 0x02	; 2
    1f74:	50 e0       	ldi	r21, 0x00	; 0
    1f76:	bc 01       	movw	r22, r24
    1f78:	ce 01       	movw	r24, r28
    1f7a:	01 96       	adiw	r24, 0x01	; 1
    1f7c:	0e 94 64 35 	call	0x6ac8	; 0x6ac8 <memcpy_P>
  return tmp; 
}
    1f80:	89 81       	ldd	r24, Y+1	; 0x01
    1f82:	9a 81       	ldd	r25, Y+2	; 0x02
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <u8g_Pin>:
uint8_t u8g_Pin(uint8_t port, uint8_t bitpos)
{
  port <<= 3;
  port += bitpos;
  return port;
}
    1f8e:	98 e0       	ldi	r25, 0x08	; 8
    1f90:	89 9f       	mul	r24, r25
    1f92:	60 0d       	add	r22, r0
    1f94:	11 24       	eor	r1, r1
    1f96:	86 2f       	mov	r24, r22
    1f98:	08 95       	ret

00001f9a <u8g_SetPinOutput>:
  return tmp; 
}

/* set direction to output of the specified pin (internal pin number) */
void u8g_SetPinOutput(uint8_t internal_pin_number)
{
    1f9a:	cf 93       	push	r28
    1f9c:	c8 2f       	mov	r28, r24
  *u8g_get_avr_io_ptr(u8g_avr_ddr_P, internal_pin_number>>3) |= _BV(internal_pin_number&7);
    1f9e:	68 2f       	mov	r22, r24
    1fa0:	66 95       	lsr	r22
    1fa2:	66 95       	lsr	r22
    1fa4:	66 95       	lsr	r22
    1fa6:	8b e3       	ldi	r24, 0x3B	; 59
    1fa8:	98 e1       	ldi	r25, 0x18	; 24
    1faa:	da df       	rcall	.-76     	; 0x1f60 <u8g_get_avr_io_ptr>
    1fac:	fc 01       	movw	r30, r24
    1fae:	40 81       	ld	r20, Z
    1fb0:	c7 70       	andi	r28, 0x07	; 7
    1fb2:	21 e0       	ldi	r18, 0x01	; 1
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	01 c0       	rjmp	.+2      	; 0x1fba <u8g_SetPinOutput+0x20>
    1fb8:	22 0f       	add	r18, r18
    1fba:	ca 95       	dec	r28
    1fbc:	ea f7       	brpl	.-6      	; 0x1fb8 <u8g_SetPinOutput+0x1e>
    1fbe:	24 2b       	or	r18, r20
    1fc0:	20 83       	st	Z, r18
    1fc2:	cf 91       	pop	r28
}
    1fc4:	08 95       	ret

00001fc6 <u8g_SetPinLevel>:
    1fc6:	cf 93       	push	r28
{
  *u8g_get_avr_io_ptr(u8g_avr_ddr_P, internal_pin_number>>3) &= ~_BV(internal_pin_number&7);
}

void u8g_SetPinLevel(uint8_t internal_pin_number, uint8_t level)
{
    1fc8:	df 93       	push	r29
    1fca:	c8 2f       	mov	r28, r24
    1fcc:	d6 2f       	mov	r29, r22
  volatile uint8_t * tmp = u8g_get_avr_io_ptr(u8g_avr_port_P, internal_pin_number>>3);
    1fce:	68 2f       	mov	r22, r24
    1fd0:	66 95       	lsr	r22
    1fd2:	66 95       	lsr	r22
    1fd4:	66 95       	lsr	r22
    1fd6:	8f e2       	ldi	r24, 0x2F	; 47
    1fd8:	98 e1       	ldi	r25, 0x18	; 24
    1fda:	c2 df       	rcall	.-124    	; 0x1f60 <u8g_get_avr_io_ptr>
    1fdc:	fc 01       	movw	r30, r24
    1fde:	c7 70       	andi	r28, 0x07	; 7
    1fe0:	8f b7       	in	r24, 0x3f	; 63
  
  if ( level == 0 )
  {
    U8G_ATOMIC_AND(tmp, ~_BV(internal_pin_number&7));
    1fe2:	d1 11       	cpse	r29, r1

void u8g_SetPinLevel(uint8_t internal_pin_number, uint8_t level)
{
  volatile uint8_t * tmp = u8g_get_avr_io_ptr(u8g_avr_port_P, internal_pin_number>>3);
  
  if ( level == 0 )
    1fe4:	0c c0       	rjmp	.+24     	; 0x1ffe <u8g_SetPinLevel+0x38>
    1fe6:	f8 94       	cli
  {
    U8G_ATOMIC_AND(tmp, ~_BV(internal_pin_number&7));
    1fe8:	90 81       	ld	r25, Z
    1fea:	21 e0       	ldi	r18, 0x01	; 1
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	0c 2e       	mov	r0, r28
    1ff0:	01 c0       	rjmp	.+2      	; 0x1ff4 <u8g_SetPinLevel+0x2e>
    1ff2:	22 0f       	add	r18, r18
    1ff4:	0a 94       	dec	r0
    1ff6:	ea f7       	brpl	.-6      	; 0x1ff2 <u8g_SetPinLevel+0x2c>
    1ff8:	20 95       	com	r18
    1ffa:	29 23       	and	r18, r25
    1ffc:	09 c0       	rjmp	.+18     	; 0x2010 <u8g_SetPinLevel+0x4a>
    1ffe:	f8 94       	cli
   // *tmp &= ~_BV(internal_pin_number&7);
  }
  else
  {
    U8G_ATOMIC_OR(tmp, _BV(internal_pin_number&7));
    2000:	90 81       	ld	r25, Z
    2002:	21 e0       	ldi	r18, 0x01	; 1
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	01 c0       	rjmp	.+2      	; 0x200a <u8g_SetPinLevel+0x44>
    2008:	22 0f       	add	r18, r18
    200a:	ca 95       	dec	r28
    200c:	ea f7       	brpl	.-6      	; 0x2008 <u8g_SetPinLevel+0x42>
    200e:	29 2b       	or	r18, r25
    2010:	20 83       	st	Z, r18
    2012:	8f bf       	out	0x3f, r24	; 63
    2014:	df 91       	pop	r29
    //*tmp |= _BV(internal_pin_number&7);
  }
  
}
    2016:	cf 91       	pop	r28
    2018:	08 95       	ret

0000201a <u8g_SetPIOutput>:
    201a:	86 0f       	add	r24, r22
#if defined(U8G_WITH_PINLIST)

void u8g_SetPIOutput(u8g_t *u8g, uint8_t pi)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    201c:	91 1d       	adc	r25, r1
    201e:	fc 01       	movw	r30, r24
    2020:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    2022:	8f 3f       	cpi	r24, 0xFF	; 255
    2024:	09 f0       	breq	.+2      	; 0x2028 <u8g_SetPIOutput+0xe>
    u8g_SetPinOutput(pin);
    2026:	b9 cf       	rjmp	.-142    	; 0x1f9a <u8g_SetPinOutput>
    2028:	08 95       	ret

0000202a <u8g_SetPILevel>:
    202a:	86 0f       	add	r24, r22
}

void u8g_SetPILevel(u8g_t *u8g, uint8_t pi, uint8_t level)
{
  uint8_t pin;
  pin = u8g->pin_list[pi];
    202c:	91 1d       	adc	r25, r1
    202e:	fc 01       	movw	r30, r24
    2030:	83 a1       	ldd	r24, Z+35	; 0x23
  if ( pin != U8G_PIN_NONE )
    2032:	8f 3f       	cpi	r24, 0xFF	; 255
    2034:	11 f0       	breq	.+4      	; 0x203a <u8g_SetPILevel+0x10>
    u8g_SetPinLevel(pin, level);
    2036:	64 2f       	mov	r22, r20
    2038:	c6 cf       	rjmp	.-116    	; 0x1fc6 <u8g_SetPinLevel>
    203a:	08 95       	ret

0000203c <u8g_dev_sh1106_128x64_fn>:
    203c:	af 92       	push	r10
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
    203e:	bf 92       	push	r11
    2040:	cf 92       	push	r12
    2042:	df 92       	push	r13
    2044:	ff 92       	push	r15
    2046:	0f 93       	push	r16
    2048:	1f 93       	push	r17
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	8c 01       	movw	r16, r24
    2050:	eb 01       	movw	r28, r22
    2052:	f4 2e       	mov	r15, r20
    2054:	69 01       	movw	r12, r18
  switch(msg)
    2056:	80 e1       	ldi	r24, 0x10	; 16
    2058:	48 17       	cp	r20, r24
    205a:	79 f1       	breq	.+94     	; 0x20ba <u8g_dev_sh1106_128x64_fn+0x7e>
    205c:	84 17       	cp	r24, r20
    205e:	60 f0       	brcs	.+24     	; 0x2078 <u8g_dev_sh1106_128x64_fn+0x3c>
    2060:	ea e0       	ldi	r30, 0x0A	; 10
    2062:	4e 13       	cpse	r20, r30
    2064:	34 c0       	rjmp	.+104    	; 0x20ce <u8g_dev_sh1106_128x64_fn+0x92>
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
    2066:	42 e0       	ldi	r20, 0x02	; 2
    2068:	c8 01       	movw	r24, r16
    206a:	ce dc       	rcall	.-1636   	; 0x1a08 <u8g_InitCom>
    206c:	43 e6       	ldi	r20, 0x63	; 99
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
    206e:	58 e1       	ldi	r21, 0x18	; 24
    2070:	be 01       	movw	r22, r28
    2072:	c8 01       	movw	r24, r16
    2074:	08 dd       	rcall	.-1520   	; 0x1a86 <u8g_WriteEscSeqP>
    2076:	2b c0       	rjmp	.+86     	; 0x20ce <u8g_dev_sh1106_128x64_fn+0x92>
    2078:	f1 e1       	ldi	r31, 0x11	; 17
      break;
    207a:	4f 17       	cp	r20, r31
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  switch(msg)
    207c:	09 f1       	breq	.+66     	; 0x20c0 <u8g_dev_sh1106_128x64_fn+0x84>
    207e:	85 e1       	ldi	r24, 0x15	; 21
    2080:	48 13       	cpse	r20, r24
    2082:	25 c0       	rjmp	.+74     	; 0x20ce <u8g_dev_sh1106_128x64_fn+0x92>
    2084:	aa 80       	ldd	r10, Y+2	; 0x02
    2086:	bb 80       	ldd	r11, Y+3	; 0x03
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
    2088:	4b e5       	ldi	r20, 0x5B	; 91
    208a:	58 e1       	ldi	r21, 0x18	; 24
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
    208c:	c8 01       	movw	r24, r16
    208e:	fb dc       	rcall	.-1546   	; 0x1a86 <u8g_WriteEscSeqP>
    2090:	f5 01       	movw	r30, r10
    2092:	44 81       	ldd	r20, Z+4	; 0x04
    2094:	40 6b       	ori	r20, 0xB0	; 176
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
    2096:	be 01       	movw	r22, r28
    2098:	c8 01       	movw	r24, r16
    209a:	e5 dc       	rcall	.-1590   	; 0x1a66 <u8g_WriteByte>
    209c:	41 e0       	ldi	r20, 0x01	; 1
    209e:	be 01       	movw	r22, r28
    20a0:	c8 01       	movw	r24, r16
    20a2:	d8 dc       	rcall	.-1616   	; 0x1a54 <u8g_SetAddress>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
    20a4:	ae 01       	movw	r20, r28
    20a6:	b8 01       	movw	r22, r16
    20a8:	c5 01       	movw	r24, r10
    20aa:	a7 dc       	rcall	.-1714   	; 0x19fa <u8g_pb_WriteBuffer>
    20ac:	88 23       	and	r24, r24
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
    20ae:	e9 f0       	breq	.+58     	; 0x20ea <u8g_dev_sh1106_128x64_fn+0xae>
    20b0:	40 e0       	ldi	r20, 0x00	; 0
    20b2:	be 01       	movw	r22, r28
    20b4:	c8 01       	movw	r24, r16
    20b6:	b1 dc       	rcall	.-1694   	; 0x1a1a <u8g_SetChipSelect>
    20b8:	0a c0       	rjmp	.+20     	; 0x20ce <u8g_dev_sh1106_128x64_fn+0x92>
    20ba:	42 e5       	ldi	r20, 0x52	; 82
          return 0;
        u8g_SetChipSelect(u8g, dev, 0);
    20bc:	58 e1       	ldi	r21, 0x18	; 24
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <u8g_dev_sh1106_128x64_fn+0x88>
    20c0:	47 e4       	ldi	r20, 0x47	; 71
    20c2:	58 e1       	ldi	r21, 0x18	; 24
    20c4:	be 01       	movw	r22, r28
      }
      break;
    20c6:	c8 01       	movw	r24, r16
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
    20c8:	de dc       	rcall	.-1604   	; 0x1a86 <u8g_WriteEscSeqP>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	0e c0       	rjmp	.+28     	; 0x20ea <u8g_dev_sh1106_128x64_fn+0xae>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
    20ce:	96 01       	movw	r18, r12
    20d0:	4f 2d       	mov	r20, r15
    20d2:	be 01       	movw	r22, r28
    20d4:	c8 01       	movw	r24, r16
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
      return 1;
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    20de:	ff 90       	pop	r15
    20e0:	df 90       	pop	r13
    20e2:	cf 90       	pop	r12
    20e4:	bf 90       	pop	r11
}
    20e6:	af 90       	pop	r10
    20e8:	fc ce       	rjmp	.-520    	; 0x1ee2 <u8g_dev_pb8v1_base_fn>
    20ea:	df 91       	pop	r29
    20ec:	cf 91       	pop	r28
    20ee:	1f 91       	pop	r17
    20f0:	0f 91       	pop	r16
    20f2:	ff 90       	pop	r15
    20f4:	df 90       	pop	r13
    20f6:	cf 90       	pop	r12
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
    20f8:	bf 90       	pop	r11
    20fa:	af 90       	pop	r10
}
    20fc:	08 95       	ret

000020fe <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    20fe:	fc 01       	movw	r30, r24
    2100:	e6 0f       	add	r30, r22
    2102:	f1 1d       	adc	r31, r1
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    2104:	84 91       	lpm	r24, Z
    2106:	90 e0       	ldi	r25, 0x00	; 0
    font++;
    pos <<= 8;
    2108:	98 2f       	mov	r25, r24
    210a:	88 27       	eor	r24, r24
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
    font++;
    210c:	31 96       	adiw	r30, 0x01	; 1
    pos <<= 8;
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
    210e:	e4 91       	lpm	r30, Z
    return pos;
}
    2110:	8e 0f       	add	r24, r30
    2112:	91 1d       	adc	r25, r1
    2114:	08 95       	ret

00002116 <u8g_font_GetFormat>:
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    2116:	fc 01       	movw	r30, r24
    2118:	84 91       	lpm	r24, Z

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
  return u8g_font_get_byte(font, 0);
}
    211a:	08 95       	ret

0000211c <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
  switch(u8g_font_GetFormat(font))
    211c:	fc df       	rcall	.-8      	; 0x2116 <u8g_font_GetFormat>
    211e:	88 23       	and	r24, r24
    2120:	21 f0       	breq	.+8      	; 0x212a <u8g_font_GetFontGlyphStructureSize+0xe>
    2122:	82 30       	cpi	r24, 0x02	; 2
    2124:	11 f0       	breq	.+4      	; 0x212a <u8g_font_GetFontGlyphStructureSize+0xe>
    2126:	83 e0       	ldi	r24, 0x03	; 3
  {
    case 0: return 6;
    case 1: return 3;
    2128:	08 95       	ret
    212a:	86 e0       	ldi	r24, 0x06	; 6
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
  switch(u8g_font_GetFormat(font))
  {
    case 0: return 6;
    212c:	08 95       	ret

0000212e <u8g_font_calc_vref_font>:
    case 1: return 3;
    case 2: return 6;
  }
  return 3;
}
    212e:	80 e0       	ldi	r24, 0x00	; 0
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
    2130:	08 95       	ret

00002132 <u8g_font_GetCapitalAHeight>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    2132:	05 96       	adiw	r24, 0x05	; 5
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    2134:	fc 01       	movw	r30, r24
    2136:	84 91       	lpm	r24, Z
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
  return u8g_font_get_byte(font, 5);
}
    2138:	08 95       	ret

0000213a <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
    return u8g_font_get_word(font, 6);
    213a:	66 e0       	ldi	r22, 0x06	; 6
    213c:	e0 cf       	rjmp	.-64     	; 0x20fe <u8g_font_get_word>

0000213e <u8g_font_GetEncoding97Pos>:
    213e:	68 e0       	ldi	r22, 0x08	; 8
}

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
    return u8g_font_get_word(font, 8);
    2140:	de cf       	rjmp	.-68     	; 0x20fe <u8g_font_get_word>

00002142 <u8g_font_GetFontStartEncoding>:
    2142:	0a 96       	adiw	r24, 0x0a	; 10
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    2144:	fc 01       	movw	r30, r24
    2146:	84 91       	lpm	r24, Z
}

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
  return u8g_font_get_byte(font, 10);
}
    2148:	08 95       	ret

0000214a <u8g_font_GetFontEndEncoding>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    214a:	0b 96       	adiw	r24, 0x0b	; 11
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    214c:	fc 01       	movw	r30, r24
    214e:	84 91       	lpm	r24, Z
}

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
  return u8g_font_get_byte(font, 11);
}
    2150:	08 95       	ret

00002152 <u8g_font_GetLowerGDescent>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    2152:	0c 96       	adiw	r24, 0x0c	; 12
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    2154:	fc 01       	movw	r30, r24
    2156:	84 91       	lpm	r24, Z
}

int8_t u8g_font_GetLowerGDescent(const void *font)
{
  return u8g_font_get_byte(font, 12);
}
    2158:	08 95       	ret

0000215a <u8g_font_GetFontAscent>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    215a:	0d 96       	adiw	r24, 0x0d	; 13
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    215c:	fc 01       	movw	r30, r24
    215e:	84 91       	lpm	r24, Z
}

int8_t u8g_font_GetFontAscent(const void *font)
{
  return u8g_font_get_byte(font, 13);
}
    2160:	08 95       	ret

00002162 <u8g_font_GetFontDescent>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    2162:	0e 96       	adiw	r24, 0x0e	; 14
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    2164:	fc 01       	movw	r30, r24
    2166:	84 91       	lpm	r24, Z
}

int8_t u8g_font_GetFontDescent(const void *font)
{
  return u8g_font_get_byte(font, 14);
}
    2168:	08 95       	ret

0000216a <u8g_font_GetFontXAscent>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    216a:	0f 96       	adiw	r24, 0x0f	; 15
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    216c:	fc 01       	movw	r30, r24
    216e:	84 91       	lpm	r24, Z
}

int8_t u8g_font_GetFontXAscent(const void *font)
{
  return u8g_font_get_byte(font, 15);
}
    2170:	08 95       	ret

00002172 <u8g_font_GetFontXDescent>:

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
  font += offset;
    2172:	40 96       	adiw	r24, 0x10	; 16
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
    2174:	fc 01       	movw	r30, r24
    2176:	84 91       	lpm	r24, Z
}

int8_t u8g_font_GetFontXDescent(const void *font)
{
  return u8g_font_get_byte(font, 16);
}
    2178:	08 95       	ret

0000217a <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
    217a:	bf 92       	push	r11
    217c:	cf 92       	push	r12
    217e:	df 92       	push	r13
    2180:	ef 92       	push	r14
    2182:	ff 92       	push	r15
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	8c 01       	movw	r16, r24
    218e:	e6 2e       	mov	r14, r22
  uint8_t *p = (uint8_t *)(u8g->font);
    2190:	dc 01       	movw	r26, r24
    2192:	14 96       	adiw	r26, 0x04	; 4
    2194:	cd 91       	ld	r28, X+
    2196:	dc 91       	ld	r29, X
    2198:	15 97       	sbiw	r26, 0x05	; 5
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
    219a:	ce 01       	movw	r24, r28
    219c:	bc df       	rcall	.-136    	; 0x2116 <u8g_font_GetFormat>
    219e:	f8 2e       	mov	r15, r24
    21a0:	f8 01       	movw	r30, r16
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
    21a2:	84 81       	ldd	r24, Z+4	; 0x04
    21a4:	95 81       	ldd	r25, Z+5	; 0x05
    21a6:	ba df       	rcall	.-140    	; 0x211c <u8g_font_GetFontGlyphStructureSize>
    21a8:	c8 2e       	mov	r12, r24
    21aa:	f1 e0       	ldi	r31, 0x01	; 1
    21ac:	ff 12       	cpse	r15, r31
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;

  if ( font_format == 1 )
    21ae:	03 c0       	rjmp	.+6      	; 0x21b6 <u8g_GetGlyph+0x3c>
    21b0:	2f e0       	ldi	r18, 0x0F	; 15
    21b2:	b2 2e       	mov	r11, r18
    mask = 15;
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <u8g_GetGlyph+0x40>
    21b6:	bb 24       	eor	r11, r11
    21b8:	ba 94       	dec	r11
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
    21ba:	d8 01       	movw	r26, r16
    21bc:	14 96       	adiw	r26, 0x04	; 4

  if ( font_format == 1 )
    mask = 15;
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
    21be:	8d 91       	ld	r24, X+
    21c0:	9c 91       	ld	r25, X
    21c2:	15 97       	sbiw	r26, 0x05	; 5
    21c4:	be df       	rcall	.-132    	; 0x2142 <u8g_font_GetFontStartEncoding>
    21c6:	f8 2e       	mov	r15, r24
    21c8:	f8 01       	movw	r30, r16
    21ca:	84 81       	ldd	r24, Z+4	; 0x04
    21cc:	95 81       	ldd	r25, Z+5	; 0x05
  end = u8g_font_GetFontEndEncoding(u8g->font);
    21ce:	bd df       	rcall	.-134    	; 0x214a <u8g_font_GetFontEndEncoding>
    21d0:	d8 2e       	mov	r13, r24
    21d2:	d8 01       	movw	r26, r16
    21d4:	14 96       	adiw	r26, 0x04	; 4
    21d6:	8d 91       	ld	r24, X+
    21d8:	9c 91       	ld	r25, X

  pos = u8g_font_GetEncoding97Pos(u8g->font);
    21da:	15 97       	sbiw	r26, 0x05	; 5
    21dc:	b0 df       	rcall	.-160    	; 0x213e <u8g_font_GetEncoding97Pos>
    21de:	b0 e6       	ldi	r27, 0x60	; 96
    21e0:	be 15       	cp	r27, r14
    21e2:	38 f4       	brcc	.+14     	; 0x21f2 <u8g_GetGlyph+0x78>
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	29 f0       	breq	.+10     	; 0x21f2 <u8g_GetGlyph+0x78>
  if ( requested_encoding >= 97 && pos > 0 )
    21e8:	c8 0f       	add	r28, r24
    21ea:	d9 1f       	adc	r29, r25
    21ec:	91 e6       	ldi	r25, 0x61	; 97
    21ee:	f9 2e       	mov	r15, r25
    21f0:	0f c0       	rjmp	.+30     	; 0x2210 <u8g_GetGlyph+0x96>
  {
    p+= pos;
    21f2:	f8 01       	movw	r30, r16
    21f4:	84 81       	ldd	r24, Z+4	; 0x04
    start = 97;
    21f6:	95 81       	ldd	r25, Z+5	; 0x05
    21f8:	a0 df       	rcall	.-192    	; 0x213a <u8g_font_GetEncoding65Pos>
    21fa:	f0 e4       	ldi	r31, 0x40	; 64
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
    21fc:	fe 15       	cp	r31, r14
    21fe:	38 f4       	brcc	.+14     	; 0x220e <u8g_GetGlyph+0x94>
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	29 f0       	breq	.+10     	; 0x220e <u8g_GetGlyph+0x94>
    2204:	c8 0f       	add	r28, r24
    if ( requested_encoding >= 65 && pos > 0 )
    2206:	d9 1f       	adc	r29, r25
    2208:	81 e4       	ldi	r24, 0x41	; 65
    220a:	f8 2e       	mov	r15, r24
    220c:	01 c0       	rjmp	.+2      	; 0x2210 <u8g_GetGlyph+0x96>
    220e:	61 96       	adiw	r28, 0x11	; 17
    {
      p+= pos;
    2210:	de 14       	cp	r13, r14
    2212:	90 f4       	brcc	.+36     	; 0x2238 <u8g_GetGlyph+0xbe>
      start = 65;
    2214:	d8 01       	movw	r26, r16
    2216:	50 96       	adiw	r26, 0x10	; 16
    2218:	1c 92       	st	X, r1
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
    221a:	50 97       	sbiw	r26, 0x10	; 16
  }
  
  if ( requested_encoding > end )
    221c:	53 96       	adiw	r26, 0x13	; 19
    221e:	1c 92       	st	X, r1
}

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
  u8g->glyph_dx = 0;
    2220:	53 97       	sbiw	r26, 0x13	; 19
    2222:	54 96       	adiw	r26, 0x14	; 20
    2224:	1c 92       	st	X, r1
    2226:	54 97       	sbiw	r26, 0x14	; 20
  u8g->glyph_width = 0;
    2228:	51 96       	adiw	r26, 0x11	; 17
    222a:	1c 92       	st	X, r1
    222c:	51 97       	sbiw	r26, 0x11	; 17
  u8g->glyph_height = 0;
    222e:	52 96       	adiw	r26, 0x12	; 18
    2230:	1c 92       	st	X, r1
    2232:	80 e0       	ldi	r24, 0x00	; 0
  u8g->glyph_x = 0;
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	66 c0       	rjmp	.+204    	; 0x2304 <u8g_GetGlyph+0x18a>
    2238:	df 14       	cp	r13, r15
  u8g->glyph_y = 0;
    223a:	60 f3       	brcs	.-40     	; 0x2214 <u8g_GetGlyph+0x9a>
    223c:	8c 2d       	mov	r24, r12
  }
  
  if ( requested_encoding > end )
  {
    u8g_FillEmptyGlyphCache(u8g);
    return NULL;                      /* not found */
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	fe 01       	movw	r30, r28
    2242:	24 91       	lpm	r18, Z
  }
  
  i = start;
  if ( i <= end )
    2244:	2f 3f       	cpi	r18, 0xFF	; 255
    2246:	11 f4       	brne	.+4      	; 0x224c <u8g_GetGlyph+0xd2>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
        p += data_structure_size;
    2248:	21 96       	adiw	r28, 0x01	; 1
    224a:	57 c0       	rjmp	.+174    	; 0x22fa <u8g_GetGlyph+0x180>
  i = start;
  if ( i <= end )
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
    224c:	fe 10       	cpse	r15, r14
    224e:	4c c0       	rjmp	.+152    	; 0x22e8 <u8g_GetGlyph+0x16e>
    2250:	d8 01       	movw	r26, r16
    2252:	14 96       	adiw	r26, 0x04	; 4
      {
        p += 1;
    2254:	8d 91       	ld	r24, X+
    2256:	9c 91       	ld	r25, X
      }
      else
      {
        if ( i == requested_encoding )
    2258:	15 97       	sbiw	r26, 0x05	; 5
    225a:	5d df       	rcall	.-326    	; 0x2116 <u8g_font_GetFormat>
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
    225c:	9e 01       	movw	r18, r28
    225e:	2f 5f       	subi	r18, 0xFF	; 255
    2260:	3f 4f       	sbci	r19, 0xFF	; 255
    2262:	fe 01       	movw	r30, r28
    2264:	88 23       	and	r24, r24
    2266:	11 f0       	breq	.+4      	; 0x226c <u8g_GetGlyph+0xf2>
    2268:	82 30       	cpi	r24, 0x02	; 2
    226a:	e1 f4       	brne	.+56     	; 0x22a4 <u8g_GetGlyph+0x12a>
    226c:	84 91       	lpm	r24, Z
    226e:	d8 01       	movw	r26, r16
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
    2270:	53 96       	adiw	r26, 0x13	; 19
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
    2272:	8c 93       	st	X, r24
    2274:	53 97       	sbiw	r26, 0x13	; 19
    2276:	f9 01       	movw	r30, r18
    2278:	24 91       	lpm	r18, Z
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
    227a:	54 96       	adiw	r26, 0x14	; 20
    227c:	2c 93       	st	X, r18
    227e:	54 97       	sbiw	r26, 0x14	; 20
    2280:	fe 01       	movw	r30, r28
    2282:	33 96       	adiw	r30, 0x03	; 3
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
    2284:	e4 91       	lpm	r30, Z
    2286:	50 96       	adiw	r26, 0x10	; 16
    2288:	ec 93       	st	X, r30
    228a:	50 97       	sbiw	r26, 0x10	; 16
    228c:	fe 01       	movw	r30, r28
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
    228e:	34 96       	adiw	r30, 0x04	; 4
    2290:	e4 91       	lpm	r30, Z
    2292:	51 96       	adiw	r26, 0x11	; 17
    2294:	ec 93       	st	X, r30
    2296:	51 97       	sbiw	r26, 0x11	; 17
    2298:	fe 01       	movw	r30, r28
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
    229a:	35 96       	adiw	r30, 0x05	; 5
    229c:	e4 91       	lpm	r30, Z
    229e:	52 96       	adiw	r26, 0x12	; 18
    22a0:	ec 93       	st	X, r30
    22a2:	20 c0       	rjmp	.+64     	; 0x22e4 <u8g_GetGlyph+0x16a>
    22a4:	84 91       	lpm	r24, Z
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
    22a6:	98 2f       	mov	r25, r24
    22a8:	9f 70       	andi	r25, 0x0F	; 15
    22aa:	92 50       	subi	r25, 0x02	; 2
    22ac:	d8 01       	movw	r26, r16
    22ae:	52 96       	adiw	r26, 0x12	; 18
    22b0:	9c 93       	st	X, r25
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
    22b2:	52 97       	sbiw	r26, 0x12	; 18
      u8g->glyph_y =  tmp & 15;
    22b4:	82 95       	swap	r24
    22b6:	8f 70       	andi	r24, 0x0F	; 15
      u8g->glyph_y-=2;
    22b8:	51 96       	adiw	r26, 0x11	; 17
    22ba:	8c 93       	st	X, r24
    22bc:	51 97       	sbiw	r26, 0x11	; 17
    22be:	f9 01       	movw	r30, r18
    22c0:	24 91       	lpm	r18, Z
      tmp >>= 4;
    22c2:	82 2f       	mov	r24, r18
    22c4:	8f 70       	andi	r24, 0x0F	; 15
      u8g->glyph_x =  tmp;
    22c6:	54 96       	adiw	r26, 0x14	; 20
    22c8:	8c 93       	st	X, r24
    22ca:	54 97       	sbiw	r26, 0x14	; 20
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
    22cc:	22 95       	swap	r18
    22ce:	2f 70       	andi	r18, 0x0F	; 15
      u8g->glyph_height =  tmp & 15;
    22d0:	53 96       	adiw	r26, 0x13	; 19
    22d2:	2c 93       	st	X, r18
    22d4:	53 97       	sbiw	r26, 0x13	; 19
    22d6:	fe 01       	movw	r30, r28
    22d8:	32 96       	adiw	r30, 0x02	; 2
      tmp >>= 4;
    22da:	e4 91       	lpm	r30, Z
    22dc:	e2 95       	swap	r30
      u8g->glyph_width =  tmp;
    22de:	ef 70       	andi	r30, 0x0F	; 15
    22e0:	50 96       	adiw	r26, 0x10	; 16
    22e2:	ec 93       	st	X, r30
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
    22e4:	ce 01       	movw	r24, r28
    22e6:	0e c0       	rjmp	.+28     	; 0x2304 <u8g_GetGlyph+0x18a>
    22e8:	fe 01       	movw	r30, r28
      tmp >>= 4;
    22ea:	32 96       	adiw	r30, 0x02	; 2
    22ec:	e4 91       	lpm	r30, Z
      u8g->glyph_dx = tmp;
    22ee:	eb 21       	and	r30, r11
    22f0:	9c 01       	movw	r18, r24
      else
      {
        if ( i == requested_encoding )
        {
          u8g_CopyGlyphDataToCache(u8g, p);
          return p;
    22f2:	2e 0f       	add	r18, r30
    22f4:	31 1d       	adc	r19, r1
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
    22f6:	c2 0f       	add	r28, r18
    22f8:	d3 1f       	adc	r29, r19
    22fa:	fd 14       	cp	r15, r13
    22fc:	09 f4       	brne	.+2      	; 0x2300 <u8g_GetGlyph+0x186>
    22fe:	8a cf       	rjmp	.-236    	; 0x2214 <u8g_GetGlyph+0x9a>
    2300:	f3 94       	inc	r15
    2302:	9e cf       	rjmp	.-196    	; 0x2240 <u8g_GetGlyph+0xc6>
        p += data_structure_size;
    2304:	df 91       	pop	r29
    2306:	cf 91       	pop	r28
      }
      if ( i == end )
    2308:	1f 91       	pop	r17
    230a:	0f 91       	pop	r16
    230c:	ff 90       	pop	r15
        break;
      i++;
    230e:	ef 90       	pop	r14
    }
    2310:	df 90       	pop	r13
  }
  
  u8g_FillEmptyGlyphCache(u8g);
    
  return NULL;
}
    2312:	cf 90       	pop	r12
    2314:	bf 90       	pop	r11
    2316:	08 95       	ret

00002318 <u8g_draw_glyph>:
    2318:	4f 92       	push	r4
    231a:	5f 92       	push	r5
    231c:	6f 92       	push	r6
    231e:	7f 92       	push	r7
    2320:	9f 92       	push	r9
    2322:	af 92       	push	r10
    2324:	bf 92       	push	r11
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
    2326:	cf 92       	push	r12
    2328:	df 92       	push	r13
    232a:	ef 92       	push	r14
    232c:	ff 92       	push	r15
    232e:	0f 93       	push	r16
    2330:	1f 93       	push	r17
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	1f 92       	push	r1
    2338:	cd b7       	in	r28, 0x3d	; 61
    233a:	de b7       	in	r29, 0x3e	; 62
    233c:	2c 01       	movw	r4, r24
    233e:	c6 2e       	mov	r12, r22
    2340:	94 2e       	mov	r9, r20
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
    2342:	62 2f       	mov	r22, r18
    2344:	1a df       	rcall	.-460    	; 0x217a <u8g_GetGlyph>
    2346:	7c 01       	movw	r14, r24
    2348:	00 97       	sbiw	r24, 0x00	; 0
    if ( g == NULL  )
    234a:	09 f4       	brne	.+2      	; 0x234e <u8g_draw_glyph+0x36>
    234c:	3a c0       	rjmp	.+116    	; 0x23c2 <u8g_draw_glyph+0xaa>
    234e:	f2 01       	movw	r30, r4


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
    2350:	84 81       	ldd	r24, Z+4	; 0x04
    2352:	95 81       	ldd	r25, Z+5	; 0x05
    2354:	e3 de       	rcall	.-570    	; 0x211c <u8g_font_GetFontGlyphStructureSize>
    2356:	b8 2e       	mov	r11, r24
    2358:	f2 01       	movw	r30, r4
    235a:	13 89       	ldd	r17, Z+19	; 0x13
    if ( g == NULL  )
      return 0;
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
  }
  
  w = u8g->glyph_width;
    235c:	04 89       	ldd	r16, Z+20	; 0x14
    235e:	81 89       	ldd	r24, Z+17	; 0x11
  h = u8g->glyph_height;
    2360:	c8 0e       	add	r12, r24
  
  x += u8g->glyph_x;
    2362:	82 89       	ldd	r24, Z+18	; 0x12
    2364:	98 1a       	sub	r9, r24
    2366:	d9 2c       	mov	r13, r9
    2368:	d0 1a       	sub	r13, r16
  y -= u8g->glyph_y;
  y--;
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    236a:	21 2f       	mov	r18, r17
    236c:	4d 2d       	mov	r20, r13
    236e:	6c 2d       	mov	r22, r12
    2370:	c2 01       	movw	r24, r4
    2372:	f1 db       	rcall	.-2078   	; 0x1b56 <u8g_IsBBXIntersection>
    2374:	88 23       	and	r24, r24
    2376:	11 f1       	breq	.+68     	; 0x23bc <u8g_draw_glyph+0xa4>
    2378:	eb 0c       	add	r14, r11
    237a:	f1 1c       	adc	r15, r1
    237c:	19 5f       	subi	r17, 0xF9	; 249


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
    237e:	16 95       	lsr	r17
    2380:	16 95       	lsr	r17
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
    return u8g->glyph_dx;

  /* now, w is reused as bytes per line */
  w += 7;
    2382:	16 95       	lsr	r17
  w /= 8;
    2384:	61 2e       	mov	r6, r17
    2386:	71 2c       	mov	r7, r1
    2388:	d9 14       	cp	r13, r9
    238a:	c1 f0       	breq	.+48     	; 0x23bc <u8g_draw_glyph+0xa4>
    238c:	3c 2d       	mov	r19, r12
  
  iy = y;
  iy -= h;
  iy++;

  for( j = 0; j < h; j++ )
    238e:	57 01       	movw	r10, r14
    2390:	8a 2d       	mov	r24, r10
    2392:	8e 19       	sub	r24, r14
    2394:	81 17       	cp	r24, r17
    2396:	70 f4       	brcc	.+28     	; 0x23b4 <u8g_draw_glyph+0x9c>
    2398:	f5 01       	movw	r30, r10
  {
    ix = x;
    for( i = 0; i < w; i++ )
    239a:	04 91       	lpm	r16, Z
    239c:	20 e0       	ldi	r18, 0x00	; 0
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
    239e:	4d 2d       	mov	r20, r13
    23a0:	63 2f       	mov	r22, r19
    23a2:	c2 01       	movw	r24, r4
    23a4:	39 83       	std	Y+1, r19	; 0x01
    23a6:	2a dd       	rcall	.-1452   	; 0x1dfc <u8g_Draw8Pixel>
    23a8:	ff ef       	ldi	r31, 0xFF	; 255
    23aa:	af 1a       	sub	r10, r31
    23ac:	bf 0a       	sbc	r11, r31
    23ae:	39 81       	ldd	r19, Y+1	; 0x01
      data++;
    23b0:	38 5f       	subi	r19, 0xF8	; 248
    23b2:	ee cf       	rjmp	.-36     	; 0x2390 <u8g_draw_glyph+0x78>
    23b4:	e6 0c       	add	r14, r6
      ix+=8;
    23b6:	f7 1c       	adc	r15, r7
    23b8:	d3 94       	inc	r13
    23ba:	e6 cf       	rjmp	.-52     	; 0x2388 <u8g_draw_glyph+0x70>
    23bc:	f2 01       	movw	r30, r4
    23be:	80 89       	ldd	r24, Z+16	; 0x10
    }
    iy++;
    23c0:	01 c0       	rjmp	.+2      	; 0x23c4 <u8g_draw_glyph+0xac>
    23c2:	80 e0       	ldi	r24, 0x00	; 0
  }
  return u8g->glyph_dx;
    23c4:	0f 90       	pop	r0
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
    if ( g == NULL  )
      return 0;
    23ca:	1f 91       	pop	r17
      ix+=8;
    }
    iy++;
  }
  return u8g->glyph_dx;
}
    23cc:	0f 91       	pop	r16
    23ce:	ff 90       	pop	r15
    23d0:	ef 90       	pop	r14
    23d2:	df 90       	pop	r13
    23d4:	cf 90       	pop	r12
    23d6:	bf 90       	pop	r11
    23d8:	af 90       	pop	r10
    23da:	9f 90       	pop	r9
    23dc:	7f 90       	pop	r7
    23de:	6f 90       	pop	r6
    23e0:	5f 90       	pop	r5
    23e2:	4f 90       	pop	r4
    23e4:	08 95       	ret

000023e6 <u8g_DrawStr>:
    23e6:	af 92       	push	r10
    23e8:	bf 92       	push	r11
    23ea:	df 92       	push	r13
    23ec:	ef 92       	push	r14
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
    23ee:	ff 92       	push	r15
    23f0:	0f 93       	push	r16
    23f2:	1f 93       	push	r17
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <u8g_DrawStr+0x14>
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	7c 01       	movw	r14, r24
    2400:	d6 2e       	mov	r13, r22
    2402:	04 2f       	mov	r16, r20
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
    2404:	dc 01       	movw	r26, r24
    2406:	55 96       	adiw	r26, 0x15	; 21
    2408:	ed 91       	ld	r30, X+
    240a:	fc 91       	ld	r31, X
    240c:	56 97       	sbiw	r26, 0x16	; 22
    240e:	29 83       	std	Y+1, r18	; 0x01
    2410:	3a 83       	std	Y+2, r19	; 0x02
    2412:	09 95       	icall
    2414:	08 0f       	add	r16, r24
    2416:	29 81       	ldd	r18, Y+1	; 0x01
    2418:	a2 2e       	mov	r10, r18
    241a:	3a 81       	ldd	r19, Y+2	; 0x02
    241c:	b3 2e       	mov	r11, r19
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
  u8g_uint_t t = 0;
    241e:	10 e0       	ldi	r17, 0x00	; 0
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
  
  while( *s != '\0' )
    2420:	f5 01       	movw	r30, r10
    2422:	21 91       	ld	r18, Z+
    2424:	5f 01       	movw	r10, r30
    2426:	22 23       	and	r18, r18
    2428:	39 f0       	breq	.+14     	; 0x2438 <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
    242a:	40 2f       	mov	r20, r16
    242c:	6d 2d       	mov	r22, r13
    242e:	c7 01       	movw	r24, r14
    2430:	73 df       	rcall	.-282    	; 0x2318 <u8g_draw_glyph>
    2432:	d8 0e       	add	r13, r24
    x += d;
    2434:	18 0f       	add	r17, r24
    t += d;
    2436:	f4 cf       	rjmp	.-24     	; 0x2420 <u8g_DrawStr+0x3a>
    2438:	81 2f       	mov	r24, r17
    s++;
  }
  return t;
}
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	df 90       	pop	r13
    244c:	bf 90       	pop	r11
    244e:	af 90       	pop	r10
    2450:	08 95       	ret

00002452 <u8g_UpdateRefHeight>:
    2452:	cf 93       	push	r28

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
    2454:	df 93       	push	r29
    2456:	ec 01       	movw	r28, r24
  uint16_t ls;
  if ( u8g->font == NULL )
    2458:	8c 81       	ldd	r24, Y+4	; 0x04
    245a:	9d 81       	ldd	r25, Y+5	; 0x05
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	61 f1       	breq	.+88     	; 0x24b8 <u8g_UpdateRefHeight+0x66>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
    2460:	2f 89       	ldd	r18, Y+23	; 0x17
    2462:	21 11       	cpse	r18, r1
    2464:	06 c0       	rjmp	.+12     	; 0x2472 <u8g_UpdateRefHeight+0x20>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
    2466:	65 de       	rcall	.-822    	; 0x2132 <u8g_font_GetCapitalAHeight>
    2468:	88 8f       	std	Y+24, r24	; 0x18
    246a:	8c 81       	ldd	r24, Y+4	; 0x04
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
    246c:	9d 81       	ldd	r25, Y+5	; 0x05
    246e:	71 de       	rcall	.-798    	; 0x2152 <u8g_font_GetLowerGDescent>
    2470:	0d c0       	rjmp	.+26     	; 0x248c <u8g_UpdateRefHeight+0x3a>
    2472:	21 30       	cpi	r18, 0x01	; 1
    2474:	31 f4       	brne	.+12     	; 0x2482 <u8g_UpdateRefHeight+0x30>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
    2476:	79 de       	rcall	.-782    	; 0x216a <u8g_font_GetFontXAscent>
    2478:	88 8f       	std	Y+24, r24	; 0x18
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
    247a:	8c 81       	ldd	r24, Y+4	; 0x04
    247c:	9d 81       	ldd	r25, Y+5	; 0x05
    247e:	79 de       	rcall	.-782    	; 0x2172 <u8g_font_GetFontXDescent>
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
    2480:	05 c0       	rjmp	.+10     	; 0x248c <u8g_UpdateRefHeight+0x3a>
    2482:	6b de       	rcall	.-810    	; 0x215a <u8g_font_GetFontAscent>
    2484:	88 8f       	std	Y+24, r24	; 0x18
    2486:	8c 81       	ldd	r24, Y+4	; 0x04
    2488:	9d 81       	ldd	r25, Y+5	; 0x05
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
    248a:	6b de       	rcall	.-810    	; 0x2162 <u8g_font_GetFontDescent>
    248c:	89 8f       	std	Y+25, r24	; 0x19
    248e:	88 8d       	ldd	r24, Y+24	; 0x18
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
    2490:	99 27       	eor	r25, r25
    2492:	87 fd       	sbrc	r24, 7
    2494:	90 95       	com	r25
    2496:	29 8d       	ldd	r18, Y+25	; 0x19
    2498:	82 1b       	sub	r24, r18
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
    249a:	91 09       	sbc	r25, r1
    249c:	27 fd       	sbrc	r18, 7
    249e:	93 95       	inc	r25
    24a0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    24a2:	20 34       	cpi	r18, 0x40	; 64
    24a4:	41 f0       	breq	.+16     	; 0x24b6 <u8g_UpdateRefHeight+0x64>
    24a6:	82 9f       	mul	r24, r18
    24a8:	c0 01       	movw	r24, r0
    24aa:	11 24       	eor	r1, r1
  if ( u8g->font_line_spacing_factor != 64 )
    24ac:	26 e0       	ldi	r18, 0x06	; 6
    24ae:	96 95       	lsr	r25
    24b0:	87 95       	ror	r24
  {
    ls &= 255;
    ls *= u8g->font_line_spacing_factor;
    24b2:	2a 95       	dec	r18
    24b4:	e1 f7       	brne	.-8      	; 0x24ae <u8g_UpdateRefHeight+0x5c>
    24b6:	8b 8f       	std	Y+27, r24	; 0x1b
    ls >>= 6;
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	08 95       	ret

000024be <u8g_SetFontPosBaseline>:
    24be:	27 e9       	ldi	r18, 0x97	; 151
    24c0:	30 e1       	ldi	r19, 0x10	; 16
  }
  u8g->line_spacing = ls;
    24c2:	fc 01       	movw	r30, r24
}
    24c4:	36 8b       	std	Z+22, r19	; 0x16
    24c6:	25 8b       	std	Z+21, r18	; 0x15
    24c8:	08 95       	ret

000024ca <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
  if ( u8g->font != font )
    24ce:	fc 01       	movw	r30, r24
    24d0:	24 81       	ldd	r18, Z+4	; 0x04
    24d2:	35 81       	ldd	r19, Z+5	; 0x05
    24d4:	26 17       	cp	r18, r22
    24d6:	37 07       	cpc	r19, r23
    24d8:	41 f0       	breq	.+16     	; 0x24ea <u8g_SetFont+0x20>
    24da:	ec 01       	movw	r28, r24
  {
    u8g->font = font;
    24dc:	75 83       	std	Z+5, r23	; 0x05
    24de:	64 83       	std	Z+4, r22	; 0x04
    u8g_UpdateRefHeight(u8g);
    24e0:	b8 df       	rcall	.-144    	; 0x2452 <u8g_UpdateRefHeight>
    24e2:	87 e9       	ldi	r24, 0x97	; 151
  return 0;
}

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
    24e4:	90 e1       	ldi	r25, 0x10	; 16
    24e6:	9e 8b       	std	Y+22, r25	; 0x16
    24e8:	8d 8b       	std	Y+21, r24	; 0x15
    24ea:	df 91       	pop	r29
  {
    u8g->font = font;
    u8g_UpdateRefHeight(u8g);
    u8g_SetFontPosBaseline(u8g);
  }
}
    24ec:	cf 91       	pop	r28
    24ee:	08 95       	ret

000024f0 <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
    24f0:	fc 01       	movw	r30, r24
  p->page_y0 = 0;
    24f2:	12 82       	std	Z+2, r1	; 0x02
  p->page_y1 = p->page_height;
  p->page_y1--;
    24f4:	80 81       	ld	r24, Z
    24f6:	81 50       	subi	r24, 0x01	; 1
    24f8:	83 83       	std	Z+3, r24	; 0x03
  p->page = 0;
    24fa:	14 82       	std	Z+4, r1	; 0x04
    24fc:	08 95       	ret

000024fe <u8g_page_Next>:
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
    24fe:	fc 01       	movw	r30, r24
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
    2500:	80 81       	ld	r24, Z
    2502:	92 81       	ldd	r25, Z+2	; 0x02
    2504:	98 0f       	add	r25, r24
    2506:	92 83       	std	Z+2, r25	; 0x02
  if ( p->page_y0 >= p->total_height )
    2508:	21 81       	ldd	r18, Z+1	; 0x01
    250a:	92 17       	cp	r25, r18
    250c:	60 f4       	brcc	.+24     	; 0x2526 <u8g_page_Next+0x28>
    return 0;
  p->page++;
    250e:	94 81       	ldd	r25, Z+4	; 0x04
    2510:	9f 5f       	subi	r25, 0xFF	; 255
    2512:	94 83       	std	Z+4, r25	; 0x04
  y1 = p->page_y1;
    2514:	93 81       	ldd	r25, Z+3	; 0x03
  y1 += p->page_height;
    2516:	89 0f       	add	r24, r25
  if ( y1 >= p->total_height )
    2518:	82 17       	cp	r24, r18
    251a:	10 f0       	brcs	.+4      	; 0x2520 <u8g_page_Next+0x22>
  {
    y1 = p->total_height;
    y1--;
    251c:	8f ef       	ldi	r24, 0xFF	; 255
    251e:	82 0f       	add	r24, r18
  }
  p->page_y1 = y1;
    2520:	83 83       	std	Z+3, r24	; 0x03
  
  return 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	08 95       	ret
uint8_t u8g_page_Next(u8g_page_t * p)
{
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
  if ( p->page_y0 >= p->total_height )
    return 0;
    2526:	80 e0       	ldi	r24, 0x00	; 0
    y1--;
  }
  p->page_y1 = y1;
  
  return 1;
}
    2528:	08 95       	ret

0000252a <u8g_atmega_sw_spi_shift_out>:

#if defined(__AVR__)

static void u8g_atmega_sw_spi_shift_out(u8g_t *u8g, uint8_t val) U8G_NOINLINE;
static void u8g_atmega_sw_spi_shift_out(u8g_t *u8g, uint8_t val)
{
    252a:	0f 93       	push	r16
    252c:	1f 93       	push	r17
    252e:	cf 93       	push	r28
    2530:	df 93       	push	r29
    2532:	8c 01       	movw	r16, r24
    2534:	d6 2f       	mov	r29, r22
    2536:	c8 e0       	ldi	r28, 0x08	; 8
  uint8_t i = 8;
  do
  {
    u8g_SetPILevel(u8g, U8G_PI_MOSI, val & 128 );
    2538:	4d 2f       	mov	r20, r29
    253a:	40 78       	andi	r20, 0x80	; 128
    253c:	65 e0       	ldi	r22, 0x05	; 5
    253e:	c8 01       	movw	r24, r16
    2540:	74 dd       	rcall	.-1304   	; 0x202a <u8g_SetPILevel>
    2542:	dd 0f       	add	r29, r29
    val <<= 1;
    2544:	41 e0       	ldi	r20, 0x01	; 1
    u8g_SetPILevel(u8g, U8G_PI_SCK, 1 );
    2546:	64 e0       	ldi	r22, 0x04	; 4
    2548:	c8 01       	movw	r24, r16
    254a:	6f dd       	rcall	.-1314   	; 0x202a <u8g_SetPILevel>
    254c:	ff da       	rcall	.-2562   	; 0x1b4c <u8g_MicroDelay>
    254e:	40 e0       	ldi	r20, 0x00	; 0
    u8g_MicroDelay();		/* 15 Aug 2012: added for high speed uC */
    2550:	64 e0       	ldi	r22, 0x04	; 4
    2552:	c8 01       	movw	r24, r16
    u8g_SetPILevel(u8g, U8G_PI_SCK, 0 );
    2554:	6a dd       	rcall	.-1324   	; 0x202a <u8g_SetPILevel>
    2556:	fa da       	rcall	.-2572   	; 0x1b4c <u8g_MicroDelay>
    2558:	c1 50       	subi	r28, 0x01	; 1
    255a:	71 f7       	brne	.-36     	; 0x2538 <u8g_atmega_sw_spi_shift_out+0xe>
    255c:	df 91       	pop	r29
    u8g_MicroDelay();		/* 15 Aug 2012: added for high speed uC */
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    i--;
  } while( i != 0 );
    2564:	08 95       	ret

00002566 <u8g_com_atmega_sw_spi_fn>:
}
    2566:	ef 92       	push	r14
    2568:	ff 92       	push	r15
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
    256e:	cf 93       	push	r28

uint8_t u8g_com_atmega_sw_spi_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
    2570:	df 93       	push	r29
    2572:	1f 92       	push	r1
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	7c 01       	movw	r14, r24
    257a:	89 01       	movw	r16, r18
  switch(msg)
    257c:	86 2f       	mov	r24, r22
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	fc 01       	movw	r30, r24
    2582:	31 97       	sbiw	r30, 0x01	; 1
    2584:	e7 30       	cpi	r30, 0x07	; 7
    2586:	f1 05       	cpc	r31, r1
    2588:	08 f0       	brcs	.+2      	; 0x258c <u8g_com_atmega_sw_spi_fn+0x26>
    258a:	4c c0       	rjmp	.+152    	; 0x2624 <u8g_com_atmega_sw_spi_fn+0xbe>
    258c:	ea 5a       	subi	r30, 0xAA	; 170
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	0c 94 5e 35 	jmp	0x6abc	; 0x6abc <__tablejump2__>
  {
    case U8G_COM_MSG_INIT:
      u8g_SetPIOutput(u8g, U8G_PI_SCK);
    2594:	64 e0       	ldi	r22, 0x04	; 4
    2596:	c7 01       	movw	r24, r14
    2598:	40 dd       	rcall	.-1408   	; 0x201a <u8g_SetPIOutput>
    259a:	65 e0       	ldi	r22, 0x05	; 5
      u8g_SetPIOutput(u8g, U8G_PI_MOSI);
    259c:	c7 01       	movw	r24, r14
    259e:	3d dd       	rcall	.-1414   	; 0x201a <u8g_SetPIOutput>
    25a0:	61 e0       	ldi	r22, 0x01	; 1
    25a2:	c7 01       	movw	r24, r14
      u8g_SetPIOutput(u8g, U8G_PI_A0);
    25a4:	3a dd       	rcall	.-1420   	; 0x201a <u8g_SetPIOutput>
    25a6:	62 e0       	ldi	r22, 0x02	; 2
    25a8:	c7 01       	movw	r24, r14
    25aa:	37 dd       	rcall	.-1426   	; 0x201a <u8g_SetPIOutput>
      u8g_SetPIOutput(u8g, U8G_PI_CS);
    25ac:	60 e0       	ldi	r22, 0x00	; 0
    25ae:	c7 01       	movw	r24, r14
    25b0:	34 dd       	rcall	.-1432   	; 0x201a <u8g_SetPIOutput>
    25b2:	40 e0       	ldi	r20, 0x00	; 0
      u8g_SetPIOutput(u8g, U8G_PI_RESET);
    25b4:	64 e0       	ldi	r22, 0x04	; 4
    25b6:	c7 01       	movw	r24, r14
    25b8:	38 dd       	rcall	.-1424   	; 0x202a <u8g_SetPILevel>
    25ba:	40 e0       	ldi	r20, 0x00	; 0
      
      u8g_SetPILevel(u8g, U8G_PI_SCK, 0 );
    25bc:	65 e0       	ldi	r22, 0x05	; 5
    25be:	c7 01       	movw	r24, r14
    25c0:	34 dd       	rcall	.-1432   	; 0x202a <u8g_SetPILevel>
    25c2:	41 e0       	ldi	r20, 0x01	; 1
    25c4:	62 e0       	ldi	r22, 0x02	; 2
      u8g_SetPILevel(u8g, U8G_PI_MOSI, 0 );
    25c6:	c7 01       	movw	r24, r14
    25c8:	30 dd       	rcall	.-1440   	; 0x202a <u8g_SetPILevel>
    25ca:	40 e0       	ldi	r20, 0x00	; 0
    25cc:	61 e0       	ldi	r22, 0x01	; 1
    25ce:	04 c0       	rjmp	.+8      	; 0x25d8 <u8g_com_atmega_sw_spi_fn+0x72>
      u8g_SetPILevel(u8g, U8G_PI_CS, 1 );
    25d0:	41 11       	cpse	r20, r1
    25d2:	05 c0       	rjmp	.+10     	; 0x25de <u8g_com_atmega_sw_spi_fn+0x78>
    25d4:	41 e0       	ldi	r20, 0x01	; 1
    25d6:	62 e0       	ldi	r22, 0x02	; 2
    25d8:	c7 01       	movw	r24, r14
      u8g_SetPILevel(u8g, U8G_PI_A0, 0);
    25da:	27 dd       	rcall	.-1458   	; 0x202a <u8g_SetPILevel>
    
    case U8G_COM_MSG_STOP:
      break;

    case U8G_COM_MSG_ADDRESS:                     /* define cmd (arg_val = 0) or data mode (arg_val = 1) */
      u8g_SetPILevel(u8g, U8G_PI_A0, arg_val);
    25dc:	23 c0       	rjmp	.+70     	; 0x2624 <u8g_com_atmega_sw_spi_fn+0xbe>
    25de:	40 e0       	ldi	r20, 0x00	; 0
      break;

    case U8G_COM_MSG_CHIP_SELECT:
      
      if ( arg_val == 0 )
    25e0:	64 e0       	ldi	r22, 0x04	; 4
    25e2:	c7 01       	movw	r24, r14
      {
        /* disable */
        u8g_SetPILevel(u8g, U8G_PI_CS, 1);
    25e4:	22 dd       	rcall	.-1468   	; 0x202a <u8g_SetPILevel>
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	f6 cf       	rjmp	.-20     	; 0x25d6 <u8g_com_atmega_sw_spi_fn+0x70>
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	f5 cf       	rjmp	.-22     	; 0x25d8 <u8g_com_atmega_sw_spi_fn+0x72>
    25ee:	64 2f       	mov	r22, r20
      }
      else
      {
        u8g_SetPILevel(u8g, U8G_PI_SCK, 0 );
    25f0:	c7 01       	movw	r24, r14
    25f2:	9b df       	rcall	.-202    	; 0x252a <u8g_atmega_sw_spi_shift_out>
    25f4:	17 c0       	rjmp	.+46     	; 0x2624 <u8g_com_atmega_sw_spi_fn+0xbe>
    25f6:	44 23       	and	r20, r20
    25f8:	a9 f0       	breq	.+42     	; 0x2624 <u8g_com_atmega_sw_spi_fn+0xbe>
        /* enable */
        u8g_SetPILevel(u8g, U8G_PI_CS, 0); /* CS = 0 (low active) */
    25fa:	f8 01       	movw	r30, r16
    25fc:	61 91       	ld	r22, Z+
      }
      break;
      
    case U8G_COM_MSG_RESET:
      u8g_SetPILevel(u8g, U8G_PI_RESET, arg_val);
    25fe:	8f 01       	movw	r16, r30
    2600:	c7 01       	movw	r24, r14
      break;
    

    case U8G_COM_MSG_WRITE_BYTE:
      u8g_atmega_sw_spi_shift_out(u8g, arg_val);
    2602:	49 83       	std	Y+1, r20	; 0x01
    2604:	92 df       	rcall	.-220    	; 0x252a <u8g_atmega_sw_spi_shift_out>
    2606:	49 81       	ldd	r20, Y+1	; 0x01
    2608:	41 50       	subi	r20, 0x01	; 1
      break;
    260a:	f5 cf       	rjmp	.-22     	; 0x25f6 <u8g_com_atmega_sw_spi_fn+0x90>
    
    case U8G_COM_MSG_WRITE_SEQ:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    260c:	44 23       	and	r20, r20
    260e:	51 f0       	breq	.+20     	; 0x2624 <u8g_com_atmega_sw_spi_fn+0xbe>
        {
          u8g_atmega_sw_spi_shift_out(u8g, *ptr++);
    2610:	f8 01       	movw	r30, r16
    2612:	64 91       	lpm	r22, Z
    2614:	c7 01       	movw	r24, r14
    2616:	49 83       	std	Y+1, r20	; 0x01
    2618:	88 df       	rcall	.-240    	; 0x252a <u8g_atmega_sw_spi_shift_out>
    261a:	0f 5f       	subi	r16, 0xFF	; 255
    261c:	1f 4f       	sbci	r17, 0xFF	; 255
          arg_val--;
    261e:	49 81       	ldd	r20, Y+1	; 0x01
    2620:	41 50       	subi	r20, 0x01	; 1
    2622:	f4 cf       	rjmp	.-24     	; 0x260c <u8g_com_atmega_sw_spi_fn+0xa6>
      break;

      case U8G_COM_MSG_WRITE_SEQ_P:
      {
        register uint8_t *ptr = arg_ptr;
        while( arg_val > 0 )
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	0f 90       	pop	r0
        {
          u8g_atmega_sw_spi_shift_out(u8g, u8g_pgm_read(ptr));
    2628:	df 91       	pop	r29
    262a:	cf 91       	pop	r28
    262c:	1f 91       	pop	r17
    262e:	0f 91       	pop	r16
    2630:	ff 90       	pop	r15
    2632:	ef 90       	pop	r14
          ptr++;
    2634:	08 95       	ret

00002636 <adxl345_init>:
#include "adxl345.h"
#include <LUFA/Drivers/Peripheral/TWI.h>

//function prefix: adxl345_

void adxl345_init(uint8_t mode, uint8_t range, uint8_t rate) {
    2636:	1f 93       	push	r17
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	18 2f       	mov	r17, r24
    263e:	d6 2f       	mov	r29, r22
    2640:	c4 2f       	mov	r28, r20
		//Put the accelerometer in MEASURE mode
		if (TWI_StartTransmission(ALT_ADDR | TWI_ADDRESS_WRITE, 10) == TWI_ERROR_NoError)
    2642:	6a e0       	ldi	r22, 0x0A	; 10
    2644:	86 ea       	ldi	r24, 0xA6	; 166
    2646:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    264a:	81 11       	cpse	r24, r1
    264c:	09 c0       	rjmp	.+18     	; 0x2660 <adxl345_init+0x2a>
		{
			TWI_SendByte(POWER_CTL);
    264e:	8d e2       	ldi	r24, 0x2D	; 45
    2650:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
			TWI_SendByte(mode); //(measure mode - 0001000 in binary)
    2654:	81 2f       	mov	r24, r17
    2656:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>

			/** Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
			static inline void TWI_StopTransmission(void) ATTR_ALWAYS_INLINE;
			static inline void TWI_StopTransmission(void)
			{
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    265a:	84 e9       	ldi	r24, 0x94	; 148
    265c:	80 93 bc 00 	sts	0x00BC, r24
			// Must stop transmission afterwards to release the bus
			TWI_StopTransmission();
		}

		//Set the Range to +/- 4G
		if (TWI_StartTransmission(0xA6 | TWI_ADDRESS_WRITE, 10) == TWI_ERROR_NoError)
    2660:	6a e0       	ldi	r22, 0x0A	; 10
    2662:	86 ea       	ldi	r24, 0xA6	; 166
    2664:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    2668:	81 11       	cpse	r24, r1
    266a:	09 c0       	rjmp	.+18     	; 0x267e <adxl345_init+0x48>
		{
			TWI_SendByte(DATA_FORMAT);
    266c:	81 e3       	ldi	r24, 0x31	; 49
    266e:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
			TWI_SendByte(range); //(4g - 0000001 in binary)
    2672:	8d 2f       	mov	r24, r29
    2674:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
    2678:	84 e9       	ldi	r24, 0x94	; 148
    267a:	80 93 bc 00 	sts	0x00BC, r24
			TWI_StopTransmission();
		}

		//set rate to 800 hz, max for 400khz i2c mode
		// Start a write session to device at device address 0x53, internal address 0x2C with a 10ms timeout
		if (TWI_StartTransmission(0xA6 | TWI_ADDRESS_WRITE, 10) == TWI_ERROR_NoError)
    267e:	6a e0       	ldi	r22, 0x0A	; 10
    2680:	86 ea       	ldi	r24, 0xA6	; 166
    2682:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    2686:	81 11       	cpse	r24, r1
    2688:	09 c0       	rjmp	.+18     	; 0x269c <adxl345_init+0x66>
		{
			TWI_SendByte(BW_RATE);
    268a:	8c e2       	ldi	r24, 0x2C	; 44
    268c:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
			TWI_SendByte(rate);
    2690:	8c 2f       	mov	r24, r28
    2692:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
    2696:	84 e9       	ldi	r24, 0x94	; 148
    2698:	80 93 bc 00 	sts	0x00BC, r24
			// Must stop transmission afterwards to release the bus
			TWI_StopTransmission();
		}
}
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	1f 91       	pop	r17
    26a2:	08 95       	ret

000026a4 <adxl345_read>:

void adxl345_read(dataexchange_t *data) {
    26a4:	cf 92       	push	r12
    26a6:	df 92       	push	r13
    26a8:	ff 92       	push	r15
    26aa:	0f 93       	push	r16
    26ac:	1f 93       	push	r17
    26ae:	cf 93       	push	r28
    26b0:	df 93       	push	r29
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <adxl345_read+0x10>
    26b4:	00 d0       	rcall	.+0      	; 0x26b6 <adxl345_read+0x12>
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <adxl345_read+0x14>
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	8c 01       	movw	r16, r24
		uint8_t buf[6] = {0};
    26be:	ce 01       	movw	r24, r28
    26c0:	01 96       	adiw	r24, 0x01	; 1
    26c2:	6c 01       	movw	r12, r24
    26c4:	86 e0       	ldi	r24, 0x06	; 6
    26c6:	f6 01       	movw	r30, r12
    26c8:	11 92       	st	Z+, r1
    26ca:	8a 95       	dec	r24
    26cc:	e9 f7       	brne	.-6      	; 0x26c8 <adxl345_read+0x24>

		// Start a read session to device at address 0xA6, internal address 0x32 with a 10ms timeout
		if (TWI_StartTransmission(ALT_ADDR | TWI_ADDRESS_WRITE, 10) == TWI_ERROR_NoError)
    26ce:	6a e0       	ldi	r22, 0x0A	; 10
    26d0:	86 ea       	ldi	r24, 0xA6	; 166
    26d2:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    26d6:	81 11       	cpse	r24, r1
    26d8:	2c c0       	rjmp	.+88     	; 0x2732 <adxl345_read+0x8e>
		{
			TWI_SendByte(DATAX0); //set pointer to X axis MSB
    26da:	82 e3       	ldi	r24, 0x32	; 50
    26dc:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
    26e0:	64 e9       	ldi	r22, 0x94	; 148
    26e2:	f6 2e       	mov	r15, r22
    26e4:	f0 92 bc 00 	sts	0x00BC, r15
			TWI_StopTransmission();
			if (TWI_StartTransmission(ALT_ADDR | TWI_ADDRESS_READ, 10) == TWI_ERROR_NoError)
    26e8:	6a e0       	ldi	r22, 0x0A	; 10
    26ea:	87 ea       	ldi	r24, 0xA7	; 167
    26ec:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    26f0:	81 11       	cpse	r24, r1
    26f2:	1f c0       	rjmp	.+62     	; 0x2732 <adxl345_read+0x8e>
			{
				// Read 6 bytes, acknowledge after the third byte is received
				TWI_ReceiveByte(&buf[0], false);
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	c6 01       	movw	r24, r12
    26f8:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
				TWI_ReceiveByte(&buf[1], false);
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	ce 01       	movw	r24, r28
    2700:	02 96       	adiw	r24, 0x02	; 2
    2702:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
				TWI_ReceiveByte(&buf[2], false);
    2706:	60 e0       	ldi	r22, 0x00	; 0
    2708:	ce 01       	movw	r24, r28
    270a:	03 96       	adiw	r24, 0x03	; 3
    270c:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>

				TWI_ReceiveByte(&buf[3], false);
    2710:	60 e0       	ldi	r22, 0x00	; 0
    2712:	ce 01       	movw	r24, r28
    2714:	04 96       	adiw	r24, 0x04	; 4
    2716:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
				TWI_ReceiveByte(&buf[4], false);
    271a:	60 e0       	ldi	r22, 0x00	; 0
    271c:	ce 01       	movw	r24, r28
    271e:	05 96       	adiw	r24, 0x05	; 5
    2720:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
				TWI_ReceiveByte(&buf[5], true);
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	ce 01       	movw	r24, r28
    2728:	06 96       	adiw	r24, 0x06	; 6
    272a:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
    272e:	f0 92 bc 00 	sts	0x00BC, r15
				TWI_StopTransmission();
			}
		}

		//note the order
		(*data).acc_x = ((uint8_t)buf[1]) << 8;
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	98 2f       	mov	r25, r24
    2738:	88 27       	eor	r24, r24
		(*data).acc_x |= buf[0];
    273a:	29 81       	ldd	r18, Y+1	; 0x01
    273c:	82 2b       	or	r24, r18
    273e:	f8 01       	movw	r30, r16
    2740:	97 8b       	std	Z+23, r25	; 0x17
    2742:	86 8b       	std	Z+22, r24	; 0x16

		(*data).acc_y = ((uint8_t)buf[3]) << 8;
    2744:	2c 81       	ldd	r18, Y+4	; 0x04
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	32 2f       	mov	r19, r18
    274a:	22 27       	eor	r18, r18
		(*data).acc_y |= buf[2];
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	28 2b       	or	r18, r24
    2750:	31 8f       	std	Z+25, r19	; 0x19
    2752:	20 8f       	std	Z+24, r18	; 0x18

		(*data).acc_z = ((uint8_t)buf[5]) << 8;
    2754:	2e 81       	ldd	r18, Y+6	; 0x06
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	32 2f       	mov	r19, r18
    275a:	22 27       	eor	r18, r18
		(*data).acc_z |= buf[4];
    275c:	8d 81       	ldd	r24, Y+5	; 0x05
    275e:	28 2b       	or	r18, r24
    2760:	33 8f       	std	Z+27, r19	; 0x1b
    2762:	22 8f       	std	Z+26, r18	; 0x1a
}
    2764:	26 96       	adiw	r28, 0x06	; 6
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	ff 90       	pop	r15
    277a:	df 90       	pop	r13
    277c:	cf 90       	pop	r12
    277e:	08 95       	ret

00002780 <adxl345_raw_to_g>:

vector3d adxl345_raw_to_g(dataexchange_t *data, float scale) {
    2780:	4f 92       	push	r4
    2782:	5f 92       	push	r5
    2784:	6f 92       	push	r6
    2786:	7f 92       	push	r7
    2788:	8f 92       	push	r8
    278a:	9f 92       	push	r9
    278c:	af 92       	push	r10
    278e:	bf 92       	push	r11
    2790:	cf 92       	push	r12
    2792:	df 92       	push	r13
    2794:	ef 92       	push	r14
    2796:	ff 92       	push	r15
    2798:	0f 93       	push	r16
    279a:	1f 93       	push	r17
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	ec 01       	movw	r28, r24
    27a2:	8b 01       	movw	r16, r22
    27a4:	69 01       	movw	r12, r18
    27a6:	7a 01       	movw	r14, r20
	vector3d ret;

	ret.x = (*data).acc_x * scale;
	ret.y = (*data).acc_y * scale;
    27a8:	fb 01       	movw	r30, r22
    27aa:	60 8d       	ldd	r22, Z+24	; 0x18
    27ac:	71 8d       	ldd	r23, Z+25	; 0x19
    27ae:	88 27       	eor	r24, r24
    27b0:	77 fd       	sbrc	r23, 7
    27b2:	80 95       	com	r24
    27b4:	98 2f       	mov	r25, r24
    27b6:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    27ba:	a7 01       	movw	r20, r14
    27bc:	96 01       	movw	r18, r12
    27be:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    27c2:	2b 01       	movw	r4, r22
    27c4:	3c 01       	movw	r6, r24
	ret.z = (*data).acc_z * scale;
    27c6:	f8 01       	movw	r30, r16
    27c8:	62 8d       	ldd	r22, Z+26	; 0x1a
    27ca:	73 8d       	ldd	r23, Z+27	; 0x1b
    27cc:	88 27       	eor	r24, r24
    27ce:	77 fd       	sbrc	r23, 7
    27d0:	80 95       	com	r24
    27d2:	98 2f       	mov	r25, r24
    27d4:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    27d8:	a7 01       	movw	r20, r14
    27da:	96 01       	movw	r18, r12
    27dc:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    27e0:	4b 01       	movw	r8, r22
    27e2:	5c 01       	movw	r10, r24
}

vector3d adxl345_raw_to_g(dataexchange_t *data, float scale) {
	vector3d ret;

	ret.x = (*data).acc_x * scale;
    27e4:	f8 01       	movw	r30, r16
    27e6:	66 89       	ldd	r22, Z+22	; 0x16
    27e8:	77 89       	ldd	r23, Z+23	; 0x17
    27ea:	88 27       	eor	r24, r24
    27ec:	77 fd       	sbrc	r23, 7
    27ee:	80 95       	com	r24
    27f0:	98 2f       	mov	r25, r24
    27f2:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    27f6:	a7 01       	movw	r20, r14
    27f8:	96 01       	movw	r18, r12
    27fa:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
	ret.y = (*data).acc_y * scale;
	ret.z = (*data).acc_z * scale;

	return ret;
    27fe:	68 83       	st	Y, r22
    2800:	79 83       	std	Y+1, r23	; 0x01
    2802:	8a 83       	std	Y+2, r24	; 0x02
    2804:	9b 83       	std	Y+3, r25	; 0x03
    2806:	4c 82       	std	Y+4, r4	; 0x04
    2808:	5d 82       	std	Y+5, r5	; 0x05
    280a:	6e 82       	std	Y+6, r6	; 0x06
    280c:	7f 82       	std	Y+7, r7	; 0x07
    280e:	88 86       	std	Y+8, r8	; 0x08
    2810:	99 86       	std	Y+9, r9	; 0x09
    2812:	aa 86       	std	Y+10, r10	; 0x0a
    2814:	bb 86       	std	Y+11, r11	; 0x0b
}
    2816:	ce 01       	movw	r24, r28
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	ff 90       	pop	r15
    2822:	ef 90       	pop	r14
    2824:	df 90       	pop	r13
    2826:	cf 90       	pop	r12
    2828:	bf 90       	pop	r11
    282a:	af 90       	pop	r10
    282c:	9f 90       	pop	r9
    282e:	8f 90       	pop	r8
    2830:	7f 90       	pop	r7
    2832:	6f 90       	pop	r6
    2834:	5f 90       	pop	r5
    2836:	4f 90       	pop	r4
    2838:	08 95       	ret

0000283a <hmc5883l_init>:
#include <LUFA/Drivers/Peripheral/TWI.h>
#include <stdint.h>

//function prefix: hmc5883l_

void hmc5883l_init(uint8_t mode, uint8_t gain, uint8_t rate){
    283a:	1f 93       	push	r17
    283c:	cf 93       	push	r28
    283e:	df 93       	push	r29
    2840:	c8 2f       	mov	r28, r24
    2842:	d6 2f       	mov	r29, r22
    2844:	14 2f       	mov	r17, r20
	// Start a write session to device at device address 0x3C, internal address 0x00 with a 10ms timeout
	if (TWI_StartTransmission(MAG_ADDR | TWI_ADDRESS_WRITE, 10) == TWI_ERROR_NoError)
    2846:	6a e0       	ldi	r22, 0x0A	; 10
    2848:	8c e3       	ldi	r24, 0x3C	; 60
    284a:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    284e:	81 11       	cpse	r24, r1
    2850:	08 c0       	rjmp	.+16     	; 0x2862 <hmc5883l_init+0x28>
	{
		TWI_SendByte(REG_CONFIG_A);
    2852:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
		TWI_SendByte(rate);
    2856:	81 2f       	mov	r24, r17
    2858:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
    285c:	84 e9       	ldi	r24, 0x94	; 148
    285e:	80 93 bc 00 	sts	0x00BC, r24
		// Must stop transmission afterwards to release the bus
		TWI_StopTransmission();
	}

	// Start a write session to device at device address 0x3C, internal address 0x01 with a 10ms timeout
	if (TWI_StartTransmission(MAG_ADDR | TWI_ADDRESS_WRITE, 10) == TWI_ERROR_NoError)
    2862:	6a e0       	ldi	r22, 0x0A	; 10
    2864:	8c e3       	ldi	r24, 0x3C	; 60
    2866:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    286a:	81 11       	cpse	r24, r1
    286c:	09 c0       	rjmp	.+18     	; 0x2880 <hmc5883l_init+0x46>
	{
		TWI_SendByte(REG_CONFIG_B);
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
		TWI_SendByte(gain);
    2874:	8d 2f       	mov	r24, r29
    2876:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
    287a:	84 e9       	ldi	r24, 0x94	; 148
    287c:	80 93 bc 00 	sts	0x00BC, r24
		// Must stop transmission afterwards to release the bus
		TWI_StopTransmission();
	}

	// Start a write session to device at device address 0x3C, internal address 0x02 with a 10ms timeout
	if (TWI_StartTransmission(MAG_ADDR| TWI_ADDRESS_WRITE, 10) == TWI_ERROR_NoError)
    2880:	6a e0       	ldi	r22, 0x0A	; 10
    2882:	8c e3       	ldi	r24, 0x3C	; 60
    2884:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    2888:	81 11       	cpse	r24, r1
    288a:	09 c0       	rjmp	.+18     	; 0x289e <hmc5883l_init+0x64>
	{
		TWI_SendByte(REG_MODE);
    288c:	82 e0       	ldi	r24, 0x02	; 2
    288e:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
		TWI_SendByte(mode);
    2892:	8c 2f       	mov	r24, r28
    2894:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
    2898:	84 e9       	ldi	r24, 0x94	; 148
    289a:	80 93 bc 00 	sts	0x00BC, r24
		// Must stop transmission afterwards to release the bus
		TWI_StopTransmission();
	}
}
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	1f 91       	pop	r17
    28a4:	08 95       	ret

000028a6 <hmc5883l_read>:

void hmc5883l_read(dataexchange_t *data) {
    28a6:	cf 92       	push	r12
    28a8:	df 92       	push	r13
    28aa:	ff 92       	push	r15
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <hmc5883l_read+0x10>
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <hmc5883l_read+0x12>
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <hmc5883l_read+0x14>
    28ba:	cd b7       	in	r28, 0x3d	; 61
    28bc:	de b7       	in	r29, 0x3e	; 62
    28be:	8c 01       	movw	r16, r24
	uint8_t buf[6] = {0};
    28c0:	ce 01       	movw	r24, r28
    28c2:	01 96       	adiw	r24, 0x01	; 1
    28c4:	6c 01       	movw	r12, r24
    28c6:	86 e0       	ldi	r24, 0x06	; 6
    28c8:	f6 01       	movw	r30, r12
    28ca:	11 92       	st	Z+, r1
    28cc:	8a 95       	dec	r24
    28ce:	e9 f7       	brne	.-6      	; 0x28ca <hmc5883l_read+0x24>

	if (TWI_StartTransmission(MAG_ADDR | TWI_ADDRESS_WRITE, 10) == TWI_ERROR_NoError)
    28d0:	6a e0       	ldi	r22, 0x0A	; 10
    28d2:	8c e3       	ldi	r24, 0x3C	; 60
    28d4:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    28d8:	81 11       	cpse	r24, r1
    28da:	2c c0       	rjmp	.+88     	; 0x2934 <hmc5883l_read+0x8e>
	{
		TWI_SendByte(REG_OUT_X_M); //set pointer to X axis MSB
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
    28e2:	64 e9       	ldi	r22, 0x94	; 148
    28e4:	f6 2e       	mov	r15, r22
    28e6:	f0 92 bc 00 	sts	0x00BC, r15
		TWI_StopTransmission();
		if (TWI_StartTransmission(MAG_ADDR | TWI_ADDRESS_READ, 10) == TWI_ERROR_NoError)
    28ea:	6a e0       	ldi	r22, 0x0A	; 10
    28ec:	8d e3       	ldi	r24, 0x3D	; 61
    28ee:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    28f2:	81 11       	cpse	r24, r1
    28f4:	1f c0       	rjmp	.+62     	; 0x2934 <hmc5883l_read+0x8e>
		{
			// Read 6 bytes, acknowledge after the third byte is received
			TWI_ReceiveByte(&buf[0], false);
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	c6 01       	movw	r24, r12
    28fa:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
			TWI_ReceiveByte(&buf[1], false);
    28fe:	60 e0       	ldi	r22, 0x00	; 0
    2900:	ce 01       	movw	r24, r28
    2902:	02 96       	adiw	r24, 0x02	; 2
    2904:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
			TWI_ReceiveByte(&buf[2], false);
    2908:	60 e0       	ldi	r22, 0x00	; 0
    290a:	ce 01       	movw	r24, r28
    290c:	03 96       	adiw	r24, 0x03	; 3
    290e:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>

			TWI_ReceiveByte(&buf[3], false);
    2912:	60 e0       	ldi	r22, 0x00	; 0
    2914:	ce 01       	movw	r24, r28
    2916:	04 96       	adiw	r24, 0x04	; 4
    2918:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
			TWI_ReceiveByte(&buf[4], false);
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	ce 01       	movw	r24, r28
    2920:	05 96       	adiw	r24, 0x05	; 5
    2922:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
			TWI_ReceiveByte(&buf[5], true);
    2926:	61 e0       	ldi	r22, 0x01	; 1
    2928:	ce 01       	movw	r24, r28
    292a:	06 96       	adiw	r24, 0x06	; 6
    292c:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
    2930:	f0 92 bc 00 	sts	0x00BC, r15
			// Must stop transmission afterwards to release the bus
			TWI_StopTransmission();
		}
	}

	(*data).mag_x = ((uint8_t)buf[0]) << 8;
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	98 2f       	mov	r25, r24
    293a:	88 27       	eor	r24, r24
	(*data).mag_x |= buf[1];
    293c:	2a 81       	ldd	r18, Y+2	; 0x02
    293e:	82 2b       	or	r24, r18
    2940:	f8 01       	movw	r30, r16
    2942:	91 8b       	std	Z+17, r25	; 0x11
    2944:	80 8b       	std	Z+16, r24	; 0x10

	(*data).mag_z = ((uint8_t)buf[2]) << 8;
    2946:	2b 81       	ldd	r18, Y+3	; 0x03
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	32 2f       	mov	r19, r18
    294c:	22 27       	eor	r18, r18
	(*data).mag_z |= buf[3];
    294e:	8c 81       	ldd	r24, Y+4	; 0x04
    2950:	28 2b       	or	r18, r24
    2952:	35 8b       	std	Z+21, r19	; 0x15
    2954:	24 8b       	std	Z+20, r18	; 0x14

	(*data).mag_y = ((uint8_t)buf[4]) << 8;
    2956:	2d 81       	ldd	r18, Y+5	; 0x05
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	32 2f       	mov	r19, r18
    295c:	22 27       	eor	r18, r18
	(*data).mag_y |= buf[5];
    295e:	8e 81       	ldd	r24, Y+6	; 0x06
    2960:	28 2b       	or	r18, r24
    2962:	33 8b       	std	Z+19, r19	; 0x13
    2964:	22 8b       	std	Z+18, r18	; 0x12
}
    2966:	26 96       	adiw	r28, 0x06	; 6
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	df 91       	pop	r29
    2974:	cf 91       	pop	r28
    2976:	1f 91       	pop	r17
    2978:	0f 91       	pop	r16
    297a:	ff 90       	pop	r15
    297c:	df 90       	pop	r13
    297e:	cf 90       	pop	r12
    2980:	08 95       	ret

00002982 <hmc5883l_applyCalibration>:

void hmc5883l_applyCalibration(vector3d *vec, params_t *calib_params) {
    2982:	4f 92       	push	r4
    2984:	5f 92       	push	r5
    2986:	6f 92       	push	r6
    2988:	7f 92       	push	r7
    298a:	8f 92       	push	r8
    298c:	9f 92       	push	r9
    298e:	af 92       	push	r10
    2990:	bf 92       	push	r11
    2992:	cf 92       	push	r12
    2994:	df 92       	push	r13
    2996:	ef 92       	push	r14
    2998:	ff 92       	push	r15
    299a:	0f 93       	push	r16
    299c:	1f 93       	push	r17
    299e:	cf 93       	push	r28
    29a0:	df 93       	push	r29
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
    29a6:	c0 56       	subi	r28, 0x60	; 96
    29a8:	d1 09       	sbc	r29, r1
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	4c 01       	movw	r8, r24
    29b6:	fb 01       	movw	r30, r22
	//create vectors
	vector3d offset_v, scale_v;
	matrix3x3d rmat;

	offset_v.x = (*calib_params).offset_x;
    29b8:	24 81       	ldd	r18, Z+4	; 0x04
    29ba:	35 81       	ldd	r19, Z+5	; 0x05
    29bc:	46 81       	ldd	r20, Z+6	; 0x06
    29be:	57 81       	ldd	r21, Z+7	; 0x07
	offset_v.y = (*calib_params).offset_y;
    29c0:	80 85       	ldd	r24, Z+8	; 0x08
    29c2:	91 85       	ldd	r25, Z+9	; 0x09
    29c4:	a2 85       	ldd	r26, Z+10	; 0x0a
    29c6:	b3 85       	ldd	r27, Z+11	; 0x0b
    29c8:	69 96       	adiw	r28, 0x19	; 25
    29ca:	8c af       	std	Y+60, r24	; 0x3c
    29cc:	9d af       	std	Y+61, r25	; 0x3d
    29ce:	ae af       	std	Y+62, r26	; 0x3e
    29d0:	bf af       	std	Y+63, r27	; 0x3f
    29d2:	69 97       	sbiw	r28, 0x19	; 25
	offset_v.z = (*calib_params).offset_z;
    29d4:	c4 84       	ldd	r12, Z+12	; 0x0c
    29d6:	d5 84       	ldd	r13, Z+13	; 0x0d
    29d8:	e6 84       	ldd	r14, Z+14	; 0x0e
    29da:	f7 84       	ldd	r15, Z+15	; 0x0f

	scale_v.x = (*calib_params).scale_x;
    29dc:	44 a8       	ldd	r4, Z+52	; 0x34
    29de:	55 a8       	ldd	r5, Z+53	; 0x35
    29e0:	66 a8       	ldd	r6, Z+54	; 0x36
    29e2:	77 a8       	ldd	r7, Z+55	; 0x37
	scale_v.y = (*calib_params).scale_y;
    29e4:	80 ad       	ldd	r24, Z+56	; 0x38
    29e6:	91 ad       	ldd	r25, Z+57	; 0x39
    29e8:	a2 ad       	ldd	r26, Z+58	; 0x3a
    29ea:	b3 ad       	ldd	r27, Z+59	; 0x3b
    29ec:	6d 96       	adiw	r28, 0x1d	; 29
    29ee:	8c af       	std	Y+60, r24	; 0x3c
    29f0:	9d af       	std	Y+61, r25	; 0x3d
    29f2:	ae af       	std	Y+62, r26	; 0x3e
    29f4:	bf af       	std	Y+63, r27	; 0x3f
    29f6:	6d 97       	sbiw	r28, 0x1d	; 29
	scale_v.z = (*calib_params).scale_z;
    29f8:	84 ad       	ldd	r24, Z+60	; 0x3c
    29fa:	95 ad       	ldd	r25, Z+61	; 0x3d
    29fc:	a6 ad       	ldd	r26, Z+62	; 0x3e
    29fe:	b7 ad       	ldd	r27, Z+63	; 0x3f
    2a00:	a1 96       	adiw	r28, 0x21	; 33
    2a02:	8c af       	std	Y+60, r24	; 0x3c
    2a04:	9d af       	std	Y+61, r25	; 0x3d
    2a06:	ae af       	std	Y+62, r26	; 0x3e
    2a08:	bf af       	std	Y+63, r27	; 0x3f
    2a0a:	a1 97       	sbiw	r28, 0x21	; 33

	rmat.r1[0] = (*calib_params).rmat_r1_x;
    2a0c:	80 89       	ldd	r24, Z+16	; 0x10
    2a0e:	91 89       	ldd	r25, Z+17	; 0x11
    2a10:	a2 89       	ldd	r26, Z+18	; 0x12
    2a12:	b3 89       	ldd	r27, Z+19	; 0x13
    2a14:	8d a3       	std	Y+37, r24	; 0x25
    2a16:	9e a3       	std	Y+38, r25	; 0x26
    2a18:	af a3       	std	Y+39, r26	; 0x27
    2a1a:	b8 a7       	std	Y+40, r27	; 0x28
	rmat.r1[1] = (*calib_params).rmat_r1_y;
    2a1c:	84 89       	ldd	r24, Z+20	; 0x14
    2a1e:	95 89       	ldd	r25, Z+21	; 0x15
    2a20:	a6 89       	ldd	r26, Z+22	; 0x16
    2a22:	b7 89       	ldd	r27, Z+23	; 0x17
    2a24:	89 a7       	std	Y+41, r24	; 0x29
    2a26:	9a a7       	std	Y+42, r25	; 0x2a
    2a28:	ab a7       	std	Y+43, r26	; 0x2b
    2a2a:	bc a7       	std	Y+44, r27	; 0x2c
	rmat.r1[2] = (*calib_params).rmat_r1_z;
    2a2c:	80 8d       	ldd	r24, Z+24	; 0x18
    2a2e:	91 8d       	ldd	r25, Z+25	; 0x19
    2a30:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2a32:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2a34:	8d a7       	std	Y+45, r24	; 0x2d
    2a36:	9e a7       	std	Y+46, r25	; 0x2e
    2a38:	af a7       	std	Y+47, r26	; 0x2f
    2a3a:	b8 ab       	std	Y+48, r27	; 0x30

	rmat.r2[0] = (*calib_params).rmat_r2_x;
    2a3c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a3e:	95 8d       	ldd	r25, Z+29	; 0x1d
    2a40:	a6 8d       	ldd	r26, Z+30	; 0x1e
    2a42:	b7 8d       	ldd	r27, Z+31	; 0x1f
    2a44:	89 ab       	std	Y+49, r24	; 0x31
    2a46:	9a ab       	std	Y+50, r25	; 0x32
    2a48:	ab ab       	std	Y+51, r26	; 0x33
    2a4a:	bc ab       	std	Y+52, r27	; 0x34
	rmat.r2[1] = (*calib_params).rmat_r2_y;
    2a4c:	80 a1       	ldd	r24, Z+32	; 0x20
    2a4e:	91 a1       	ldd	r25, Z+33	; 0x21
    2a50:	a2 a1       	ldd	r26, Z+34	; 0x22
    2a52:	b3 a1       	ldd	r27, Z+35	; 0x23
    2a54:	8d ab       	std	Y+53, r24	; 0x35
    2a56:	9e ab       	std	Y+54, r25	; 0x36
    2a58:	af ab       	std	Y+55, r26	; 0x37
    2a5a:	b8 af       	std	Y+56, r27	; 0x38
	rmat.r2[2] = (*calib_params).rmat_r2_z;
    2a5c:	84 a1       	ldd	r24, Z+36	; 0x24
    2a5e:	95 a1       	ldd	r25, Z+37	; 0x25
    2a60:	a6 a1       	ldd	r26, Z+38	; 0x26
    2a62:	b7 a1       	ldd	r27, Z+39	; 0x27
    2a64:	89 af       	std	Y+57, r24	; 0x39
    2a66:	9a af       	std	Y+58, r25	; 0x3a
    2a68:	ab af       	std	Y+59, r26	; 0x3b
    2a6a:	bc af       	std	Y+60, r27	; 0x3c

	rmat.r3[0] = (*calib_params).rmat_r3_x;
    2a6c:	80 a5       	ldd	r24, Z+40	; 0x28
    2a6e:	91 a5       	ldd	r25, Z+41	; 0x29
    2a70:	a2 a5       	ldd	r26, Z+42	; 0x2a
    2a72:	b3 a5       	ldd	r27, Z+43	; 0x2b
    2a74:	21 96       	adiw	r28, 0x01	; 1
    2a76:	8c af       	std	Y+60, r24	; 0x3c
    2a78:	9d af       	std	Y+61, r25	; 0x3d
    2a7a:	ae af       	std	Y+62, r26	; 0x3e
    2a7c:	bf af       	std	Y+63, r27	; 0x3f
    2a7e:	21 97       	sbiw	r28, 0x01	; 1
	rmat.r3[1] = (*calib_params).rmat_r3_y;
    2a80:	84 a5       	ldd	r24, Z+44	; 0x2c
    2a82:	95 a5       	ldd	r25, Z+45	; 0x2d
    2a84:	a6 a5       	ldd	r26, Z+46	; 0x2e
    2a86:	b7 a5       	ldd	r27, Z+47	; 0x2f
    2a88:	25 96       	adiw	r28, 0x05	; 5
    2a8a:	8c af       	std	Y+60, r24	; 0x3c
    2a8c:	9d af       	std	Y+61, r25	; 0x3d
    2a8e:	ae af       	std	Y+62, r26	; 0x3e
    2a90:	bf af       	std	Y+63, r27	; 0x3f
    2a92:	25 97       	sbiw	r28, 0x05	; 5
	rmat.r3[2] = (*calib_params).rmat_r3_z;
    2a94:	80 a9       	ldd	r24, Z+48	; 0x30
    2a96:	91 a9       	ldd	r25, Z+49	; 0x31
    2a98:	a2 a9       	ldd	r26, Z+50	; 0x32
    2a9a:	b3 a9       	ldd	r27, Z+51	; 0x33
    2a9c:	29 96       	adiw	r28, 0x09	; 9
    2a9e:	8c af       	std	Y+60, r24	; 0x3c
    2aa0:	9d af       	std	Y+61, r25	; 0x3d
    2aa2:	ae af       	std	Y+62, r26	; 0x3e
    2aa4:	bf af       	std	Y+63, r27	; 0x3f
    2aa6:	29 97       	sbiw	r28, 0x09	; 9

	//removing offset
	(*vec).x -= offset_v.x;
    2aa8:	d4 01       	movw	r26, r8
    2aaa:	6d 91       	ld	r22, X+
    2aac:	7d 91       	ld	r23, X+
    2aae:	8d 91       	ld	r24, X+
    2ab0:	9c 91       	ld	r25, X
    2ab2:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    2ab6:	f4 01       	movw	r30, r8
    2ab8:	60 83       	st	Z, r22
    2aba:	71 83       	std	Z+1, r23	; 0x01
    2abc:	82 83       	std	Z+2, r24	; 0x02
    2abe:	93 83       	std	Z+3, r25	; 0x03
	(*vec).y -= offset_v.y;
    2ac0:	69 96       	adiw	r28, 0x19	; 25
    2ac2:	2c ad       	ldd	r18, Y+60	; 0x3c
    2ac4:	3d ad       	ldd	r19, Y+61	; 0x3d
    2ac6:	4e ad       	ldd	r20, Y+62	; 0x3e
    2ac8:	5f ad       	ldd	r21, Y+63	; 0x3f
    2aca:	69 97       	sbiw	r28, 0x19	; 25
    2acc:	64 81       	ldd	r22, Z+4	; 0x04
    2ace:	75 81       	ldd	r23, Z+5	; 0x05
    2ad0:	86 81       	ldd	r24, Z+6	; 0x06
    2ad2:	97 81       	ldd	r25, Z+7	; 0x07
    2ad4:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    2ad8:	d4 01       	movw	r26, r8
    2ada:	14 96       	adiw	r26, 0x04	; 4
    2adc:	6d 93       	st	X+, r22
    2ade:	7d 93       	st	X+, r23
    2ae0:	8d 93       	st	X+, r24
    2ae2:	9c 93       	st	X, r25
    2ae4:	17 97       	sbiw	r26, 0x07	; 7
	(*vec).z -= offset_v.z;
    2ae6:	a7 01       	movw	r20, r14
    2ae8:	96 01       	movw	r18, r12
    2aea:	18 96       	adiw	r26, 0x08	; 8
    2aec:	6d 91       	ld	r22, X+
    2aee:	7d 91       	ld	r23, X+
    2af0:	8d 91       	ld	r24, X+
    2af2:	9c 91       	ld	r25, X
    2af4:	1b 97       	sbiw	r26, 0x0b	; 11
    2af6:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    2afa:	26 2f       	mov	r18, r22
    2afc:	46 2f       	mov	r20, r22
    2afe:	57 2f       	mov	r21, r23
    2b00:	bc 01       	movw	r22, r24
    2b02:	f4 01       	movw	r30, r8
    2b04:	40 87       	std	Z+8, r20	; 0x08
    2b06:	51 87       	std	Z+9, r21	; 0x09
    2b08:	62 87       	std	Z+10, r22	; 0x0a
    2b0a:	73 87       	std	Z+11, r23	; 0x0b

	//applying rotation
	(*vec) = matrix_vector_prod(&rmat, (*vec));
    2b0c:	a0 80       	ld	r10, Z
    2b0e:	b1 80       	ldd	r11, Z+1	; 0x01
    2b10:	c2 80       	ldd	r12, Z+2	; 0x02
    2b12:	d3 80       	ldd	r13, Z+3	; 0x03
    2b14:	e4 80       	ldd	r14, Z+4	; 0x04
    2b16:	f5 80       	ldd	r15, Z+5	; 0x05
    2b18:	06 81       	ldd	r16, Z+6	; 0x06
    2b1a:	17 81       	ldd	r17, Z+7	; 0x07
    2b1c:	31 85       	ldd	r19, Z+9	; 0x09
    2b1e:	42 85       	ldd	r20, Z+10	; 0x0a
    2b20:	53 85       	ldd	r21, Z+11	; 0x0b
    2b22:	be 01       	movw	r22, r28
    2b24:	6b 5d       	subi	r22, 0xDB	; 219
    2b26:	7f 4f       	sbci	r23, 0xFF	; 255
    2b28:	ce 01       	movw	r24, r28
    2b2a:	87 5b       	subi	r24, 0xB7	; 183
    2b2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b2e:	6f d6       	rcall	.+3294   	; 0x380e <matrix_vector_prod>
    2b30:	8c e0       	ldi	r24, 0x0C	; 12
    2b32:	fe 01       	movw	r30, r28
    2b34:	e7 5b       	subi	r30, 0xB7	; 183
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	d4 01       	movw	r26, r8
    2b3a:	01 90       	ld	r0, Z+
    2b3c:	0d 92       	st	X+, r0
    2b3e:	8a 95       	dec	r24
    2b40:	e1 f7       	brne	.-8      	; 0x2b3a <hmc5883l_applyCalibration+0x1b8>
    2b42:	a3 01       	movw	r20, r6

	//scaling
	(*vec).x *= scale_v.x;
    2b44:	92 01       	movw	r18, r4
    2b46:	d4 01       	movw	r26, r8
    2b48:	6d 91       	ld	r22, X+
    2b4a:	7d 91       	ld	r23, X+
    2b4c:	8d 91       	ld	r24, X+
    2b4e:	9c 91       	ld	r25, X
    2b50:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    2b54:	f4 01       	movw	r30, r8
    2b56:	60 83       	st	Z, r22
    2b58:	71 83       	std	Z+1, r23	; 0x01
    2b5a:	82 83       	std	Z+2, r24	; 0x02
    2b5c:	93 83       	std	Z+3, r25	; 0x03
    2b5e:	6d 96       	adiw	r28, 0x1d	; 29
	(*vec).y *= scale_v.y;
    2b60:	2c ad       	ldd	r18, Y+60	; 0x3c
    2b62:	3d ad       	ldd	r19, Y+61	; 0x3d
    2b64:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b66:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b68:	6d 97       	sbiw	r28, 0x1d	; 29
    2b6a:	64 81       	ldd	r22, Z+4	; 0x04
    2b6c:	75 81       	ldd	r23, Z+5	; 0x05
    2b6e:	86 81       	ldd	r24, Z+6	; 0x06
    2b70:	97 81       	ldd	r25, Z+7	; 0x07
    2b72:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    2b76:	d4 01       	movw	r26, r8
    2b78:	14 96       	adiw	r26, 0x04	; 4
    2b7a:	6d 93       	st	X+, r22
    2b7c:	7d 93       	st	X+, r23
    2b7e:	8d 93       	st	X+, r24
    2b80:	9c 93       	st	X, r25
    2b82:	17 97       	sbiw	r26, 0x07	; 7
    2b84:	a1 96       	adiw	r28, 0x21	; 33
	(*vec).z *= scale_v.z;
    2b86:	2c ad       	ldd	r18, Y+60	; 0x3c
    2b88:	3d ad       	ldd	r19, Y+61	; 0x3d
    2b8a:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b8c:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b8e:	a1 97       	sbiw	r28, 0x21	; 33
    2b90:	18 96       	adiw	r26, 0x08	; 8
    2b92:	6d 91       	ld	r22, X+
    2b94:	7d 91       	ld	r23, X+
    2b96:	8d 91       	ld	r24, X+
    2b98:	9c 91       	ld	r25, X
    2b9a:	1b 97       	sbiw	r26, 0x0b	; 11
    2b9c:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    2ba0:	f4 01       	movw	r30, r8
    2ba2:	60 87       	std	Z+8, r22	; 0x08
    2ba4:	71 87       	std	Z+9, r23	; 0x09
    2ba6:	82 87       	std	Z+10, r24	; 0x0a
    2ba8:	93 87       	std	Z+11, r25	; 0x0b
    2baa:	be 01       	movw	r22, r28

	//applying backward rotation - transposed
	matrix3x3d rmat_back = matrix_transpose(&rmat);
    2bac:	6b 5d       	subi	r22, 0xDB	; 219
    2bae:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb0:	ce 01       	movw	r24, r28
    2bb2:	01 96       	adiw	r24, 0x01	; 1
    2bb4:	26 d7       	rcall	.+3660   	; 0x3a02 <matrix_transpose>
    2bb6:	d4 01       	movw	r26, r8
    2bb8:	ac 90       	ld	r10, X
	(*vec) = matrix_vector_prod(&rmat_back, (*vec));
    2bba:	11 96       	adiw	r26, 0x01	; 1
    2bbc:	bc 90       	ld	r11, X
    2bbe:	11 97       	sbiw	r26, 0x01	; 1
    2bc0:	12 96       	adiw	r26, 0x02	; 2
    2bc2:	cc 90       	ld	r12, X
    2bc4:	12 97       	sbiw	r26, 0x02	; 2
    2bc6:	13 96       	adiw	r26, 0x03	; 3
    2bc8:	dc 90       	ld	r13, X
    2bca:	13 97       	sbiw	r26, 0x03	; 3
    2bcc:	14 96       	adiw	r26, 0x04	; 4
    2bce:	ec 90       	ld	r14, X
    2bd0:	14 97       	sbiw	r26, 0x04	; 4
    2bd2:	15 96       	adiw	r26, 0x05	; 5
    2bd4:	fc 90       	ld	r15, X
    2bd6:	15 97       	sbiw	r26, 0x05	; 5
    2bd8:	16 96       	adiw	r26, 0x06	; 6
    2bda:	0c 91       	ld	r16, X
    2bdc:	16 97       	sbiw	r26, 0x06	; 6
    2bde:	17 96       	adiw	r26, 0x07	; 7
    2be0:	1c 91       	ld	r17, X
    2be2:	17 97       	sbiw	r26, 0x07	; 7
    2be4:	18 96       	adiw	r26, 0x08	; 8
    2be6:	2c 91       	ld	r18, X
    2be8:	18 97       	sbiw	r26, 0x08	; 8
    2bea:	19 96       	adiw	r26, 0x09	; 9
    2bec:	3c 91       	ld	r19, X
    2bee:	19 97       	sbiw	r26, 0x09	; 9
    2bf0:	1a 96       	adiw	r26, 0x0a	; 10
    2bf2:	4c 91       	ld	r20, X
    2bf4:	1a 97       	sbiw	r26, 0x0a	; 10
    2bf6:	1b 96       	adiw	r26, 0x0b	; 11
    2bf8:	5c 91       	ld	r21, X
    2bfa:	be 01       	movw	r22, r28
    2bfc:	6f 5f       	subi	r22, 0xFF	; 255
    2bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    2c00:	ce 01       	movw	r24, r28
    2c02:	87 5b       	subi	r24, 0xB7	; 183
    2c04:	9f 4f       	sbci	r25, 0xFF	; 255
    2c06:	03 d6       	rcall	.+3078   	; 0x380e <matrix_vector_prod>
    2c08:	8c e0       	ldi	r24, 0x0C	; 12
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e7 5b       	subi	r30, 0xB7	; 183
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	d4 01       	movw	r26, r8
    2c12:	01 90       	ld	r0, Z+
    2c14:	0d 92       	st	X+, r0
    2c16:	8a 95       	dec	r24
    2c18:	e1 f7       	brne	.-8      	; 0x2c12 <hmc5883l_applyCalibration+0x290>
    2c1a:	c0 5a       	subi	r28, 0xA0	; 160
    2c1c:	df 4f       	sbci	r29, 0xFF	; 255
    2c1e:	0f b6       	in	r0, 0x3f	; 63

}
    2c20:	f8 94       	cli
    2c22:	de bf       	out	0x3e, r29	; 62
    2c24:	0f be       	out	0x3f, r0	; 63
    2c26:	cd bf       	out	0x3d, r28	; 61
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	df 90       	pop	r13
    2c36:	cf 90       	pop	r12
    2c38:	bf 90       	pop	r11
    2c3a:	af 90       	pop	r10
    2c3c:	9f 90       	pop	r9
    2c3e:	8f 90       	pop	r8
    2c40:	7f 90       	pop	r7
    2c42:	6f 90       	pop	r6
    2c44:	5f 90       	pop	r5
    2c46:	4f 90       	pop	r4
    2c48:	08 95       	ret

00002c4a <l3g4200d_init>:
#include <LUFA/Drivers/Peripheral/TWI.h>
#include <stdint.h>

//function prefix: l3g4200d_

void l3g4200d_init(uint8_t mode, uint8_t rate) {
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	c8 2f       	mov	r28, r24
    2c50:	d6 2f       	mov	r29, r22

	if (TWI_StartTransmission(DEV_ADDR | TWI_ADDRESS_WRITE, 10) == TWI_ERROR_NoError)
    2c52:	6a e0       	ldi	r22, 0x0A	; 10
    2c54:	82 ed       	ldi	r24, 0xD2	; 210
    2c56:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    2c5a:	81 11       	cpse	r24, r1
    2c5c:	09 c0       	rjmp	.+18     	; 0x2c70 <l3g4200d_init+0x26>
	{
		TWI_SendByte(CTRL_REG1);
    2c5e:	80 e2       	ldi	r24, 0x20	; 32
    2c60:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
		TWI_SendByte(rate);
    2c64:	8d 2f       	mov	r24, r29
    2c66:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
    2c6a:	84 e9       	ldi	r24, 0x94	; 148
    2c6c:	80 93 bc 00 	sts	0x00BC, r24
		// Must stop transmission afterwards to release the bus
		TWI_StopTransmission();
	}

	if (TWI_StartTransmission(DEV_ADDR | TWI_ADDRESS_WRITE, 10) == TWI_ERROR_NoError)
    2c70:	6a e0       	ldi	r22, 0x0A	; 10
    2c72:	82 ed       	ldi	r24, 0xD2	; 210
    2c74:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    2c78:	81 11       	cpse	r24, r1
    2c7a:	09 c0       	rjmp	.+18     	; 0x2c8e <l3g4200d_init+0x44>
	{
		TWI_SendByte(CTRL_REG5);
    2c7c:	84 e2       	ldi	r24, 0x24	; 36
    2c7e:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
		TWI_SendByte(mode);
    2c82:	8c 2f       	mov	r24, r28
    2c84:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
    2c88:	84 e9       	ldi	r24, 0x94	; 148
    2c8a:	80 93 bc 00 	sts	0x00BC, r24
	//			TWI_SendByte(CTRL_REG2);
	//			TWI_SendByte(0x00); //ref sig filt
	//			// Must stop transmission afterwards to release the bus
	//			TWI_StopTransmission();
	//		}
}
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	08 95       	ret

00002c94 <l3g4200d_read_seq>:
		(*data).gyr_z = (l3g4200d_read_byte(DEV_ADDR, OUT_Z_H)) << 8;
		(*data).gyr_z |= l3g4200d_read_byte(DEV_ADDR, OUT_Z_L);
	}
}

void l3g4200d_read_seq(dataexchange_t *data) {
    2c94:	cf 92       	push	r12
    2c96:	df 92       	push	r13
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <l3g4200d_read_seq+0x10>
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <l3g4200d_read_seq+0x12>
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <l3g4200d_read_seq+0x14>
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	8c 01       	movw	r16, r24
	uint8_t buf[6] = {0};
    2cae:	ce 01       	movw	r24, r28
    2cb0:	01 96       	adiw	r24, 0x01	; 1
    2cb2:	6c 01       	movw	r12, r24
    2cb4:	86 e0       	ldi	r24, 0x06	; 6
    2cb6:	f6 01       	movw	r30, r12
    2cb8:	11 92       	st	Z+, r1
    2cba:	8a 95       	dec	r24
    2cbc:	e9 f7       	brne	.-6      	; 0x2cb8 <l3g4200d_read_seq+0x24>

	// Start a read session to device at address 0xA6, internal address 0x32 with a 10ms timeout
	if (TWI_StartTransmission(DEV_ADDR | TWI_ADDRESS_WRITE, 10) == TWI_ERROR_NoError)
    2cbe:	6a e0       	ldi	r22, 0x0A	; 10
    2cc0:	82 ed       	ldi	r24, 0xD2	; 210
    2cc2:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    2cc6:	81 11       	cpse	r24, r1
    2cc8:	2c c0       	rjmp	.+88     	; 0x2d22 <l3g4200d_read_seq+0x8e>
	{
		TWI_SendByte(OUT_X_L | BURST_MODE); //set pointer to X axis MSB and OR with burst modifier
    2cca:	88 ea       	ldi	r24, 0xA8	; 168
    2ccc:	0e 94 4c 32 	call	0x6498	; 0x6498 <TWI_SendByte>
    2cd0:	64 e9       	ldi	r22, 0x94	; 148
    2cd2:	f6 2e       	mov	r15, r22
    2cd4:	f0 92 bc 00 	sts	0x00BC, r15
		TWI_StopTransmission();
		if (TWI_StartTransmission(DEV_ADDR | TWI_ADDRESS_READ, 10) == TWI_ERROR_NoError)
    2cd8:	6a e0       	ldi	r22, 0x0A	; 10
    2cda:	83 ed       	ldi	r24, 0xD3	; 211
    2cdc:	0e 94 f8 31 	call	0x63f0	; 0x63f0 <TWI_StartTransmission>
    2ce0:	81 11       	cpse	r24, r1
    2ce2:	1f c0       	rjmp	.+62     	; 0x2d22 <l3g4200d_read_seq+0x8e>
		{
			// Read 6 bytes, acknowledge after the third byte is received
			TWI_ReceiveByte(&buf[0], false);
    2ce4:	60 e0       	ldi	r22, 0x00	; 0
    2ce6:	c6 01       	movw	r24, r12
    2ce8:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
			TWI_ReceiveByte(&buf[1], false);
    2cec:	60 e0       	ldi	r22, 0x00	; 0
    2cee:	ce 01       	movw	r24, r28
    2cf0:	02 96       	adiw	r24, 0x02	; 2
    2cf2:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
			TWI_ReceiveByte(&buf[2], false);
    2cf6:	60 e0       	ldi	r22, 0x00	; 0
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	03 96       	adiw	r24, 0x03	; 3
    2cfc:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>

			TWI_ReceiveByte(&buf[3], false);
    2d00:	60 e0       	ldi	r22, 0x00	; 0
    2d02:	ce 01       	movw	r24, r28
    2d04:	04 96       	adiw	r24, 0x04	; 4
    2d06:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
			TWI_ReceiveByte(&buf[4], false);
    2d0a:	60 e0       	ldi	r22, 0x00	; 0
    2d0c:	ce 01       	movw	r24, r28
    2d0e:	05 96       	adiw	r24, 0x05	; 5
    2d10:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
			TWI_ReceiveByte(&buf[5], true);
    2d14:	61 e0       	ldi	r22, 0x01	; 1
    2d16:	ce 01       	movw	r24, r28
    2d18:	06 96       	adiw	r24, 0x06	; 6
    2d1a:	0e 94 5d 32 	call	0x64ba	; 0x64ba <TWI_ReceiveByte>
    2d1e:	f0 92 bc 00 	sts	0x00BC, r15
			TWI_StopTransmission();
		}
	}

	//note the order
	(*data).gyr_x = ((uint8_t)buf[1]) << 8;
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	98 2f       	mov	r25, r24
    2d28:	88 27       	eor	r24, r24
	(*data).gyr_x |= buf[0];
    2d2a:	29 81       	ldd	r18, Y+1	; 0x01
    2d2c:	82 2b       	or	r24, r18
    2d2e:	f8 01       	movw	r30, r16
    2d30:	95 8f       	std	Z+29, r25	; 0x1d
    2d32:	84 8f       	std	Z+28, r24	; 0x1c

	(*data).gyr_y = ((uint8_t)buf[3]) << 8;
    2d34:	2c 81       	ldd	r18, Y+4	; 0x04
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	32 2f       	mov	r19, r18
    2d3a:	22 27       	eor	r18, r18
	(*data).gyr_y |= buf[2];
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	28 2b       	or	r18, r24
    2d40:	37 8f       	std	Z+31, r19	; 0x1f
    2d42:	26 8f       	std	Z+30, r18	; 0x1e

	(*data).gyr_z = ((uint8_t)buf[5]) << 8;
    2d44:	2e 81       	ldd	r18, Y+6	; 0x06
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	32 2f       	mov	r19, r18
    2d4a:	22 27       	eor	r18, r18
	(*data).gyr_z |= buf[4];
    2d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4e:	28 2b       	or	r18, r24
    2d50:	31 a3       	std	Z+33, r19	; 0x21
    2d52:	20 a3       	std	Z+32, r18	; 0x20
}
    2d54:	26 96       	adiw	r28, 0x06	; 6
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	df 91       	pop	r29
    2d62:	cf 91       	pop	r28
    2d64:	1f 91       	pop	r17
    2d66:	0f 91       	pop	r16
    2d68:	ff 90       	pop	r15
    2d6a:	df 90       	pop	r13
    2d6c:	cf 90       	pop	r12
    2d6e:	08 95       	ret

00002d70 <l3g4200d_raw_to_rad>:

vector3d l3g4200d_raw_to_rad(dataexchange_t *data) {
    2d70:	8f 92       	push	r8
    2d72:	9f 92       	push	r9
    2d74:	af 92       	push	r10
    2d76:	bf 92       	push	r11
    2d78:	cf 92       	push	r12
    2d7a:	df 92       	push	r13
    2d7c:	ef 92       	push	r14
    2d7e:	ff 92       	push	r15
    2d80:	0f 93       	push	r16
    2d82:	1f 93       	push	r17
    2d84:	cf 93       	push	r28
    2d86:	df 93       	push	r29
    2d88:	ec 01       	movw	r28, r24
    2d8a:	8b 01       	movw	r16, r22
	vector3d ret;

	ret.x = gyroToRad(((*data).gyr_x - OFFSET_X) * GYRO_SCALE); //offset?
	ret.y = gyroToRad(((*data).gyr_y - OFFSET_Y) * GYRO_SCALE);
    2d8c:	fb 01       	movw	r30, r22
    2d8e:	66 8d       	ldd	r22, Z+30	; 0x1e
    2d90:	77 8d       	ldd	r23, Z+31	; 0x1f
    2d92:	88 27       	eor	r24, r24
    2d94:	77 fd       	sbrc	r23, 7
    2d96:	80 95       	com	r24
    2d98:	98 2f       	mov	r25, r24
    2d9a:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    2d9e:	28 ea       	ldi	r18, 0xA8	; 168
    2da0:	36 e4       	ldi	r19, 0x46	; 70
    2da2:	4f e3       	ldi	r20, 0x3F	; 63
    2da4:	53 e4       	ldi	r21, 0x43	; 67
    2da6:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    2daa:	29 e2       	ldi	r18, 0x29	; 41
    2dac:	3c e5       	ldi	r19, 0x5C	; 92
    2dae:	4f e0       	ldi	r20, 0x0F	; 15
    2db0:	5c e3       	ldi	r21, 0x3C	; 60
    2db2:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    2db6:	25 e3       	ldi	r18, 0x35	; 53
    2db8:	3a ef       	ldi	r19, 0xFA	; 250
    2dba:	4e e8       	ldi	r20, 0x8E	; 142
    2dbc:	5c e3       	ldi	r21, 0x3C	; 60
    2dbe:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    2dc2:	4b 01       	movw	r8, r22
    2dc4:	5c 01       	movw	r10, r24
	ret.z = gyroToRad(((*data).gyr_z - OFFSET_Z) * GYRO_SCALE);
    2dc6:	f8 01       	movw	r30, r16
    2dc8:	60 a1       	ldd	r22, Z+32	; 0x20
    2dca:	71 a1       	ldd	r23, Z+33	; 0x21
    2dcc:	88 27       	eor	r24, r24
    2dce:	77 fd       	sbrc	r23, 7
    2dd0:	80 95       	com	r24
    2dd2:	98 2f       	mov	r25, r24
    2dd4:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    2dd8:	2a e6       	ldi	r18, 0x6A	; 106
    2dda:	3c eb       	ldi	r19, 0xBC	; 188
    2ddc:	40 ee       	ldi	r20, 0xE0	; 224
    2dde:	51 e4       	ldi	r21, 0x41	; 65
    2de0:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    2de4:	29 e2       	ldi	r18, 0x29	; 41
    2de6:	3c e5       	ldi	r19, 0x5C	; 92
    2de8:	4f e0       	ldi	r20, 0x0F	; 15
    2dea:	5c e3       	ldi	r21, 0x3C	; 60
    2dec:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    2df0:	25 e3       	ldi	r18, 0x35	; 53
    2df2:	3a ef       	ldi	r19, 0xFA	; 250
    2df4:	4e e8       	ldi	r20, 0x8E	; 142
    2df6:	5c e3       	ldi	r21, 0x3C	; 60
    2df8:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    2dfc:	6b 01       	movw	r12, r22
    2dfe:	7c 01       	movw	r14, r24
}

vector3d l3g4200d_raw_to_rad(dataexchange_t *data) {
	vector3d ret;

	ret.x = gyroToRad(((*data).gyr_x - OFFSET_X) * GYRO_SCALE); //offset?
    2e00:	f8 01       	movw	r30, r16
    2e02:	64 8d       	ldd	r22, Z+28	; 0x1c
    2e04:	75 8d       	ldd	r23, Z+29	; 0x1d
    2e06:	88 27       	eor	r24, r24
    2e08:	77 fd       	sbrc	r23, 7
    2e0a:	80 95       	com	r24
    2e0c:	98 2f       	mov	r25, r24
    2e0e:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    2e12:	28 e5       	ldi	r18, 0x58	; 88
    2e14:	39 ef       	ldi	r19, 0xF9	; 249
    2e16:	45 e0       	ldi	r20, 0x05	; 5
    2e18:	53 e4       	ldi	r21, 0x43	; 67
    2e1a:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    2e1e:	29 e2       	ldi	r18, 0x29	; 41
    2e20:	3c e5       	ldi	r19, 0x5C	; 92
    2e22:	4f e0       	ldi	r20, 0x0F	; 15
    2e24:	5c e3       	ldi	r21, 0x3C	; 60
    2e26:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    2e2a:	25 e3       	ldi	r18, 0x35	; 53
    2e2c:	3a ef       	ldi	r19, 0xFA	; 250
    2e2e:	4e e8       	ldi	r20, 0x8E	; 142
    2e30:	5c e3       	ldi	r21, 0x3C	; 60
    2e32:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
	ret.y = gyroToRad(((*data).gyr_y - OFFSET_Y) * GYRO_SCALE);
	ret.z = gyroToRad(((*data).gyr_z - OFFSET_Z) * GYRO_SCALE);

	return ret;
    2e36:	68 83       	st	Y, r22
    2e38:	79 83       	std	Y+1, r23	; 0x01
    2e3a:	8a 83       	std	Y+2, r24	; 0x02
    2e3c:	9b 83       	std	Y+3, r25	; 0x03
    2e3e:	8c 82       	std	Y+4, r8	; 0x04
    2e40:	9d 82       	std	Y+5, r9	; 0x05
    2e42:	ae 82       	std	Y+6, r10	; 0x06
    2e44:	bf 82       	std	Y+7, r11	; 0x07
    2e46:	c8 86       	std	Y+8, r12	; 0x08
    2e48:	d9 86       	std	Y+9, r13	; 0x09
    2e4a:	ea 86       	std	Y+10, r14	; 0x0a
    2e4c:	fb 86       	std	Y+11, r15	; 0x0b
}
    2e4e:	ce 01       	movw	r24, r28
    2e50:	df 91       	pop	r29
    2e52:	cf 91       	pop	r28
    2e54:	1f 91       	pop	r17
    2e56:	0f 91       	pop	r16
    2e58:	ff 90       	pop	r15
    2e5a:	ef 90       	pop	r14
    2e5c:	df 90       	pop	r13
    2e5e:	cf 90       	pop	r12
    2e60:	bf 90       	pop	r11
    2e62:	af 90       	pop	r10
    2e64:	9f 90       	pop	r9
    2e66:	8f 90       	pop	r8
    2e68:	08 95       	ret

00002e6a <data_init>:
#include "GenericHID.h"
#include "data/data.h"
#include "sensors/hmc5883l.h"
#include <avr/eeprom.h>

void data_init(dataexchange_t *data, params_t *calib_params) {
    2e6a:	af 92       	push	r10
    2e6c:	bf 92       	push	r11
    2e6e:	cf 92       	push	r12
    2e70:	df 92       	push	r13
    2e72:	ef 92       	push	r14
    2e74:	ff 92       	push	r15
    2e76:	0f 93       	push	r16
    2e78:	1f 93       	push	r17
    2e7a:	cf 93       	push	r28
    2e7c:	df 93       	push	r29
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	c0 54       	subi	r28, 0x40	; 64
    2e84:	d1 09       	sbc	r29, r1
    2e86:	0f b6       	in	r0, 0x3f	; 63
    2e88:	f8 94       	cli
    2e8a:	de bf       	out	0x3e, r29	; 62
    2e8c:	0f be       	out	0x3f, r0	; 63
    2e8e:	cd bf       	out	0x3d, r28	; 61
    2e90:	7c 01       	movw	r14, r24
    2e92:	8b 01       	movw	r16, r22
	//put some values into structure for testing
	//(*data).reportID = 0;

	(*data).qr.w = 1;
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	a0 e8       	ldi	r26, 0x80	; 128
    2e9a:	bf e3       	ldi	r27, 0x3F	; 63
    2e9c:	f7 01       	movw	r30, r14
    2e9e:	80 83       	st	Z, r24
    2ea0:	91 83       	std	Z+1, r25	; 0x01
    2ea2:	a2 83       	std	Z+2, r26	; 0x02
    2ea4:	b3 83       	std	Z+3, r27	; 0x03
	(*data).qr.x = 1;
    2ea6:	84 83       	std	Z+4, r24	; 0x04
    2ea8:	95 83       	std	Z+5, r25	; 0x05
    2eaa:	a6 83       	std	Z+6, r26	; 0x06
    2eac:	b7 83       	std	Z+7, r27	; 0x07
	(*data).qr.y = 1;
    2eae:	80 87       	std	Z+8, r24	; 0x08
    2eb0:	91 87       	std	Z+9, r25	; 0x09
    2eb2:	a2 87       	std	Z+10, r26	; 0x0a
    2eb4:	b3 87       	std	Z+11, r27	; 0x0b
	(*data).qr.z = 1;
    2eb6:	84 87       	std	Z+12, r24	; 0x0c
    2eb8:	95 87       	std	Z+13, r25	; 0x0d
    2eba:	a6 87       	std	Z+14, r26	; 0x0e
    2ebc:	b7 87       	std	Z+15, r27	; 0x0f

//	(*data).debug_v.x = 23;
//	(*data).debug_v.y = 24;
//	(*data).debug_v.z = 25;

	(*data).mag_x = 123;
    2ebe:	8b e7       	ldi	r24, 0x7B	; 123
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	91 8b       	std	Z+17, r25	; 0x11
    2ec4:	80 8b       	std	Z+16, r24	; 0x10
	(*data).mag_y = 124;
    2ec6:	8c e7       	ldi	r24, 0x7C	; 124
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	93 8b       	std	Z+19, r25	; 0x13
    2ecc:	82 8b       	std	Z+18, r24	; 0x12
	(*data).mag_z = 125;
    2ece:	8d e7       	ldi	r24, 0x7D	; 125
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	95 8b       	std	Z+21, r25	; 0x15
    2ed4:	84 8b       	std	Z+20, r24	; 0x14

	(*data).acc_x = 223;
    2ed6:	8f ed       	ldi	r24, 0xDF	; 223
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	97 8b       	std	Z+23, r25	; 0x17
    2edc:	86 8b       	std	Z+22, r24	; 0x16
	(*data).acc_y = 224;
    2ede:	80 ee       	ldi	r24, 0xE0	; 224
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	91 8f       	std	Z+25, r25	; 0x19
    2ee4:	80 8f       	std	Z+24, r24	; 0x18
	(*data).acc_z = 225;
    2ee6:	81 ee       	ldi	r24, 0xE1	; 225
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	93 8f       	std	Z+27, r25	; 0x1b
    2eec:	82 8f       	std	Z+26, r24	; 0x1a

	(*data).gyr_x = 323;
    2eee:	83 e4       	ldi	r24, 0x43	; 67
    2ef0:	91 e0       	ldi	r25, 0x01	; 1
    2ef2:	95 8f       	std	Z+29, r25	; 0x1d
    2ef4:	84 8f       	std	Z+28, r24	; 0x1c
	(*data).gyr_y = 324;
    2ef6:	84 e4       	ldi	r24, 0x44	; 68
    2ef8:	91 e0       	ldi	r25, 0x01	; 1
    2efa:	97 8f       	std	Z+31, r25	; 0x1f
    2efc:	86 8f       	std	Z+30, r24	; 0x1e
	(*data).gyr_z = 325;
    2efe:	85 e4       	ldi	r24, 0x45	; 69
    2f00:	91 e0       	ldi	r25, 0x01	; 1
    2f02:	91 a3       	std	Z+33, r25	; 0x21
    2f04:	80 a3       	std	Z+32, r24	; 0x20

	(*data).time_period = 326;
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	a3 ea       	ldi	r26, 0xA3	; 163
    2f0c:	b3 e4       	ldi	r27, 0x43	; 67
    2f0e:	82 a3       	std	Z+34, r24	; 0x22
    2f10:	93 a3       	std	Z+35, r25	; 0x23
    2f12:	a4 a3       	std	Z+36, r26	; 0x24
    2f14:	b5 a3       	std	Z+37, r27	; 0x25

	(*data).btn = 6; //110 in binary - second and third buttons pressed
    2f16:	86 e0       	ldi	r24, 0x06	; 6
    2f18:	83 af       	std	Z+59, r24	; 0x3b

	//read first byte from eeprom
	uint8_t ind;
	ind = eeprom_read_float(0x00);
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0e 94 75 35 	call	0x6aea	; 0x6aea <__eerd_dword_m32u4>
    2f22:	0e 94 4d 33 	call	0x669a	; 0x669a <__fixunssfsi>
    2f26:	d6 2e       	mov	r13, r22

	(*data).d1 = ind;
    2f28:	70 e0       	ldi	r23, 0x00	; 0
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	0e 94 79 33 	call	0x66f2	; 0x66f2 <__floatunsisf>
    2f32:	f7 01       	movw	r30, r14
    2f34:	66 a3       	std	Z+38, r22	; 0x26
    2f36:	77 a3       	std	Z+39, r23	; 0x27
    2f38:	80 a7       	std	Z+40, r24	; 0x28
    2f3a:	91 a7       	std	Z+41, r25	; 0x29

	if (ind == 7) {
    2f3c:	f7 e0       	ldi	r31, 0x07	; 7
    2f3e:	df 12       	cpse	r13, r31
    2f40:	1b c0       	rjmp	.+54     	; 0x2f78 <data_init+0x10e>
    2f42:	ce 01       	movw	r24, r28
    2f44:	01 96       	adiw	r24, 0x01	; 1
    2f46:	6c 01       	movw	r12, r24
    2f48:	e1 2c       	mov	r14, r1
    2f4a:	f1 2c       	mov	r15, r1
    2f4c:	5c 01       	movw	r10, r24

		uint8_t tmp_data[sizeof(params_t)];
		uint8_t *addr = 0x00;

		for (uint8_t i = 0; i < sizeof(params_t); i++) {
			tmp_data[i] = eeprom_read_byte((void *)addr);
    2f4e:	c7 01       	movw	r24, r14
    2f50:	0e 94 6d 35 	call	0x6ada	; 0x6ada <__eerd_byte_m32u4>
    2f54:	f6 01       	movw	r30, r12
    2f56:	81 93       	st	Z+, r24
    2f58:	6f 01       	movw	r12, r30
			addr++;
    2f5a:	ff ef       	ldi	r31, 0xFF	; 255
    2f5c:	ef 1a       	sub	r14, r31
    2f5e:	ff 0a       	sbc	r15, r31
	if (ind == 7) {

		uint8_t tmp_data[sizeof(params_t)];
		uint8_t *addr = 0x00;

		for (uint8_t i = 0; i < sizeof(params_t); i++) {
    2f60:	80 e4       	ldi	r24, 0x40	; 64
    2f62:	e8 16       	cp	r14, r24
    2f64:	f1 04       	cpc	r15, r1
    2f66:	99 f7       	brne	.-26     	; 0x2f4e <data_init+0xe4>
			tmp_data[i] = eeprom_read_byte((void *)addr);
			addr++;
		}

		memcpy(calib_params, &tmp_data, sizeof(params_t));
    2f68:	80 e4       	ldi	r24, 0x40	; 64
    2f6a:	f5 01       	movw	r30, r10
    2f6c:	d8 01       	movw	r26, r16
    2f6e:	01 90       	ld	r0, Z+
    2f70:	0d 92       	st	X+, r0
    2f72:	8a 95       	dec	r24
    2f74:	e1 f7       	brne	.-8      	; 0x2f6e <data_init+0x104>
    2f76:	81 c0       	rjmp	.+258    	; 0x307a <data_init+0x210>

	} else {

		(*calib_params).indicator = 13;
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	a0 e5       	ldi	r26, 0x50	; 80
    2f7e:	b1 e4       	ldi	r27, 0x41	; 65
    2f80:	f8 01       	movw	r30, r16
    2f82:	80 83       	st	Z, r24
    2f84:	91 83       	std	Z+1, r25	; 0x01
    2f86:	a2 83       	std	Z+2, r26	; 0x02
    2f88:	b3 83       	std	Z+3, r27	; 0x03

		(*calib_params).offset_x = M_OFFSET_X;
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	ac e1       	ldi	r26, 0x1C	; 28
    2f90:	b2 ec       	ldi	r27, 0xC2	; 194
    2f92:	84 83       	std	Z+4, r24	; 0x04
    2f94:	95 83       	std	Z+5, r25	; 0x05
    2f96:	a6 83       	std	Z+6, r26	; 0x06
    2f98:	b7 83       	std	Z+7, r27	; 0x07
		(*calib_params).offset_y = M_OFFSET_Y;
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	a0 e2       	ldi	r26, 0x20	; 32
    2fa0:	b2 ec       	ldi	r27, 0xC2	; 194
    2fa2:	80 87       	std	Z+8, r24	; 0x08
    2fa4:	91 87       	std	Z+9, r25	; 0x09
    2fa6:	a2 87       	std	Z+10, r26	; 0x0a
    2fa8:	b3 87       	std	Z+11, r27	; 0x0b
		(*calib_params).offset_z = M_OFFSET_Z;
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	a8 ee       	ldi	r26, 0xE8	; 232
    2fb0:	b1 e4       	ldi	r27, 0x41	; 65
    2fb2:	84 87       	std	Z+12, r24	; 0x0c
    2fb4:	95 87       	std	Z+13, r25	; 0x0d
    2fb6:	a6 87       	std	Z+14, r26	; 0x0e
    2fb8:	b7 87       	std	Z+15, r27	; 0x0f

		(*calib_params).rmat_r1_x = R1_X;
    2fba:	87 ee       	ldi	r24, 0xE7	; 231
    2fbc:	91 e7       	ldi	r25, 0x71	; 113
    2fbe:	a4 e0       	ldi	r26, 0x04	; 4
    2fc0:	bf e3       	ldi	r27, 0x3F	; 63
    2fc2:	80 8b       	std	Z+16, r24	; 0x10
    2fc4:	91 8b       	std	Z+17, r25	; 0x11
    2fc6:	a2 8b       	std	Z+18, r26	; 0x12
    2fc8:	b3 8b       	std	Z+19, r27	; 0x13
		(*calib_params).rmat_r1_y = R1_Y;
    2fca:	83 ec       	ldi	r24, 0xC3	; 195
    2fcc:	9e e0       	ldi	r25, 0x0E	; 14
    2fce:	a3 e2       	ldi	r26, 0x23	; 35
    2fd0:	be eb       	ldi	r27, 0xBE	; 190
    2fd2:	84 8b       	std	Z+20, r24	; 0x14
    2fd4:	95 8b       	std	Z+21, r25	; 0x15
    2fd6:	a6 8b       	std	Z+22, r26	; 0x16
    2fd8:	b7 8b       	std	Z+23, r27	; 0x17
		(*calib_params).rmat_r1_z = R1_Z;
    2fda:	8b ef       	ldi	r24, 0xFB	; 251
    2fdc:	9f e3       	ldi	r25, 0x3F	; 63
    2fde:	a7 e5       	ldi	r26, 0x57	; 87
    2fe0:	bf e3       	ldi	r27, 0x3F	; 63
    2fe2:	80 8f       	std	Z+24, r24	; 0x18
    2fe4:	91 8f       	std	Z+25, r25	; 0x19
    2fe6:	a2 8f       	std	Z+26, r26	; 0x1a
    2fe8:	b3 8f       	std	Z+27, r27	; 0x1b

		(*calib_params).rmat_r2_x = R2_X;
    2fea:	8d ed       	ldi	r24, 0xDD	; 221
    2fec:	94 e9       	ldi	r25, 0x94	; 148
    2fee:	a6 e5       	ldi	r26, 0x56	; 86
    2ff0:	bf eb       	ldi	r27, 0xBF	; 191
    2ff2:	84 8f       	std	Z+28, r24	; 0x1c
    2ff4:	95 8f       	std	Z+29, r25	; 0x1d
    2ff6:	a6 8f       	std	Z+30, r26	; 0x1e
    2ff8:	b7 8f       	std	Z+31, r27	; 0x1f
		(*calib_params).rmat_r2_y = R2_Y;
    2ffa:	8c ed       	ldi	r24, 0xDC	; 220
    2ffc:	94 e6       	ldi	r25, 0x64	; 100
    2ffe:	a4 ed       	ldi	r26, 0xD4	; 212
    3000:	bd e3       	ldi	r27, 0x3D	; 61
    3002:	80 a3       	std	Z+32, r24	; 0x20
    3004:	91 a3       	std	Z+33, r25	; 0x21
    3006:	a2 a3       	std	Z+34, r26	; 0x22
    3008:	b3 a3       	std	Z+35, r27	; 0x23
		(*calib_params).rmat_r2_z = R2_Z;
    300a:	87 ec       	ldi	r24, 0xC7	; 199
    300c:	9f e0       	ldi	r25, 0x0F	; 15
    300e:	a9 e0       	ldi	r26, 0x09	; 9
    3010:	bf e3       	ldi	r27, 0x3F	; 63
    3012:	84 a3       	std	Z+36, r24	; 0x24
    3014:	95 a3       	std	Z+37, r25	; 0x25
    3016:	a6 a3       	std	Z+38, r26	; 0x26
    3018:	b7 a3       	std	Z+39, r27	; 0x27

		(*calib_params).rmat_r3_x = R3_X;
    301a:	8b e0       	ldi	r24, 0x0B	; 11
    301c:	98 e9       	ldi	r25, 0x98	; 152
    301e:	a0 e3       	ldi	r26, 0x30	; 48
    3020:	be e3       	ldi	r27, 0x3E	; 62
    3022:	80 a7       	std	Z+40, r24	; 0x28
    3024:	91 a7       	std	Z+41, r25	; 0x29
    3026:	a2 a7       	std	Z+42, r26	; 0x2a
    3028:	b3 a7       	std	Z+43, r27	; 0x2b
		(*calib_params).rmat_r3_y = R3_Y;
    302a:	8e ec       	ldi	r24, 0xCE	; 206
    302c:	95 e5       	ldi	r25, 0x55	; 85
    302e:	ab e7       	ldi	r26, 0x7B	; 123
    3030:	bf e3       	ldi	r27, 0x3F	; 63
    3032:	84 a7       	std	Z+44, r24	; 0x2c
    3034:	95 a7       	std	Z+45, r25	; 0x2d
    3036:	a6 a7       	std	Z+46, r26	; 0x2e
    3038:	b7 a7       	std	Z+47, r27	; 0x2f
		(*calib_params).rmat_r3_z = R3_Z;
    303a:	8c ea       	ldi	r24, 0xAC	; 172
    303c:	97 e7       	ldi	r25, 0x77	; 119
    303e:	a3 ea       	ldi	r26, 0xA3	; 163
    3040:	bd e3       	ldi	r27, 0x3D	; 61
    3042:	80 ab       	std	Z+48, r24	; 0x30
    3044:	91 ab       	std	Z+49, r25	; 0x31
    3046:	a2 ab       	std	Z+50, r26	; 0x32
    3048:	b3 ab       	std	Z+51, r27	; 0x33

		(*calib_params).scale_x = SCALE_X;
    304a:	8d ea       	ldi	r24, 0xAD	; 173
    304c:	96 ea       	ldi	r25, 0xA6	; 166
    304e:	ab e5       	ldi	r26, 0x5B	; 91
    3050:	bf e3       	ldi	r27, 0x3F	; 63
    3052:	84 ab       	std	Z+52, r24	; 0x34
    3054:	95 ab       	std	Z+53, r25	; 0x35
    3056:	a6 ab       	std	Z+54, r26	; 0x36
    3058:	b7 ab       	std	Z+55, r27	; 0x37
		(*calib_params).scale_y = SCALE_Y;
    305a:	8e e7       	ldi	r24, 0x7E	; 126
    305c:	9c e8       	ldi	r25, 0x8C	; 140
    305e:	a1 e9       	ldi	r26, 0x91	; 145
    3060:	bf e3       	ldi	r27, 0x3F	; 63
    3062:	80 af       	std	Z+56, r24	; 0x38
    3064:	91 af       	std	Z+57, r25	; 0x39
    3066:	a2 af       	std	Z+58, r26	; 0x3a
    3068:	b3 af       	std	Z+59, r27	; 0x3b
		(*calib_params).scale_z = SCALE_Z;
    306a:	84 e1       	ldi	r24, 0x14	; 20
    306c:	95 e0       	ldi	r25, 0x05	; 5
    306e:	a6 e8       	ldi	r26, 0x86	; 134
    3070:	bf e3       	ldi	r27, 0x3F	; 63
    3072:	84 af       	std	Z+60, r24	; 0x3c
    3074:	95 af       	std	Z+61, r25	; 0x3d
    3076:	a6 af       	std	Z+62, r26	; 0x3e
    3078:	b7 af       	std	Z+63, r27	; 0x3f
	}

}
    307a:	c0 5c       	subi	r28, 0xC0	; 192
    307c:	df 4f       	sbci	r29, 0xFF	; 255
    307e:	0f b6       	in	r0, 0x3f	; 63
    3080:	f8 94       	cli
    3082:	de bf       	out	0x3e, r29	; 62
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	cd bf       	out	0x3d, r28	; 61
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	df 90       	pop	r13
    3096:	cf 90       	pop	r12
    3098:	bf 90       	pop	r11
    309a:	af 90       	pop	r10
    309c:	08 95       	ret

0000309e <display_init>:
 */

#include "display.h"
#include <util/delay.h>

void display_init(void) {
    309e:	cf 92       	push	r12
    30a0:	ef 92       	push	r14
    30a2:	0f 93       	push	r16
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	1f 92       	push	r1
    30aa:	cd b7       	in	r28, 0x3d	; 61
    30ac:	de b7       	in	r29, 0x3e	; 62
	u8g_InitSPI(&u8g, &u8g_dev_sh1106_128x64_sw_spi, PN(1, 1), PN(1, 2), U8G_PIN_NONE, PN(1, 5), U8G_PI_RESET);
    30ae:	65 e0       	ldi	r22, 0x05	; 5
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <u8g_Pin>
    30b6:	e8 2e       	mov	r14, r24
    30b8:	62 e0       	ldi	r22, 0x02	; 2
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <u8g_Pin>
    30c0:	28 2f       	mov	r18, r24
    30c2:	61 e0       	ldi	r22, 0x01	; 1
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	29 83       	std	Y+1, r18	; 0x01
    30c8:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <u8g_Pin>
    30cc:	48 2f       	mov	r20, r24
    30ce:	c1 2c       	mov	r12, r1
    30d0:	0f ef       	ldi	r16, 0xFF	; 255
    30d2:	29 81       	ldd	r18, Y+1	; 0x01
    30d4:	60 e0       	ldi	r22, 0x00	; 0
    30d6:	71 e0       	ldi	r23, 0x01	; 1
    30d8:	82 ed       	ldi	r24, 0xD2	; 210
    30da:	91 e0       	ldi	r25, 0x01	; 1
    30dc:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <u8g_InitSPI>
}
    30e0:	0f 90       	pop	r0
    30e2:	df 91       	pop	r29
    30e4:	cf 91       	pop	r28
    30e6:	0f 91       	pop	r16
    30e8:	ef 90       	pop	r14
    30ea:	cf 90       	pop	r12
    30ec:	08 95       	ret

000030ee <display_draw_logo>:

void display_draw_logo(void) {
	u8g_FirstPage(&u8g);
    30ee:	82 ed       	ldi	r24, 0xD2	; 210
    30f0:	91 e0       	ldi	r25, 0x01	; 1
    30f2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <u8g_FirstPage>
	while (u8g_NextPage(&u8g)) {
    30f6:	82 ed       	ldi	r24, 0xD2	; 210
    30f8:	91 e0       	ldi	r25, 0x01	; 1
    30fa:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <u8g_NextPage>
    30fe:	88 23       	and	r24, r24
    3100:	69 f0       	breq	.+26     	; 0x311c <display_draw_logo+0x2e>
		u8g_SetFont(&u8g, u8g_font_gdr20r);
    3102:	6c ee       	ldi	r22, 0xEC	; 236
    3104:	70 e0       	ldi	r23, 0x00	; 0
    3106:	82 ed       	ldi	r24, 0xD2	; 210
    3108:	91 e0       	ldi	r25, 0x01	; 1
    310a:	df d9       	rcall	.-3138   	; 0x24ca <u8g_SetFont>
    310c:	2e e0       	ldi	r18, 0x0E	; 14
		u8g_DrawStr(&u8g, 10, 45, "[AR^VR]");
    310e:	31 e0       	ldi	r19, 0x01	; 1
    3110:	4d e2       	ldi	r20, 0x2D	; 45
    3112:	6a e0       	ldi	r22, 0x0A	; 10
    3114:	82 ed       	ldi	r24, 0xD2	; 210
    3116:	91 e0       	ldi	r25, 0x01	; 1
    3118:	66 d9       	rcall	.-3380   	; 0x23e6 <u8g_DrawStr>
    311a:	ed cf       	rjmp	.-38     	; 0x30f6 <display_draw_logo+0x8>
    311c:	08 95       	ret

0000311e <display_draw_line2x>:
    311e:	0f 93       	push	r16
	}
}
    3120:	1f 93       	push	r17
		u8g_SetFont(&u8g, u8g_font_gdr10r);
		u8g_DrawStr(&u8g, 2, 20, line);
	}
}

void display_draw_line2x(char *line, char *line2) {
    3122:	cf 93       	push	r28
    3124:	df 93       	push	r29
    3126:	ec 01       	movw	r28, r24
    3128:	8b 01       	movw	r16, r22
	u8g_FirstPage(&u8g);
    312a:	82 ed       	ldi	r24, 0xD2	; 210
    312c:	91 e0       	ldi	r25, 0x01	; 1
    312e:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <u8g_FirstPage>
	while (u8g_NextPage(&u8g)) {
    3132:	82 ed       	ldi	r24, 0xD2	; 210
    3134:	91 e0       	ldi	r25, 0x01	; 1
    3136:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <u8g_NextPage>
    313a:	88 23       	and	r24, r24
    313c:	91 f0       	breq	.+36     	; 0x3162 <display_draw_line2x+0x44>
		u8g_SetFont(&u8g, u8g_font_gdr10r);
    313e:	64 e7       	ldi	r22, 0x74	; 116
    3140:	71 e1       	ldi	r23, 0x11	; 17
    3142:	82 ed       	ldi	r24, 0xD2	; 210
    3144:	91 e0       	ldi	r25, 0x01	; 1
    3146:	c1 d9       	rcall	.-3198   	; 0x24ca <u8g_SetFont>
    3148:	9e 01       	movw	r18, r28
		u8g_DrawStr(&u8g, 2, 20, line);
    314a:	44 e1       	ldi	r20, 0x14	; 20
    314c:	62 e0       	ldi	r22, 0x02	; 2
    314e:	82 ed       	ldi	r24, 0xD2	; 210
    3150:	91 e0       	ldi	r25, 0x01	; 1
    3152:	49 d9       	rcall	.-3438   	; 0x23e6 <u8g_DrawStr>
    3154:	98 01       	movw	r18, r16
    3156:	4d e2       	ldi	r20, 0x2D	; 45
		u8g_DrawStr(&u8g, 2, 45, line2);
    3158:	62 e0       	ldi	r22, 0x02	; 2
    315a:	82 ed       	ldi	r24, 0xD2	; 210
    315c:	91 e0       	ldi	r25, 0x01	; 1
    315e:	43 d9       	rcall	.-3450   	; 0x23e6 <u8g_DrawStr>
    3160:	e8 cf       	rjmp	.-48     	; 0x3132 <display_draw_line2x+0x14>
    3162:	df 91       	pop	r29
    3164:	cf 91       	pop	r28
    3166:	1f 91       	pop	r17
	}
}
    3168:	0f 91       	pop	r16
    316a:	08 95       	ret

0000316c <vector_magnitude>:
    316c:	4f 92       	push	r4
    316e:	5f 92       	push	r5
    3170:	6f 92       	push	r6
 */

#include "ahrs/vector.h"
#include <math.h>

double vector_magnitude(vector3d v) {
    3172:	7f 92       	push	r7
    3174:	8f 92       	push	r8
    3176:	9f 92       	push	r9
    3178:	af 92       	push	r10
    317a:	bf 92       	push	r11
    317c:	cf 92       	push	r12
    317e:	df 92       	push	r13
    3180:	ef 92       	push	r14
    3182:	ff 92       	push	r15
    3184:	0f 93       	push	r16
    3186:	1f 93       	push	r17
    3188:	cf 93       	push	r28
    318a:	df 93       	push	r29
    318c:	cd b7       	in	r28, 0x3d	; 61
    318e:	de b7       	in	r29, 0x3e	; 62
    3190:	2c 97       	sbiw	r28, 0x0c	; 12
    3192:	0f b6       	in	r0, 0x3f	; 63
    3194:	f8 94       	cli
    3196:	de bf       	out	0x3e, r29	; 62
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	cd bf       	out	0x3d, r28	; 61
    319c:	e9 82       	std	Y+1, r14	; 0x01
    319e:	fa 82       	std	Y+2, r15	; 0x02
    31a0:	0b 83       	std	Y+3, r16	; 0x03
    31a2:	1c 83       	std	Y+4, r17	; 0x04
    31a4:	2d 83       	std	Y+5, r18	; 0x05
    31a6:	3e 83       	std	Y+6, r19	; 0x06
    31a8:	4f 83       	std	Y+7, r20	; 0x07
    31aa:	58 87       	std	Y+8, r21	; 0x08
    31ac:	69 87       	std	Y+9, r22	; 0x09
    31ae:	7a 87       	std	Y+10, r23	; 0x0a
    31b0:	8b 87       	std	Y+11, r24	; 0x0b
    31b2:	9c 87       	std	Y+12, r25	; 0x0c
	return sqrt((v.x * v.x) + (v.y * v.y) + (v.z * v.z));
    31b4:	69 81       	ldd	r22, Y+1	; 0x01
    31b6:	7a 81       	ldd	r23, Y+2	; 0x02
    31b8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ba:	9c 81       	ldd	r25, Y+4	; 0x04
    31bc:	8d 80       	ldd	r8, Y+5	; 0x05
    31be:	9e 80       	ldd	r9, Y+6	; 0x06
    31c0:	af 80       	ldd	r10, Y+7	; 0x07
    31c2:	b8 84       	ldd	r11, Y+8	; 0x08
    31c4:	c9 84       	ldd	r12, Y+9	; 0x09
    31c6:	da 84       	ldd	r13, Y+10	; 0x0a
    31c8:	eb 84       	ldd	r14, Y+11	; 0x0b
    31ca:	fc 84       	ldd	r15, Y+12	; 0x0c
    31cc:	9b 01       	movw	r18, r22
    31ce:	ac 01       	movw	r20, r24
    31d0:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    31d4:	2b 01       	movw	r4, r22
    31d6:	3c 01       	movw	r6, r24
    31d8:	a5 01       	movw	r20, r10
    31da:	94 01       	movw	r18, r8
    31dc:	c5 01       	movw	r24, r10
    31de:	b4 01       	movw	r22, r8
    31e0:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    31e4:	9b 01       	movw	r18, r22
    31e6:	ac 01       	movw	r20, r24
    31e8:	c3 01       	movw	r24, r6
    31ea:	b2 01       	movw	r22, r4
    31ec:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    31f0:	4b 01       	movw	r8, r22
    31f2:	5c 01       	movw	r10, r24
    31f4:	a7 01       	movw	r20, r14
    31f6:	96 01       	movw	r18, r12
    31f8:	c7 01       	movw	r24, r14
    31fa:	b6 01       	movw	r22, r12
    31fc:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    3200:	9b 01       	movw	r18, r22
    3202:	ac 01       	movw	r20, r24
    3204:	c5 01       	movw	r24, r10
    3206:	b4 01       	movw	r22, r8
    3208:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
}
    320c:	2c 96       	adiw	r28, 0x0c	; 12
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	1f 91       	pop	r17
    321e:	0f 91       	pop	r16
    3220:	ff 90       	pop	r15
    3222:	ef 90       	pop	r14
    3224:	df 90       	pop	r13
    3226:	cf 90       	pop	r12
    3228:	bf 90       	pop	r11
    322a:	af 90       	pop	r10
    322c:	9f 90       	pop	r9
    322e:	8f 90       	pop	r8
    3230:	7f 90       	pop	r7
    3232:	6f 90       	pop	r6
    3234:	5f 90       	pop	r5
    3236:	4f 90       	pop	r4

#include "ahrs/vector.h"
#include <math.h>

double vector_magnitude(vector3d v) {
	return sqrt((v.x * v.x) + (v.y * v.y) + (v.z * v.z));
    3238:	0c 94 d5 34 	jmp	0x69aa	; 0x69aa <sqrt>

0000323c <vector_sum>:
}

vector3d vector_sum(vector3d v_a, vector3d v_b) {
    323c:	4f 92       	push	r4
    323e:	5f 92       	push	r5
    3240:	6f 92       	push	r6
    3242:	7f 92       	push	r7
    3244:	af 92       	push	r10
    3246:	bf 92       	push	r11
    3248:	cf 92       	push	r12
    324a:	df 92       	push	r13
    324c:	ef 92       	push	r14
    324e:	ff 92       	push	r15
    3250:	0f 93       	push	r16
    3252:	1f 93       	push	r17
    3254:	cf 93       	push	r28
    3256:	df 93       	push	r29
    3258:	cd b7       	in	r28, 0x3d	; 61
    325a:	de b7       	in	r29, 0x3e	; 62
    325c:	2c 97       	sbiw	r28, 0x0c	; 12
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	de bf       	out	0x3e, r29	; 62
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	5c 01       	movw	r10, r24
    326a:	c9 82       	std	Y+1, r12	; 0x01
    326c:	da 82       	std	Y+2, r13	; 0x02
    326e:	eb 82       	std	Y+3, r14	; 0x03
    3270:	fc 82       	std	Y+4, r15	; 0x04
    3272:	0d 83       	std	Y+5, r16	; 0x05
    3274:	1e 83       	std	Y+6, r17	; 0x06
    3276:	2f 83       	std	Y+7, r18	; 0x07
    3278:	38 87       	std	Y+8, r19	; 0x08
    327a:	49 87       	std	Y+9, r20	; 0x09
    327c:	5a 87       	std	Y+10, r21	; 0x0a
    327e:	6b 87       	std	Y+11, r22	; 0x0b
    3280:	7c 87       	std	Y+12, r23	; 0x0c
	vector3d ret;

	ret.x = v_a.x + v_b.x;
	ret.y = v_a.y + v_b.y;
    3282:	29 a1       	ldd	r18, Y+33	; 0x21
    3284:	3a a1       	ldd	r19, Y+34	; 0x22
    3286:	4b a1       	ldd	r20, Y+35	; 0x23
    3288:	5c a1       	ldd	r21, Y+36	; 0x24
    328a:	6d 81       	ldd	r22, Y+5	; 0x05
    328c:	7e 81       	ldd	r23, Y+6	; 0x06
    328e:	8f 81       	ldd	r24, Y+7	; 0x07
    3290:	98 85       	ldd	r25, Y+8	; 0x08
    3292:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    3296:	2b 01       	movw	r4, r22
    3298:	3c 01       	movw	r6, r24
	ret.z = v_a.z + v_b.z;
    329a:	2d a1       	ldd	r18, Y+37	; 0x25
    329c:	3e a1       	ldd	r19, Y+38	; 0x26
    329e:	4f a1       	ldd	r20, Y+39	; 0x27
    32a0:	58 a5       	ldd	r21, Y+40	; 0x28
    32a2:	69 85       	ldd	r22, Y+9	; 0x09
    32a4:	7a 85       	ldd	r23, Y+10	; 0x0a
    32a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    32a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    32aa:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    32ae:	6b 01       	movw	r12, r22
    32b0:	7c 01       	movw	r14, r24
}

vector3d vector_sum(vector3d v_a, vector3d v_b) {
	vector3d ret;

	ret.x = v_a.x + v_b.x;
    32b2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    32b4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    32b6:	4f 8d       	ldd	r20, Y+31	; 0x1f
    32b8:	58 a1       	ldd	r21, Y+32	; 0x20
    32ba:	69 81       	ldd	r22, Y+1	; 0x01
    32bc:	7a 81       	ldd	r23, Y+2	; 0x02
    32be:	8b 81       	ldd	r24, Y+3	; 0x03
    32c0:	9c 81       	ldd	r25, Y+4	; 0x04
    32c2:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
	ret.y = v_a.y + v_b.y;
	ret.z = v_a.z + v_b.z;

	return ret;
    32c6:	f5 01       	movw	r30, r10
    32c8:	60 83       	st	Z, r22
    32ca:	71 83       	std	Z+1, r23	; 0x01
    32cc:	82 83       	std	Z+2, r24	; 0x02
    32ce:	93 83       	std	Z+3, r25	; 0x03
    32d0:	44 82       	std	Z+4, r4	; 0x04
    32d2:	55 82       	std	Z+5, r5	; 0x05
    32d4:	66 82       	std	Z+6, r6	; 0x06
    32d6:	77 82       	std	Z+7, r7	; 0x07
    32d8:	c0 86       	std	Z+8, r12	; 0x08
    32da:	d1 86       	std	Z+9, r13	; 0x09
    32dc:	e2 86       	std	Z+10, r14	; 0x0a
    32de:	f3 86       	std	Z+11, r15	; 0x0b
}
    32e0:	c5 01       	movw	r24, r10
    32e2:	2c 96       	adiw	r28, 0x0c	; 12
    32e4:	0f b6       	in	r0, 0x3f	; 63
    32e6:	f8 94       	cli
    32e8:	de bf       	out	0x3e, r29	; 62
    32ea:	0f be       	out	0x3f, r0	; 63
    32ec:	cd bf       	out	0x3d, r28	; 61
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	1f 91       	pop	r17
    32f4:	0f 91       	pop	r16
    32f6:	ff 90       	pop	r15
    32f8:	ef 90       	pop	r14
    32fa:	df 90       	pop	r13
    32fc:	cf 90       	pop	r12
    32fe:	bf 90       	pop	r11
    3300:	af 90       	pop	r10
    3302:	7f 90       	pop	r7
    3304:	6f 90       	pop	r6
    3306:	5f 90       	pop	r5
    3308:	4f 90       	pop	r4
    330a:	08 95       	ret

0000330c <vector_norm>:
	ret.z = v_a.z - v_b.z;

	return ret;
}

void vector_norm(vector3d *v) {
    330c:	cf 92       	push	r12
    330e:	df 92       	push	r13
    3310:	ef 92       	push	r14
    3312:	ff 92       	push	r15
    3314:	0f 93       	push	r16
    3316:	1f 93       	push	r17
    3318:	cf 93       	push	r28
    331a:	df 93       	push	r29
    331c:	ec 01       	movw	r28, r24
	double mag = vector_magnitude((*v));
    331e:	e8 80       	ld	r14, Y
    3320:	f9 80       	ldd	r15, Y+1	; 0x01
    3322:	0a 81       	ldd	r16, Y+2	; 0x02
    3324:	1b 81       	ldd	r17, Y+3	; 0x03
    3326:	2c 81       	ldd	r18, Y+4	; 0x04
    3328:	3d 81       	ldd	r19, Y+5	; 0x05
    332a:	4e 81       	ldd	r20, Y+6	; 0x06
    332c:	5f 81       	ldd	r21, Y+7	; 0x07
    332e:	68 85       	ldd	r22, Y+8	; 0x08
    3330:	79 85       	ldd	r23, Y+9	; 0x09
    3332:	8a 85       	ldd	r24, Y+10	; 0x0a
    3334:	9b 85       	ldd	r25, Y+11	; 0x0b
    3336:	1a df       	rcall	.-460    	; 0x316c <vector_magnitude>
    3338:	6b 01       	movw	r12, r22
    333a:	7c 01       	movw	r14, r24
    333c:	20 e0       	ldi	r18, 0x00	; 0
	if(mag != 0)
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	a9 01       	movw	r20, r18
    3342:	0e 94 de 32 	call	0x65bc	; 0x65bc <__cmpsf2>
    3346:	88 23       	and	r24, r24
    3348:	21 f1       	breq	.+72     	; 0x3392 <vector_norm+0x86>
    334a:	a7 01       	movw	r20, r14
	{
		(*v).x = (*v).x/mag;
    334c:	96 01       	movw	r18, r12
    334e:	68 81       	ld	r22, Y
    3350:	79 81       	ldd	r23, Y+1	; 0x01
    3352:	8a 81       	ldd	r24, Y+2	; 0x02
    3354:	9b 81       	ldd	r25, Y+3	; 0x03
    3356:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    335a:	68 83       	st	Y, r22
    335c:	79 83       	std	Y+1, r23	; 0x01
    335e:	8a 83       	std	Y+2, r24	; 0x02
    3360:	9b 83       	std	Y+3, r25	; 0x03
    3362:	a7 01       	movw	r20, r14
		(*v).y = (*v).y/mag;
    3364:	96 01       	movw	r18, r12
    3366:	6c 81       	ldd	r22, Y+4	; 0x04
    3368:	7d 81       	ldd	r23, Y+5	; 0x05
    336a:	8e 81       	ldd	r24, Y+6	; 0x06
    336c:	9f 81       	ldd	r25, Y+7	; 0x07
    336e:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    3372:	6c 83       	std	Y+4, r22	; 0x04
    3374:	7d 83       	std	Y+5, r23	; 0x05
    3376:	8e 83       	std	Y+6, r24	; 0x06
    3378:	9f 83       	std	Y+7, r25	; 0x07
    337a:	a7 01       	movw	r20, r14
		(*v).z = (*v).z/mag;
    337c:	96 01       	movw	r18, r12
    337e:	68 85       	ldd	r22, Y+8	; 0x08
    3380:	79 85       	ldd	r23, Y+9	; 0x09
    3382:	8a 85       	ldd	r24, Y+10	; 0x0a
    3384:	9b 85       	ldd	r25, Y+11	; 0x0b
    3386:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    338a:	68 87       	std	Y+8, r22	; 0x08
    338c:	79 87       	std	Y+9, r23	; 0x09
    338e:	8a 87       	std	Y+10, r24	; 0x0a
    3390:	9b 87       	std	Y+11, r25	; 0x0b
    3392:	df 91       	pop	r29
	}
}
    3394:	cf 91       	pop	r28
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	ff 90       	pop	r15
    339c:	ef 90       	pop	r14
    339e:	df 90       	pop	r13
    33a0:	cf 90       	pop	r12
    33a2:	08 95       	ret

000033a4 <vector_inv>:
    33a4:	cf 92       	push	r12

vector3d vector_inv(vector3d v) {
    33a6:	df 92       	push	r13
    33a8:	ef 92       	push	r14
    33aa:	ff 92       	push	r15
    33ac:	0f 93       	push	r16
    33ae:	1f 93       	push	r17
    33b0:	cf 93       	push	r28
    33b2:	df 93       	push	r29
    33b4:	cd b7       	in	r28, 0x3d	; 61
    33b6:	de b7       	in	r29, 0x3e	; 62
    33b8:	2c 97       	sbiw	r28, 0x0c	; 12
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	c9 82       	std	Y+1, r12	; 0x01
    33c6:	da 82       	std	Y+2, r13	; 0x02
    33c8:	eb 82       	std	Y+3, r14	; 0x03
    33ca:	fc 82       	std	Y+4, r15	; 0x04
    33cc:	0d 83       	std	Y+5, r16	; 0x05
    33ce:	1e 83       	std	Y+6, r17	; 0x06
    33d0:	2f 83       	std	Y+7, r18	; 0x07
    33d2:	38 87       	std	Y+8, r19	; 0x08
    33d4:	49 87       	std	Y+9, r20	; 0x09
    33d6:	5a 87       	std	Y+10, r21	; 0x0a
    33d8:	6b 87       	std	Y+11, r22	; 0x0b
    33da:	7c 87       	std	Y+12, r23	; 0x0c
	vector3d ret;
	ret.x = v.x * (-1);
	ret.y = v.y * (-1);
    33dc:	0d 81       	ldd	r16, Y+5	; 0x05
    33de:	1e 81       	ldd	r17, Y+6	; 0x06
    33e0:	2f 81       	ldd	r18, Y+7	; 0x07
    33e2:	38 85       	ldd	r19, Y+8	; 0x08
    33e4:	30 58       	subi	r19, 0x80	; 128
	ret.z = v.z * (-1);
    33e6:	49 85       	ldd	r20, Y+9	; 0x09
    33e8:	5a 85       	ldd	r21, Y+10	; 0x0a
    33ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ee:	70 58       	subi	r23, 0x80	; 128
	}
}

vector3d vector_inv(vector3d v) {
	vector3d ret;
	ret.x = v.x * (-1);
    33f0:	c9 80       	ldd	r12, Y+1	; 0x01
    33f2:	da 80       	ldd	r13, Y+2	; 0x02
    33f4:	eb 80       	ldd	r14, Y+3	; 0x03
    33f6:	fc 80       	ldd	r15, Y+4	; 0x04
    33f8:	f7 fa       	bst	r15, 7
    33fa:	f0 94       	com	r15
    33fc:	f7 f8       	bld	r15, 7
    33fe:	f0 94       	com	r15
	ret.y = v.y * (-1);
	ret.z = v.z * (-1);
	return ret;
    3400:	fc 01       	movw	r30, r24
    3402:	c0 82       	st	Z, r12
    3404:	d1 82       	std	Z+1, r13	; 0x01
    3406:	e2 82       	std	Z+2, r14	; 0x02
    3408:	f3 82       	std	Z+3, r15	; 0x03
    340a:	04 83       	std	Z+4, r16	; 0x04
    340c:	15 83       	std	Z+5, r17	; 0x05
    340e:	26 83       	std	Z+6, r18	; 0x06
    3410:	37 83       	std	Z+7, r19	; 0x07
    3412:	40 87       	std	Z+8, r20	; 0x08
    3414:	51 87       	std	Z+9, r21	; 0x09
    3416:	62 87       	std	Z+10, r22	; 0x0a
    3418:	73 87       	std	Z+11, r23	; 0x0b
}
    341a:	2c 96       	adiw	r28, 0x0c	; 12
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	df 91       	pop	r29
    3428:	cf 91       	pop	r28
    342a:	1f 91       	pop	r17
    342c:	0f 91       	pop	r16
    342e:	ff 90       	pop	r15
    3430:	ef 90       	pop	r14
    3432:	df 90       	pop	r13
    3434:	cf 90       	pop	r12
    3436:	08 95       	ret

00003438 <vector_scale>:

vector3d vector_scale(vector3d v, double scalar) {
    3438:	2f 92       	push	r2
    343a:	3f 92       	push	r3
    343c:	4f 92       	push	r4
    343e:	5f 92       	push	r5
    3440:	6f 92       	push	r6
    3442:	7f 92       	push	r7
    3444:	8f 92       	push	r8
    3446:	9f 92       	push	r9
    3448:	af 92       	push	r10
    344a:	bf 92       	push	r11
    344c:	cf 92       	push	r12
    344e:	df 92       	push	r13
    3450:	ef 92       	push	r14
    3452:	ff 92       	push	r15
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	cf 93       	push	r28
    345a:	df 93       	push	r29
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	2c 97       	sbiw	r28, 0x0c	; 12
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	f8 94       	cli
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	cd bf       	out	0x3d, r28	; 61
    346c:	3c 01       	movw	r6, r24
    346e:	c9 82       	std	Y+1, r12	; 0x01
    3470:	da 82       	std	Y+2, r13	; 0x02
    3472:	eb 82       	std	Y+3, r14	; 0x03
    3474:	fc 82       	std	Y+4, r15	; 0x04
    3476:	0d 83       	std	Y+5, r16	; 0x05
    3478:	1e 83       	std	Y+6, r17	; 0x06
    347a:	2f 83       	std	Y+7, r18	; 0x07
    347c:	38 87       	std	Y+8, r19	; 0x08
    347e:	49 87       	std	Y+9, r20	; 0x09
    3480:	5a 87       	std	Y+10, r21	; 0x0a
    3482:	6b 87       	std	Y+11, r22	; 0x0b
    3484:	7c 87       	std	Y+12, r23	; 0x0c
	vector3d ret;
	ret.x = v.x * scalar;
	ret.y = v.y * scalar;
    3486:	2d 81       	ldd	r18, Y+5	; 0x05
    3488:	3e 81       	ldd	r19, Y+6	; 0x06
    348a:	4f 81       	ldd	r20, Y+7	; 0x07
    348c:	58 85       	ldd	r21, Y+8	; 0x08
    348e:	c5 01       	movw	r24, r10
    3490:	b4 01       	movw	r22, r8
    3492:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    3496:	1b 01       	movw	r2, r22
    3498:	2c 01       	movw	r4, r24
	ret.z = v.z * scalar;
    349a:	29 85       	ldd	r18, Y+9	; 0x09
    349c:	3a 85       	ldd	r19, Y+10	; 0x0a
    349e:	4b 85       	ldd	r20, Y+11	; 0x0b
    34a0:	5c 85       	ldd	r21, Y+12	; 0x0c
    34a2:	c5 01       	movw	r24, r10
    34a4:	b4 01       	movw	r22, r8
    34a6:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    34aa:	6b 01       	movw	r12, r22
    34ac:	7c 01       	movw	r14, r24
	return ret;
}

vector3d vector_scale(vector3d v, double scalar) {
	vector3d ret;
	ret.x = v.x * scalar;
    34ae:	a5 01       	movw	r20, r10
    34b0:	94 01       	movw	r18, r8
    34b2:	69 81       	ldd	r22, Y+1	; 0x01
    34b4:	7a 81       	ldd	r23, Y+2	; 0x02
    34b6:	8b 81       	ldd	r24, Y+3	; 0x03
    34b8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ba:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
	ret.y = v.y * scalar;
	ret.z = v.z * scalar;
	return ret;
    34be:	f3 01       	movw	r30, r6
    34c0:	60 83       	st	Z, r22
    34c2:	71 83       	std	Z+1, r23	; 0x01
    34c4:	82 83       	std	Z+2, r24	; 0x02
    34c6:	93 83       	std	Z+3, r25	; 0x03
    34c8:	24 82       	std	Z+4, r2	; 0x04
    34ca:	35 82       	std	Z+5, r3	; 0x05
    34cc:	46 82       	std	Z+6, r4	; 0x06
    34ce:	57 82       	std	Z+7, r5	; 0x07
    34d0:	c0 86       	std	Z+8, r12	; 0x08
    34d2:	d1 86       	std	Z+9, r13	; 0x09
    34d4:	e2 86       	std	Z+10, r14	; 0x0a
    34d6:	f3 86       	std	Z+11, r15	; 0x0b
}
    34d8:	c3 01       	movw	r24, r6
    34da:	2c 96       	adiw	r28, 0x0c	; 12
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
    34e6:	df 91       	pop	r29
    34e8:	cf 91       	pop	r28
    34ea:	1f 91       	pop	r17
    34ec:	0f 91       	pop	r16
    34ee:	ff 90       	pop	r15
    34f0:	ef 90       	pop	r14
    34f2:	df 90       	pop	r13
    34f4:	cf 90       	pop	r12
    34f6:	bf 90       	pop	r11
    34f8:	af 90       	pop	r10
    34fa:	9f 90       	pop	r9
    34fc:	8f 90       	pop	r8
    34fe:	7f 90       	pop	r7
    3500:	6f 90       	pop	r6
    3502:	5f 90       	pop	r5
    3504:	4f 90       	pop	r4
    3506:	3f 90       	pop	r3
    3508:	2f 90       	pop	r2
    350a:	08 95       	ret

0000350c <vector_cross>:

double vector_dot(vector3d v_a, vector3d v_b) {
	return (v_a.x * v_b.x) + (v_a.y * v_b.y) + (v_a.z * v_b.z);
}

vector3d vector_cross(vector3d v_a, vector3d v_b) {
    350c:	2f 92       	push	r2
    350e:	3f 92       	push	r3
    3510:	4f 92       	push	r4
    3512:	5f 92       	push	r5
    3514:	6f 92       	push	r6
    3516:	7f 92       	push	r7
    3518:	8f 92       	push	r8
    351a:	9f 92       	push	r9
    351c:	af 92       	push	r10
    351e:	bf 92       	push	r11
    3520:	cf 92       	push	r12
    3522:	df 92       	push	r13
    3524:	ef 92       	push	r14
    3526:	ff 92       	push	r15
    3528:	0f 93       	push	r16
    352a:	1f 93       	push	r17
    352c:	cf 93       	push	r28
    352e:	df 93       	push	r29
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	6c 97       	sbiw	r28, 0x1c	; 28
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	f8 94       	cli
    353a:	de bf       	out	0x3e, r29	; 62
    353c:	0f be       	out	0x3f, r0	; 63
    353e:	cd bf       	out	0x3d, r28	; 61
    3540:	1c 01       	movw	r2, r24
    3542:	c9 82       	std	Y+1, r12	; 0x01
    3544:	da 82       	std	Y+2, r13	; 0x02
    3546:	eb 82       	std	Y+3, r14	; 0x03
    3548:	fc 82       	std	Y+4, r15	; 0x04
    354a:	0d 83       	std	Y+5, r16	; 0x05
    354c:	1e 83       	std	Y+6, r17	; 0x06
    354e:	2f 83       	std	Y+7, r18	; 0x07
    3550:	38 87       	std	Y+8, r19	; 0x08
    3552:	49 87       	std	Y+9, r20	; 0x09
    3554:	5a 87       	std	Y+10, r21	; 0x0a
    3556:	6b 87       	std	Y+11, r22	; 0x0b
    3558:	7c 87       	std	Y+12, r23	; 0x0c
    355a:	89 81       	ldd	r24, Y+1	; 0x01
    355c:	9a 81       	ldd	r25, Y+2	; 0x02
    355e:	ab 81       	ldd	r26, Y+3	; 0x03
    3560:	bc 81       	ldd	r27, Y+4	; 0x04
    3562:	8d 8b       	std	Y+21, r24	; 0x15
    3564:	9e 8b       	std	Y+22, r25	; 0x16
    3566:	af 8b       	std	Y+23, r26	; 0x17
    3568:	b8 8f       	std	Y+24, r27	; 0x18
    356a:	4d 80       	ldd	r4, Y+5	; 0x05
    356c:	5e 80       	ldd	r5, Y+6	; 0x06
    356e:	6f 80       	ldd	r6, Y+7	; 0x07
    3570:	78 84       	ldd	r7, Y+8	; 0x08
    3572:	89 84       	ldd	r8, Y+9	; 0x09
    3574:	9a 84       	ldd	r9, Y+10	; 0x0a
    3576:	ab 84       	ldd	r10, Y+11	; 0x0b
    3578:	bc 84       	ldd	r11, Y+12	; 0x0c
    357a:	89 a9       	ldd	r24, Y+49	; 0x31
    357c:	9a a9       	ldd	r25, Y+50	; 0x32
    357e:	ab a9       	ldd	r26, Y+51	; 0x33
    3580:	bc a9       	ldd	r27, Y+52	; 0x34
    3582:	89 8b       	std	Y+17, r24	; 0x11
    3584:	9a 8b       	std	Y+18, r25	; 0x12
    3586:	ab 8b       	std	Y+19, r26	; 0x13
    3588:	bc 8b       	std	Y+20, r27	; 0x14
    358a:	8d a9       	ldd	r24, Y+53	; 0x35
    358c:	9e a9       	ldd	r25, Y+54	; 0x36
    358e:	af a9       	ldd	r26, Y+55	; 0x37
    3590:	b8 ad       	ldd	r27, Y+56	; 0x38
    3592:	8d 87       	std	Y+13, r24	; 0x0d
    3594:	9e 87       	std	Y+14, r25	; 0x0e
    3596:	af 87       	std	Y+15, r26	; 0x0f
    3598:	b8 8b       	std	Y+16, r27	; 0x10
    359a:	c9 ac       	ldd	r12, Y+57	; 0x39
    359c:	da ac       	ldd	r13, Y+58	; 0x3a
    359e:	eb ac       	ldd	r14, Y+59	; 0x3b
    35a0:	fc ac       	ldd	r15, Y+60	; 0x3c
	vector3d ret;
	ret.x = (v_a.y * v_b.z) - (v_a.z * v_b.y);
    35a2:	a7 01       	movw	r20, r14
    35a4:	96 01       	movw	r18, r12
    35a6:	c3 01       	movw	r24, r6
    35a8:	b2 01       	movw	r22, r4
    35aa:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    35ae:	69 8f       	std	Y+25, r22	; 0x19
    35b0:	7a 8f       	std	Y+26, r23	; 0x1a
    35b2:	8b 8f       	std	Y+27, r24	; 0x1b
    35b4:	9c 8f       	std	Y+28, r25	; 0x1c
    35b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    35b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    35ba:	4f 85       	ldd	r20, Y+15	; 0x0f
    35bc:	58 89       	ldd	r21, Y+16	; 0x10
    35be:	c5 01       	movw	r24, r10
    35c0:	b4 01       	movw	r22, r8
    35c2:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    35c6:	9b 01       	movw	r18, r22
    35c8:	ac 01       	movw	r20, r24
    35ca:	69 8d       	ldd	r22, Y+25	; 0x19
    35cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35d2:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
	ret.y = (v_a.z * v_b.x) - (v_a.x * v_b.z);
	ret.z = (v_a.x * v_b.y) - (v_a.y * v_b.x);
	return ret;
    35d6:	d1 01       	movw	r26, r2
    35d8:	6d 93       	st	X+, r22
    35da:	7d 93       	st	X+, r23
    35dc:	8d 93       	st	X+, r24
    35de:	9c 93       	st	X, r25
    35e0:	13 97       	sbiw	r26, 0x03	; 3
}

vector3d vector_cross(vector3d v_a, vector3d v_b) {
	vector3d ret;
	ret.x = (v_a.y * v_b.z) - (v_a.z * v_b.y);
	ret.y = (v_a.z * v_b.x) - (v_a.x * v_b.z);
    35e2:	29 89       	ldd	r18, Y+17	; 0x11
    35e4:	3a 89       	ldd	r19, Y+18	; 0x12
    35e6:	4b 89       	ldd	r20, Y+19	; 0x13
    35e8:	5c 89       	ldd	r21, Y+20	; 0x14
    35ea:	c5 01       	movw	r24, r10
    35ec:	b4 01       	movw	r22, r8
    35ee:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    35f2:	4b 01       	movw	r8, r22
    35f4:	5c 01       	movw	r10, r24
    35f6:	a7 01       	movw	r20, r14
    35f8:	96 01       	movw	r18, r12
    35fa:	6d 89       	ldd	r22, Y+21	; 0x15
    35fc:	7e 89       	ldd	r23, Y+22	; 0x16
    35fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3600:	98 8d       	ldd	r25, Y+24	; 0x18
    3602:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    3606:	9b 01       	movw	r18, r22
    3608:	ac 01       	movw	r20, r24
    360a:	c5 01       	movw	r24, r10
    360c:	b4 01       	movw	r22, r8
    360e:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
	ret.z = (v_a.x * v_b.y) - (v_a.y * v_b.x);
	return ret;
    3612:	f1 01       	movw	r30, r2
    3614:	64 83       	std	Z+4, r22	; 0x04
    3616:	75 83       	std	Z+5, r23	; 0x05
    3618:	86 83       	std	Z+6, r24	; 0x06
    361a:	97 83       	std	Z+7, r25	; 0x07

vector3d vector_cross(vector3d v_a, vector3d v_b) {
	vector3d ret;
	ret.x = (v_a.y * v_b.z) - (v_a.z * v_b.y);
	ret.y = (v_a.z * v_b.x) - (v_a.x * v_b.z);
	ret.z = (v_a.x * v_b.y) - (v_a.y * v_b.x);
    361c:	2d 85       	ldd	r18, Y+13	; 0x0d
    361e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3620:	4f 85       	ldd	r20, Y+15	; 0x0f
    3622:	58 89       	ldd	r21, Y+16	; 0x10
    3624:	6d 89       	ldd	r22, Y+21	; 0x15
    3626:	7e 89       	ldd	r23, Y+22	; 0x16
    3628:	8f 89       	ldd	r24, Y+23	; 0x17
    362a:	98 8d       	ldd	r25, Y+24	; 0x18
    362c:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    3630:	6b 01       	movw	r12, r22
    3632:	7c 01       	movw	r14, r24
    3634:	29 89       	ldd	r18, Y+17	; 0x11
    3636:	3a 89       	ldd	r19, Y+18	; 0x12
    3638:	4b 89       	ldd	r20, Y+19	; 0x13
    363a:	5c 89       	ldd	r21, Y+20	; 0x14
    363c:	c3 01       	movw	r24, r6
    363e:	b2 01       	movw	r22, r4
    3640:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    3644:	9b 01       	movw	r18, r22
    3646:	ac 01       	movw	r20, r24
    3648:	c7 01       	movw	r24, r14
    364a:	b6 01       	movw	r22, r12
    364c:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
	return ret;
    3650:	d1 01       	movw	r26, r2
    3652:	18 96       	adiw	r26, 0x08	; 8
    3654:	6d 93       	st	X+, r22
    3656:	7d 93       	st	X+, r23
    3658:	8d 93       	st	X+, r24
    365a:	9c 93       	st	X, r25
    365c:	1b 97       	sbiw	r26, 0x0b	; 11
}
    365e:	c1 01       	movw	r24, r2
    3660:	6c 96       	adiw	r28, 0x1c	; 28
    3662:	0f b6       	in	r0, 0x3f	; 63
    3664:	f8 94       	cli
    3666:	de bf       	out	0x3e, r29	; 62
    3668:	0f be       	out	0x3f, r0	; 63
    366a:	cd bf       	out	0x3d, r28	; 61
    366c:	df 91       	pop	r29
    366e:	cf 91       	pop	r28
    3670:	1f 91       	pop	r17
    3672:	0f 91       	pop	r16
    3674:	ff 90       	pop	r15
    3676:	ef 90       	pop	r14
    3678:	df 90       	pop	r13
    367a:	cf 90       	pop	r12
    367c:	bf 90       	pop	r11
    367e:	af 90       	pop	r10
    3680:	9f 90       	pop	r9
    3682:	8f 90       	pop	r8
    3684:	7f 90       	pop	r7
    3686:	6f 90       	pop	r6
    3688:	5f 90       	pop	r5
    368a:	4f 90       	pop	r4
    368c:	3f 90       	pop	r3
    368e:	2f 90       	pop	r2
    3690:	08 95       	ret

00003692 <matrix_row_to_vector>:
 *      Author: root
 */

#include "ahrs/matrix.h"

vector3d matrix_row_to_vector(matrix3x3d *mat, uint8_t row_num) {
    3692:	8f 92       	push	r8
    3694:	9f 92       	push	r9
    3696:	af 92       	push	r10
    3698:	bf 92       	push	r11
    369a:	cf 92       	push	r12
    369c:	df 92       	push	r13
    369e:	ef 92       	push	r14
    36a0:	ff 92       	push	r15
    36a2:	0f 93       	push	r16
    36a4:	1f 93       	push	r17
    36a6:	fb 01       	movw	r30, r22
	vector3d ret;
	switch (row_num) {
    36a8:	42 30       	cpi	r20, 0x02	; 2
    36aa:	89 f0       	breq	.+34     	; 0x36ce <matrix_row_to_vector+0x3c>
    36ac:	43 30       	cpi	r20, 0x03	; 3
    36ae:	e1 f0       	breq	.+56     	; 0x36e8 <matrix_row_to_vector+0x56>
    36b0:	41 30       	cpi	r20, 0x01	; 1
    36b2:	31 f5       	brne	.+76     	; 0x3700 <matrix_row_to_vector+0x6e>
	case 1:
		ret.x = (*mat).r1[0];
    36b4:	80 80       	ld	r8, Z
    36b6:	91 80       	ldd	r9, Z+1	; 0x01
    36b8:	a2 80       	ldd	r10, Z+2	; 0x02
    36ba:	b3 80       	ldd	r11, Z+3	; 0x03
		ret.y = (*mat).r1[1];
    36bc:	c4 80       	ldd	r12, Z+4	; 0x04
    36be:	d5 80       	ldd	r13, Z+5	; 0x05
    36c0:	e6 80       	ldd	r14, Z+6	; 0x06
    36c2:	f7 80       	ldd	r15, Z+7	; 0x07
		ret.z = (*mat).r1[2];
    36c4:	00 85       	ldd	r16, Z+8	; 0x08
    36c6:	11 85       	ldd	r17, Z+9	; 0x09
    36c8:	22 85       	ldd	r18, Z+10	; 0x0a
    36ca:	33 85       	ldd	r19, Z+11	; 0x0b
		break;
    36cc:	19 c0       	rjmp	.+50     	; 0x3700 <matrix_row_to_vector+0x6e>
	case 2:
		ret.x = (*mat).r2[0];
    36ce:	84 84       	ldd	r8, Z+12	; 0x0c
    36d0:	95 84       	ldd	r9, Z+13	; 0x0d
    36d2:	a6 84       	ldd	r10, Z+14	; 0x0e
    36d4:	b7 84       	ldd	r11, Z+15	; 0x0f
		ret.y = (*mat).r2[1];
    36d6:	c0 88       	ldd	r12, Z+16	; 0x10
    36d8:	d1 88       	ldd	r13, Z+17	; 0x11
    36da:	e2 88       	ldd	r14, Z+18	; 0x12
    36dc:	f3 88       	ldd	r15, Z+19	; 0x13
		ret.z = (*mat).r2[2];
    36de:	04 89       	ldd	r16, Z+20	; 0x14
    36e0:	15 89       	ldd	r17, Z+21	; 0x15
    36e2:	26 89       	ldd	r18, Z+22	; 0x16
    36e4:	37 89       	ldd	r19, Z+23	; 0x17
		break;
    36e6:	0c c0       	rjmp	.+24     	; 0x3700 <matrix_row_to_vector+0x6e>
	case 3:
		ret.x = (*mat).r3[0];
    36e8:	80 8c       	ldd	r8, Z+24	; 0x18
    36ea:	91 8c       	ldd	r9, Z+25	; 0x19
    36ec:	a2 8c       	ldd	r10, Z+26	; 0x1a
    36ee:	b3 8c       	ldd	r11, Z+27	; 0x1b
		ret.y = (*mat).r3[1];
    36f0:	c4 8c       	ldd	r12, Z+28	; 0x1c
    36f2:	d5 8c       	ldd	r13, Z+29	; 0x1d
    36f4:	e6 8c       	ldd	r14, Z+30	; 0x1e
    36f6:	f7 8c       	ldd	r15, Z+31	; 0x1f
		ret.z = (*mat).r3[2];
    36f8:	00 a1       	ldd	r16, Z+32	; 0x20
    36fa:	11 a1       	ldd	r17, Z+33	; 0x21
    36fc:	22 a1       	ldd	r18, Z+34	; 0x22
    36fe:	33 a1       	ldd	r19, Z+35	; 0x23
		break;
	}
	return ret;
    3700:	fc 01       	movw	r30, r24
    3702:	80 82       	st	Z, r8
    3704:	91 82       	std	Z+1, r9	; 0x01
    3706:	a2 82       	std	Z+2, r10	; 0x02
    3708:	b3 82       	std	Z+3, r11	; 0x03
    370a:	c4 82       	std	Z+4, r12	; 0x04
    370c:	d5 82       	std	Z+5, r13	; 0x05
    370e:	e6 82       	std	Z+6, r14	; 0x06
    3710:	f7 82       	std	Z+7, r15	; 0x07
    3712:	00 87       	std	Z+8, r16	; 0x08
    3714:	11 87       	std	Z+9, r17	; 0x09
    3716:	22 87       	std	Z+10, r18	; 0x0a
    3718:	33 87       	std	Z+11, r19	; 0x0b
}
    371a:	1f 91       	pop	r17
    371c:	0f 91       	pop	r16
    371e:	ff 90       	pop	r15
    3720:	ef 90       	pop	r14
    3722:	df 90       	pop	r13
    3724:	cf 90       	pop	r12
    3726:	bf 90       	pop	r11
    3728:	af 90       	pop	r10
    372a:	9f 90       	pop	r9
    372c:	8f 90       	pop	r8
    372e:	08 95       	ret

00003730 <matrix_vector_to_row>:

void matrix_vector_to_row(matrix3x3d *mat, vector3d vec, uint8_t row_num) {
    3730:	af 92       	push	r10
    3732:	cf 92       	push	r12
    3734:	df 92       	push	r13
    3736:	ef 92       	push	r14
    3738:	ff 92       	push	r15
    373a:	0f 93       	push	r16
    373c:	1f 93       	push	r17
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	2c 97       	sbiw	r28, 0x0c	; 12
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	f8 94       	cli
    374c:	de bf       	out	0x3e, r29	; 62
    374e:	0f be       	out	0x3f, r0	; 63
    3750:	cd bf       	out	0x3d, r28	; 61
    3752:	fc 01       	movw	r30, r24
    3754:	c9 82       	std	Y+1, r12	; 0x01
    3756:	da 82       	std	Y+2, r13	; 0x02
    3758:	eb 82       	std	Y+3, r14	; 0x03
    375a:	fc 82       	std	Y+4, r15	; 0x04
    375c:	0d 83       	std	Y+5, r16	; 0x05
    375e:	1e 83       	std	Y+6, r17	; 0x06
    3760:	2f 83       	std	Y+7, r18	; 0x07
    3762:	38 87       	std	Y+8, r19	; 0x08
    3764:	49 87       	std	Y+9, r20	; 0x09
    3766:	5a 87       	std	Y+10, r21	; 0x0a
    3768:	6b 87       	std	Y+11, r22	; 0x0b
    376a:	7c 87       	std	Y+12, r23	; 0x0c
    376c:	09 81       	ldd	r16, Y+1	; 0x01
    376e:	1a 81       	ldd	r17, Y+2	; 0x02
    3770:	2b 81       	ldd	r18, Y+3	; 0x03
    3772:	3c 81       	ldd	r19, Y+4	; 0x04
    3774:	4d 81       	ldd	r20, Y+5	; 0x05
    3776:	5e 81       	ldd	r21, Y+6	; 0x06
    3778:	6f 81       	ldd	r22, Y+7	; 0x07
    377a:	78 85       	ldd	r23, Y+8	; 0x08
    377c:	89 85       	ldd	r24, Y+9	; 0x09
    377e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3780:	ab 85       	ldd	r26, Y+11	; 0x0b
    3782:	bc 85       	ldd	r27, Y+12	; 0x0c
	switch (row_num) {
    3784:	68 94       	set
    3786:	ff 24       	eor	r15, r15
    3788:	f1 f8       	bld	r15, 1
    378a:	af 14       	cp	r10, r15
    378c:	b9 f0       	breq	.+46     	; 0x37bc <matrix_vector_to_row+0x8c>
    378e:	0f 2e       	mov	r0, r31
    3790:	f3 e0       	ldi	r31, 0x03	; 3
    3792:	ff 2e       	mov	r15, r31
    3794:	f0 2d       	mov	r31, r0
    3796:	af 14       	cp	r10, r15
    3798:	f1 f0       	breq	.+60     	; 0x37d6 <matrix_vector_to_row+0xa6>
    379a:	ff 24       	eor	r15, r15
    379c:	f3 94       	inc	r15
    379e:	af 10       	cpse	r10, r15
    37a0:	26 c0       	rjmp	.+76     	; 0x37ee <matrix_vector_to_row+0xbe>
	case 1:
		(*mat).r1[0] = vec.x;
    37a2:	00 83       	st	Z, r16
    37a4:	11 83       	std	Z+1, r17	; 0x01
    37a6:	22 83       	std	Z+2, r18	; 0x02
    37a8:	33 83       	std	Z+3, r19	; 0x03
		(*mat).r1[1] = vec.y;
    37aa:	44 83       	std	Z+4, r20	; 0x04
    37ac:	55 83       	std	Z+5, r21	; 0x05
    37ae:	66 83       	std	Z+6, r22	; 0x06
    37b0:	77 83       	std	Z+7, r23	; 0x07
		(*mat).r1[2] = vec.z;
    37b2:	80 87       	std	Z+8, r24	; 0x08
    37b4:	91 87       	std	Z+9, r25	; 0x09
    37b6:	a2 87       	std	Z+10, r26	; 0x0a
    37b8:	b3 87       	std	Z+11, r27	; 0x0b
		break;
    37ba:	19 c0       	rjmp	.+50     	; 0x37ee <matrix_vector_to_row+0xbe>
	case 2:
		(*mat).r2[0] = vec.x;
    37bc:	04 87       	std	Z+12, r16	; 0x0c
    37be:	15 87       	std	Z+13, r17	; 0x0d
    37c0:	26 87       	std	Z+14, r18	; 0x0e
    37c2:	37 87       	std	Z+15, r19	; 0x0f
		(*mat).r2[1] = vec.y;
    37c4:	40 8b       	std	Z+16, r20	; 0x10
    37c6:	51 8b       	std	Z+17, r21	; 0x11
    37c8:	62 8b       	std	Z+18, r22	; 0x12
    37ca:	73 8b       	std	Z+19, r23	; 0x13
		(*mat).r2[2] = vec.z;
    37cc:	84 8b       	std	Z+20, r24	; 0x14
    37ce:	95 8b       	std	Z+21, r25	; 0x15
    37d0:	a6 8b       	std	Z+22, r26	; 0x16
    37d2:	b7 8b       	std	Z+23, r27	; 0x17
		break;
    37d4:	0c c0       	rjmp	.+24     	; 0x37ee <matrix_vector_to_row+0xbe>
	case 3:
		(*mat).r3[0] = vec.x;
    37d6:	00 8f       	std	Z+24, r16	; 0x18
    37d8:	11 8f       	std	Z+25, r17	; 0x19
    37da:	22 8f       	std	Z+26, r18	; 0x1a
    37dc:	33 8f       	std	Z+27, r19	; 0x1b
		(*mat).r3[1] = vec.y;
    37de:	44 8f       	std	Z+28, r20	; 0x1c
    37e0:	55 8f       	std	Z+29, r21	; 0x1d
    37e2:	66 8f       	std	Z+30, r22	; 0x1e
    37e4:	77 8f       	std	Z+31, r23	; 0x1f
		(*mat).r3[2] = vec.z;
    37e6:	80 a3       	std	Z+32, r24	; 0x20
    37e8:	91 a3       	std	Z+33, r25	; 0x21
    37ea:	a2 a3       	std	Z+34, r26	; 0x22
    37ec:	b3 a3       	std	Z+35, r27	; 0x23
		break;
	}
}
    37ee:	2c 96       	adiw	r28, 0x0c	; 12
    37f0:	0f b6       	in	r0, 0x3f	; 63
    37f2:	f8 94       	cli
    37f4:	de bf       	out	0x3e, r29	; 62
    37f6:	0f be       	out	0x3f, r0	; 63
    37f8:	cd bf       	out	0x3d, r28	; 61
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	1f 91       	pop	r17
    3800:	0f 91       	pop	r16
    3802:	ff 90       	pop	r15
    3804:	ef 90       	pop	r14
    3806:	df 90       	pop	r13
    3808:	cf 90       	pop	r12
    380a:	af 90       	pop	r10
    380c:	08 95       	ret

0000380e <matrix_vector_prod>:

vector3d matrix_vector_prod(matrix3x3d *mat, vector3d v) {
    380e:	2f 92       	push	r2
    3810:	3f 92       	push	r3
    3812:	4f 92       	push	r4
    3814:	5f 92       	push	r5
    3816:	6f 92       	push	r6
    3818:	7f 92       	push	r7
    381a:	8f 92       	push	r8
    381c:	9f 92       	push	r9
    381e:	af 92       	push	r10
    3820:	bf 92       	push	r11
    3822:	cf 92       	push	r12
    3824:	df 92       	push	r13
    3826:	ef 92       	push	r14
    3828:	ff 92       	push	r15
    382a:	0f 93       	push	r16
    382c:	1f 93       	push	r17
    382e:	cf 93       	push	r28
    3830:	df 93       	push	r29
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	66 97       	sbiw	r28, 0x16	; 22
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	f8 94       	cli
    383c:	de bf       	out	0x3e, r29	; 62
    383e:	0f be       	out	0x3f, r0	; 63
    3840:	cd bf       	out	0x3d, r28	; 61
    3842:	9e 87       	std	Y+14, r25	; 0x0e
    3844:	8d 87       	std	Y+13, r24	; 0x0d
    3846:	1b 01       	movw	r2, r22
    3848:	a9 82       	std	Y+1, r10	; 0x01
    384a:	ba 82       	std	Y+2, r11	; 0x02
    384c:	cb 82       	std	Y+3, r12	; 0x03
    384e:	dc 82       	std	Y+4, r13	; 0x04
    3850:	ed 82       	std	Y+5, r14	; 0x05
    3852:	fe 82       	std	Y+6, r15	; 0x06
    3854:	0f 83       	std	Y+7, r16	; 0x07
    3856:	18 87       	std	Y+8, r17	; 0x08
    3858:	29 87       	std	Y+9, r18	; 0x09
    385a:	3a 87       	std	Y+10, r19	; 0x0a
    385c:	4b 87       	std	Y+11, r20	; 0x0b
    385e:	5c 87       	std	Y+12, r21	; 0x0c
    3860:	89 80       	ldd	r8, Y+1	; 0x01
    3862:	9a 80       	ldd	r9, Y+2	; 0x02
    3864:	ab 80       	ldd	r10, Y+3	; 0x03
    3866:	bc 80       	ldd	r11, Y+4	; 0x04
    3868:	cd 80       	ldd	r12, Y+5	; 0x05
    386a:	de 80       	ldd	r13, Y+6	; 0x06
    386c:	ef 80       	ldd	r14, Y+7	; 0x07
    386e:	f8 84       	ldd	r15, Y+8	; 0x08
    3870:	89 85       	ldd	r24, Y+9	; 0x09
    3872:	9a 85       	ldd	r25, Y+10	; 0x0a
    3874:	ab 85       	ldd	r26, Y+11	; 0x0b
    3876:	bc 85       	ldd	r27, Y+12	; 0x0c
    3878:	8f 87       	std	Y+15, r24	; 0x0f
    387a:	98 8b       	std	Y+16, r25	; 0x10
    387c:	a9 8b       	std	Y+17, r26	; 0x11
    387e:	ba 8b       	std	Y+18, r27	; 0x12
	vector3d res;

	res.x = ((*mat).r1[0] * v.x) + ((*mat).r1[1] * v.y) + ((*mat).r1[2] * v.z);
	res.y = ((*mat).r2[0] * v.x) + ((*mat).r2[1] * v.y) + ((*mat).r2[2] * v.z);
    3880:	db 01       	movw	r26, r22
    3882:	1c 96       	adiw	r26, 0x0c	; 12
    3884:	2d 91       	ld	r18, X+
    3886:	3d 91       	ld	r19, X+
    3888:	4d 91       	ld	r20, X+
    388a:	5c 91       	ld	r21, X
    388c:	1f 97       	sbiw	r26, 0x0f	; 15
    388e:	c5 01       	movw	r24, r10
    3890:	b4 01       	movw	r22, r8
    3892:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    3896:	2b 01       	movw	r4, r22
    3898:	3c 01       	movw	r6, r24
    389a:	f1 01       	movw	r30, r2
    389c:	20 89       	ldd	r18, Z+16	; 0x10
    389e:	31 89       	ldd	r19, Z+17	; 0x11
    38a0:	42 89       	ldd	r20, Z+18	; 0x12
    38a2:	53 89       	ldd	r21, Z+19	; 0x13
    38a4:	c7 01       	movw	r24, r14
    38a6:	b6 01       	movw	r22, r12
    38a8:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    38ac:	9b 01       	movw	r18, r22
    38ae:	ac 01       	movw	r20, r24
    38b0:	c3 01       	movw	r24, r6
    38b2:	b2 01       	movw	r22, r4
    38b4:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    38b8:	2b 01       	movw	r4, r22
    38ba:	3c 01       	movw	r6, r24
    38bc:	d1 01       	movw	r26, r2
    38be:	54 96       	adiw	r26, 0x14	; 20
    38c0:	2d 91       	ld	r18, X+
    38c2:	3d 91       	ld	r19, X+
    38c4:	4d 91       	ld	r20, X+
    38c6:	5c 91       	ld	r21, X
    38c8:	57 97       	sbiw	r26, 0x17	; 23
    38ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    38cc:	78 89       	ldd	r23, Y+16	; 0x10
    38ce:	89 89       	ldd	r24, Y+17	; 0x11
    38d0:	9a 89       	ldd	r25, Y+18	; 0x12
    38d2:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    38d6:	9b 01       	movw	r18, r22
    38d8:	ac 01       	movw	r20, r24
    38da:	c3 01       	movw	r24, r6
    38dc:	b2 01       	movw	r22, r4
    38de:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    38e2:	6b 8b       	std	Y+19, r22	; 0x13
    38e4:	7c 8b       	std	Y+20, r23	; 0x14
    38e6:	8d 8b       	std	Y+21, r24	; 0x15
    38e8:	9e 8b       	std	Y+22, r25	; 0x16
	res.z = ((*mat).r3[0] * v.x) + ((*mat).r3[1] * v.y) + ((*mat).r3[2] * v.z);
    38ea:	f1 01       	movw	r30, r2
    38ec:	20 8d       	ldd	r18, Z+24	; 0x18
    38ee:	31 8d       	ldd	r19, Z+25	; 0x19
    38f0:	42 8d       	ldd	r20, Z+26	; 0x1a
    38f2:	53 8d       	ldd	r21, Z+27	; 0x1b
    38f4:	c5 01       	movw	r24, r10
    38f6:	b4 01       	movw	r22, r8
    38f8:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    38fc:	2b 01       	movw	r4, r22
    38fe:	3c 01       	movw	r6, r24
    3900:	d1 01       	movw	r26, r2
    3902:	5c 96       	adiw	r26, 0x1c	; 28
    3904:	2d 91       	ld	r18, X+
    3906:	3d 91       	ld	r19, X+
    3908:	4d 91       	ld	r20, X+
    390a:	5c 91       	ld	r21, X
    390c:	5f 97       	sbiw	r26, 0x1f	; 31
    390e:	c7 01       	movw	r24, r14
    3910:	b6 01       	movw	r22, r12
    3912:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    3916:	9b 01       	movw	r18, r22
    3918:	ac 01       	movw	r20, r24
    391a:	c3 01       	movw	r24, r6
    391c:	b2 01       	movw	r22, r4
    391e:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    3922:	2b 01       	movw	r4, r22
    3924:	3c 01       	movw	r6, r24
    3926:	f1 01       	movw	r30, r2
    3928:	20 a1       	ldd	r18, Z+32	; 0x20
    392a:	31 a1       	ldd	r19, Z+33	; 0x21
    392c:	42 a1       	ldd	r20, Z+34	; 0x22
    392e:	53 a1       	ldd	r21, Z+35	; 0x23
    3930:	6f 85       	ldd	r22, Y+15	; 0x0f
    3932:	78 89       	ldd	r23, Y+16	; 0x10
    3934:	89 89       	ldd	r24, Y+17	; 0x11
    3936:	9a 89       	ldd	r25, Y+18	; 0x12
    3938:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    393c:	9b 01       	movw	r18, r22
    393e:	ac 01       	movw	r20, r24
    3940:	c3 01       	movw	r24, r6
    3942:	b2 01       	movw	r22, r4
    3944:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    3948:	2b 01       	movw	r4, r22
    394a:	3c 01       	movw	r6, r24
}

vector3d matrix_vector_prod(matrix3x3d *mat, vector3d v) {
	vector3d res;

	res.x = ((*mat).r1[0] * v.x) + ((*mat).r1[1] * v.y) + ((*mat).r1[2] * v.z);
    394c:	d1 01       	movw	r26, r2
    394e:	2d 91       	ld	r18, X+
    3950:	3d 91       	ld	r19, X+
    3952:	4d 91       	ld	r20, X+
    3954:	5c 91       	ld	r21, X
    3956:	c5 01       	movw	r24, r10
    3958:	b4 01       	movw	r22, r8
    395a:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    395e:	4b 01       	movw	r8, r22
    3960:	5c 01       	movw	r10, r24
    3962:	f1 01       	movw	r30, r2
    3964:	24 81       	ldd	r18, Z+4	; 0x04
    3966:	35 81       	ldd	r19, Z+5	; 0x05
    3968:	46 81       	ldd	r20, Z+6	; 0x06
    396a:	57 81       	ldd	r21, Z+7	; 0x07
    396c:	c7 01       	movw	r24, r14
    396e:	b6 01       	movw	r22, r12
    3970:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    3974:	9b 01       	movw	r18, r22
    3976:	ac 01       	movw	r20, r24
    3978:	c5 01       	movw	r24, r10
    397a:	b4 01       	movw	r22, r8
    397c:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    3980:	6b 01       	movw	r12, r22
    3982:	7c 01       	movw	r14, r24
    3984:	d1 01       	movw	r26, r2
    3986:	18 96       	adiw	r26, 0x08	; 8
    3988:	2d 91       	ld	r18, X+
    398a:	3d 91       	ld	r19, X+
    398c:	4d 91       	ld	r20, X+
    398e:	5c 91       	ld	r21, X
    3990:	1b 97       	sbiw	r26, 0x0b	; 11
    3992:	6f 85       	ldd	r22, Y+15	; 0x0f
    3994:	78 89       	ldd	r23, Y+16	; 0x10
    3996:	89 89       	ldd	r24, Y+17	; 0x11
    3998:	9a 89       	ldd	r25, Y+18	; 0x12
    399a:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    399e:	9b 01       	movw	r18, r22
    39a0:	ac 01       	movw	r20, r24
    39a2:	c7 01       	movw	r24, r14
    39a4:	b6 01       	movw	r22, r12
    39a6:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
	res.y = ((*mat).r2[0] * v.x) + ((*mat).r2[1] * v.y) + ((*mat).r2[2] * v.z);
	res.z = ((*mat).r3[0] * v.x) + ((*mat).r3[1] * v.y) + ((*mat).r3[2] * v.z);

	return res;
    39aa:	ed 85       	ldd	r30, Y+13	; 0x0d
    39ac:	fe 85       	ldd	r31, Y+14	; 0x0e
    39ae:	60 83       	st	Z, r22
    39b0:	71 83       	std	Z+1, r23	; 0x01
    39b2:	82 83       	std	Z+2, r24	; 0x02
    39b4:	93 83       	std	Z+3, r25	; 0x03
    39b6:	8b 89       	ldd	r24, Y+19	; 0x13
    39b8:	9c 89       	ldd	r25, Y+20	; 0x14
    39ba:	ad 89       	ldd	r26, Y+21	; 0x15
    39bc:	be 89       	ldd	r27, Y+22	; 0x16
    39be:	84 83       	std	Z+4, r24	; 0x04
    39c0:	95 83       	std	Z+5, r25	; 0x05
    39c2:	a6 83       	std	Z+6, r26	; 0x06
    39c4:	b7 83       	std	Z+7, r27	; 0x07
    39c6:	40 86       	std	Z+8, r4	; 0x08
    39c8:	51 86       	std	Z+9, r5	; 0x09
    39ca:	62 86       	std	Z+10, r6	; 0x0a
    39cc:	73 86       	std	Z+11, r7	; 0x0b
}
    39ce:	cf 01       	movw	r24, r30
    39d0:	66 96       	adiw	r28, 0x16	; 22
    39d2:	0f b6       	in	r0, 0x3f	; 63
    39d4:	f8 94       	cli
    39d6:	de bf       	out	0x3e, r29	; 62
    39d8:	0f be       	out	0x3f, r0	; 63
    39da:	cd bf       	out	0x3d, r28	; 61
    39dc:	df 91       	pop	r29
    39de:	cf 91       	pop	r28
    39e0:	1f 91       	pop	r17
    39e2:	0f 91       	pop	r16
    39e4:	ff 90       	pop	r15
    39e6:	ef 90       	pop	r14
    39e8:	df 90       	pop	r13
    39ea:	cf 90       	pop	r12
    39ec:	bf 90       	pop	r11
    39ee:	af 90       	pop	r10
    39f0:	9f 90       	pop	r9
    39f2:	8f 90       	pop	r8
    39f4:	7f 90       	pop	r7
    39f6:	6f 90       	pop	r6
    39f8:	5f 90       	pop	r5
    39fa:	4f 90       	pop	r4
    39fc:	3f 90       	pop	r3
    39fe:	2f 90       	pop	r2
    3a00:	08 95       	ret

00003a02 <matrix_transpose>:

matrix3x3d matrix_transpose(matrix3x3d *mat) {
    3a02:	2f 92       	push	r2
    3a04:	3f 92       	push	r3
    3a06:	4f 92       	push	r4
    3a08:	5f 92       	push	r5
    3a0a:	6f 92       	push	r6
    3a0c:	7f 92       	push	r7
    3a0e:	8f 92       	push	r8
    3a10:	9f 92       	push	r9
    3a12:	af 92       	push	r10
    3a14:	bf 92       	push	r11
    3a16:	cf 92       	push	r12
    3a18:	df 92       	push	r13
    3a1a:	ef 92       	push	r14
    3a1c:	ff 92       	push	r15
    3a1e:	0f 93       	push	r16
    3a20:	1f 93       	push	r17
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	cd b7       	in	r28, 0x3d	; 61
    3a28:	de b7       	in	r29, 0x3e	; 62
    3a2a:	2e 97       	sbiw	r28, 0x0e	; 14
    3a2c:	0f b6       	in	r0, 0x3f	; 63
    3a2e:	f8 94       	cli
    3a30:	de bf       	out	0x3e, r29	; 62
    3a32:	0f be       	out	0x3f, r0	; 63
    3a34:	cd bf       	out	0x3d, r28	; 61
    3a36:	1c 01       	movw	r2, r24
	matrix3x3d res;

	res.r1[0] = (*mat).r1[0];
	res.r1[1] = (*mat).r2[0];
    3a38:	db 01       	movw	r26, r22
    3a3a:	1c 96       	adiw	r26, 0x0c	; 12
    3a3c:	4d 90       	ld	r4, X+
    3a3e:	5d 90       	ld	r5, X+
    3a40:	6d 90       	ld	r6, X+
    3a42:	7c 90       	ld	r7, X
    3a44:	1f 97       	sbiw	r26, 0x0f	; 15
	res.r1[2] = (*mat).r3[0];
    3a46:	58 96       	adiw	r26, 0x18	; 24
    3a48:	8d 90       	ld	r8, X+
    3a4a:	9d 90       	ld	r9, X+
    3a4c:	ad 90       	ld	r10, X+
    3a4e:	bc 90       	ld	r11, X
    3a50:	5b 97       	sbiw	r26, 0x1b	; 27

	res.r2[0] = (*mat).r1[1];
    3a52:	14 96       	adiw	r26, 0x04	; 4
    3a54:	cd 90       	ld	r12, X+
    3a56:	dd 90       	ld	r13, X+
    3a58:	ed 90       	ld	r14, X+
    3a5a:	fc 90       	ld	r15, X
    3a5c:	17 97       	sbiw	r26, 0x07	; 7
	res.r2[1] = (*mat).r2[1];
    3a5e:	50 96       	adiw	r26, 0x10	; 16
    3a60:	0d 91       	ld	r16, X+
    3a62:	1d 91       	ld	r17, X+
    3a64:	2d 91       	ld	r18, X+
    3a66:	3c 91       	ld	r19, X
    3a68:	53 97       	sbiw	r26, 0x13	; 19
	res.r2[2] = (*mat).r3[1];
    3a6a:	5c 96       	adiw	r26, 0x1c	; 28
    3a6c:	4d 91       	ld	r20, X+
    3a6e:	5d 91       	ld	r21, X+
    3a70:	6d 91       	ld	r22, X+
    3a72:	7c 91       	ld	r23, X
    3a74:	5f 97       	sbiw	r26, 0x1f	; 31
    3a76:	49 83       	std	Y+1, r20	; 0x01
    3a78:	5a 83       	std	Y+2, r21	; 0x02
    3a7a:	6b 83       	std	Y+3, r22	; 0x03
    3a7c:	7c 83       	std	Y+4, r23	; 0x04

	res.r3[0] = (*mat).r1[2];
    3a7e:	18 96       	adiw	r26, 0x08	; 8
    3a80:	4d 91       	ld	r20, X+
    3a82:	5d 91       	ld	r21, X+
    3a84:	6d 91       	ld	r22, X+
    3a86:	7c 91       	ld	r23, X
    3a88:	1b 97       	sbiw	r26, 0x0b	; 11
    3a8a:	4d 83       	std	Y+5, r20	; 0x05
    3a8c:	5e 83       	std	Y+6, r21	; 0x06
    3a8e:	6f 83       	std	Y+7, r22	; 0x07
    3a90:	78 87       	std	Y+8, r23	; 0x08
	res.r3[1] = (*mat).r2[2];
    3a92:	54 96       	adiw	r26, 0x14	; 20
    3a94:	4d 91       	ld	r20, X+
    3a96:	5d 91       	ld	r21, X+
    3a98:	6d 91       	ld	r22, X+
    3a9a:	7c 91       	ld	r23, X
    3a9c:	57 97       	sbiw	r26, 0x17	; 23
    3a9e:	49 87       	std	Y+9, r20	; 0x09
    3aa0:	5a 87       	std	Y+10, r21	; 0x0a
    3aa2:	6b 87       	std	Y+11, r22	; 0x0b
    3aa4:	7c 87       	std	Y+12, r23	; 0x0c
	res.r3[2] = (*mat).r3[2];
    3aa6:	90 96       	adiw	r26, 0x20	; 32
    3aa8:	4d 91       	ld	r20, X+
    3aaa:	5d 91       	ld	r21, X+
    3aac:	6d 91       	ld	r22, X+
    3aae:	7c 91       	ld	r23, X
    3ab0:	93 97       	sbiw	r26, 0x23	; 35

	return res;
    3ab2:	8d 91       	ld	r24, X+
    3ab4:	9d 91       	ld	r25, X+
    3ab6:	0d 90       	ld	r0, X+
    3ab8:	bc 91       	ld	r27, X
    3aba:	a0 2d       	mov	r26, r0
    3abc:	f1 01       	movw	r30, r2
    3abe:	80 83       	st	Z, r24
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	a2 83       	std	Z+2, r26	; 0x02
    3ac4:	b3 83       	std	Z+3, r27	; 0x03
    3ac6:	44 82       	std	Z+4, r4	; 0x04
    3ac8:	55 82       	std	Z+5, r5	; 0x05
    3aca:	66 82       	std	Z+6, r6	; 0x06
    3acc:	77 82       	std	Z+7, r7	; 0x07
    3ace:	80 86       	std	Z+8, r8	; 0x08
    3ad0:	91 86       	std	Z+9, r9	; 0x09
    3ad2:	a2 86       	std	Z+10, r10	; 0x0a
    3ad4:	b3 86       	std	Z+11, r11	; 0x0b
    3ad6:	c4 86       	std	Z+12, r12	; 0x0c
    3ad8:	d5 86       	std	Z+13, r13	; 0x0d
    3ada:	e6 86       	std	Z+14, r14	; 0x0e
    3adc:	f7 86       	std	Z+15, r15	; 0x0f
    3ade:	00 8b       	std	Z+16, r16	; 0x10
    3ae0:	11 8b       	std	Z+17, r17	; 0x11
    3ae2:	22 8b       	std	Z+18, r18	; 0x12
    3ae4:	33 8b       	std	Z+19, r19	; 0x13
    3ae6:	89 81       	ldd	r24, Y+1	; 0x01
    3ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    3aea:	ab 81       	ldd	r26, Y+3	; 0x03
    3aec:	bc 81       	ldd	r27, Y+4	; 0x04
    3aee:	84 8b       	std	Z+20, r24	; 0x14
    3af0:	95 8b       	std	Z+21, r25	; 0x15
    3af2:	a6 8b       	std	Z+22, r26	; 0x16
    3af4:	b7 8b       	std	Z+23, r27	; 0x17
    3af6:	8d 81       	ldd	r24, Y+5	; 0x05
    3af8:	9e 81       	ldd	r25, Y+6	; 0x06
    3afa:	af 81       	ldd	r26, Y+7	; 0x07
    3afc:	b8 85       	ldd	r27, Y+8	; 0x08
    3afe:	80 8f       	std	Z+24, r24	; 0x18
    3b00:	91 8f       	std	Z+25, r25	; 0x19
    3b02:	a2 8f       	std	Z+26, r26	; 0x1a
    3b04:	b3 8f       	std	Z+27, r27	; 0x1b
    3b06:	89 85       	ldd	r24, Y+9	; 0x09
    3b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0a:	ab 85       	ldd	r26, Y+11	; 0x0b
    3b0c:	bc 85       	ldd	r27, Y+12	; 0x0c
    3b0e:	84 8f       	std	Z+28, r24	; 0x1c
    3b10:	95 8f       	std	Z+29, r25	; 0x1d
    3b12:	a6 8f       	std	Z+30, r26	; 0x1e
    3b14:	b7 8f       	std	Z+31, r27	; 0x1f
    3b16:	40 a3       	std	Z+32, r20	; 0x20
    3b18:	51 a3       	std	Z+33, r21	; 0x21
    3b1a:	62 a3       	std	Z+34, r22	; 0x22
    3b1c:	73 a3       	std	Z+35, r23	; 0x23
}
    3b1e:	c1 01       	movw	r24, r2
    3b20:	2e 96       	adiw	r28, 0x0e	; 14
    3b22:	0f b6       	in	r0, 0x3f	; 63
    3b24:	f8 94       	cli
    3b26:	de bf       	out	0x3e, r29	; 62
    3b28:	0f be       	out	0x3f, r0	; 63
    3b2a:	cd bf       	out	0x3d, r28	; 61
    3b2c:	df 91       	pop	r29
    3b2e:	cf 91       	pop	r28
    3b30:	1f 91       	pop	r17
    3b32:	0f 91       	pop	r16
    3b34:	ff 90       	pop	r15
    3b36:	ef 90       	pop	r14
    3b38:	df 90       	pop	r13
    3b3a:	cf 90       	pop	r12
    3b3c:	bf 90       	pop	r11
    3b3e:	af 90       	pop	r10
    3b40:	9f 90       	pop	r9
    3b42:	8f 90       	pop	r8
    3b44:	7f 90       	pop	r7
    3b46:	6f 90       	pop	r6
    3b48:	5f 90       	pop	r5
    3b4a:	4f 90       	pop	r4
    3b4c:	3f 90       	pop	r3
    3b4e:	2f 90       	pop	r2
    3b50:	08 95       	ret

00003b52 <ahrs_init>:
#include "ahrs/display.h"
#include <math.h>
#include <stdio.h>
#include <util/delay.h>

void ahrs_init(dataexchange_t *data, u8g_t *disp, params_t *calib_params) {
    3b52:	4f 92       	push	r4
    3b54:	5f 92       	push	r5
    3b56:	6f 92       	push	r6
    3b58:	7f 92       	push	r7
    3b5a:	8f 92       	push	r8
    3b5c:	9f 92       	push	r9
    3b5e:	af 92       	push	r10
    3b60:	cf 92       	push	r12
    3b62:	df 92       	push	r13
    3b64:	ef 92       	push	r14
    3b66:	ff 92       	push	r15
    3b68:	0f 93       	push	r16
    3b6a:	1f 93       	push	r17
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	cd b7       	in	r28, 0x3d	; 61
    3b72:	de b7       	in	r29, 0x3e	; 62
    3b74:	c4 58       	subi	r28, 0x84	; 132
    3b76:	d1 09       	sbc	r29, r1
    3b78:	0f b6       	in	r0, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	de bf       	out	0x3e, r29	; 62
    3b7e:	0f be       	out	0x3f, r0	; 63
    3b80:	cd bf       	out	0x3d, r28	; 61
    3b82:	4c 01       	movw	r8, r24
	//vectors for absolute rotation matrix
	vector3d acc_v, mag_v;
	matrix3x3d initial_rmat;
	quaternion initial_q;

	calib_ptr = calib_params;
    3b84:	50 93 0c 02 	sts	0x020C, r21
    3b88:	40 93 0b 02 	sts	0x020B, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3b8c:	2f ef       	ldi	r18, 0xFF	; 255
    3b8e:	87 ea       	ldi	r24, 0xA7	; 167
    3b90:	91 e6       	ldi	r25, 0x61	; 97
    3b92:	21 50       	subi	r18, 0x01	; 1
    3b94:	80 40       	sbci	r24, 0x00	; 0
    3b96:	90 40       	sbci	r25, 0x00	; 0
    3b98:	e1 f7       	brne	.-8      	; 0x3b92 <ahrs_init+0x40>
    3b9a:	00 c0       	rjmp	.+0      	; 0x3b9c <ahrs_init+0x4a>
    3b9c:	00 00       	nop

	int16_t amount = 100;

	//show init start message
	_delay_ms(2000);
	display_draw_line2x("Initialization,", "please stand still");
    3b9e:	66 e1       	ldi	r22, 0x16	; 22
    3ba0:	71 e0       	ldi	r23, 0x01	; 1
    3ba2:	89 e2       	ldi	r24, 0x29	; 41
    3ba4:	91 e0       	ldi	r25, 0x01	; 1
    3ba6:	bb da       	rcall	.-2698   	; 0x311e <display_draw_line2x>
    3ba8:	ef ef       	ldi	r30, 0xFF	; 255
    3baa:	f7 ea       	ldi	r31, 0xA7	; 167
    3bac:	21 e6       	ldi	r18, 0x61	; 97
    3bae:	e1 50       	subi	r30, 0x01	; 1
    3bb0:	f0 40       	sbci	r31, 0x00	; 0
    3bb2:	20 40       	sbci	r18, 0x00	; 0
    3bb4:	e1 f7       	brne	.-8      	; 0x3bae <ahrs_init+0x5c>
    3bb6:	00 c0       	rjmp	.+0      	; 0x3bb8 <ahrs_init+0x66>
    3bb8:	00 00       	nop
    3bba:	6d 96       	adiw	r28, 0x1d	; 29

	acc_v.x = 0.0;
	acc_v.y = 0.0;
	acc_v.z = 0.0;

	mag_v.x = 0.0;
    3bbc:	1c ae       	std	Y+60, r1	; 0x3c
    3bbe:	1d ae       	std	Y+61, r1	; 0x3d
    3bc0:	1e ae       	std	Y+62, r1	; 0x3e
    3bc2:	1f ae       	std	Y+63, r1	; 0x3f
    3bc4:	6d 97       	sbiw	r28, 0x1d	; 29
    3bc6:	a1 96       	adiw	r28, 0x21	; 33
	mag_v.y = 0.0;
    3bc8:	1c ae       	std	Y+60, r1	; 0x3c
    3bca:	1d ae       	std	Y+61, r1	; 0x3d
    3bcc:	1e ae       	std	Y+62, r1	; 0x3e
    3bce:	1f ae       	std	Y+63, r1	; 0x3f
    3bd0:	a1 97       	sbiw	r28, 0x21	; 33
    3bd2:	a5 96       	adiw	r28, 0x25	; 37
	mag_v.z = 0.0;
    3bd4:	1c ae       	std	Y+60, r1	; 0x3c
    3bd6:	1d ae       	std	Y+61, r1	; 0x3d
    3bd8:	1e ae       	std	Y+62, r1	; 0x3e
    3bda:	1f ae       	std	Y+63, r1	; 0x3f
    3bdc:	a5 97       	sbiw	r28, 0x25	; 37
    3bde:	04 e6       	ldi	r16, 0x64	; 100
    3be0:	10 e0       	ldi	r17, 0x00	; 0
    3be2:	cf 57       	subi	r28, 0x7F	; 127
	//show init start message
	_delay_ms(2000);
	display_draw_line2x("Initialization,", "please stand still");
	_delay_ms(2000);

	acc_v.x = 0.0;
    3be4:	df 4f       	sbci	r29, 0xFF	; 255
    3be6:	18 82       	st	Y, r1
    3be8:	19 82       	std	Y+1, r1	; 0x01
    3bea:	1a 82       	std	Y+2, r1	; 0x02
    3bec:	1b 82       	std	Y+3, r1	; 0x03
    3bee:	c1 58       	subi	r28, 0x81	; 129
    3bf0:	d0 40       	sbci	r29, 0x00	; 0
    3bf2:	c1 2c       	mov	r12, r1
	acc_v.y = 0.0;
    3bf4:	d1 2c       	mov	r13, r1
    3bf6:	76 01       	movw	r14, r12
    3bf8:	26 01       	movw	r4, r12
	acc_v.z = 0.0;
    3bfa:	37 01       	movw	r6, r14
    3bfc:	c4 01       	movw	r24, r8
	mag_v.x = 0.0;
	mag_v.y = 0.0;
	mag_v.z = 0.0;

	for (int i = 0; i < amount; i++) {
		adxl345_read(data); //accelerometer read
    3bfe:	0e 94 52 13 	call	0x26a4	; 0x26a4 <adxl345_read>
    3c02:	c4 01       	movw	r24, r8
		hmc5883l_read(data); //magnetometer read
    3c04:	0e 94 53 14 	call	0x28a6	; 0x28a6 <hmc5883l_read>
    3c08:	f4 01       	movw	r30, r8

		acc_v.x += (*data).acc_x;
    3c0a:	66 89       	ldd	r22, Z+22	; 0x16
    3c0c:	77 89       	ldd	r23, Z+23	; 0x17
    3c0e:	88 27       	eor	r24, r24
    3c10:	77 fd       	sbrc	r23, 7
    3c12:	80 95       	com	r24
    3c14:	98 2f       	mov	r25, r24
    3c16:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    3c1a:	9b 01       	movw	r18, r22
    3c1c:	ac 01       	movw	r20, r24
    3c1e:	cf 57       	subi	r28, 0x7F	; 127
    3c20:	df 4f       	sbci	r29, 0xFF	; 255
    3c22:	68 81       	ld	r22, Y
    3c24:	79 81       	ldd	r23, Y+1	; 0x01
    3c26:	8a 81       	ldd	r24, Y+2	; 0x02
    3c28:	9b 81       	ldd	r25, Y+3	; 0x03
    3c2a:	c1 58       	subi	r28, 0x81	; 129
    3c2c:	d0 40       	sbci	r29, 0x00	; 0
    3c2e:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    3c32:	cf 57       	subi	r28, 0x7F	; 127
    3c34:	df 4f       	sbci	r29, 0xFF	; 255
    3c36:	68 83       	st	Y, r22
    3c38:	79 83       	std	Y+1, r23	; 0x01
    3c3a:	8a 83       	std	Y+2, r24	; 0x02
    3c3c:	9b 83       	std	Y+3, r25	; 0x03
    3c3e:	c1 58       	subi	r28, 0x81	; 129
    3c40:	d0 40       	sbci	r29, 0x00	; 0
    3c42:	f4 01       	movw	r30, r8
		acc_v.y += (*data).acc_y;
    3c44:	60 8d       	ldd	r22, Z+24	; 0x18
    3c46:	71 8d       	ldd	r23, Z+25	; 0x19
    3c48:	88 27       	eor	r24, r24
    3c4a:	77 fd       	sbrc	r23, 7
    3c4c:	80 95       	com	r24
    3c4e:	98 2f       	mov	r25, r24
    3c50:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    3c54:	9b 01       	movw	r18, r22
    3c56:	ac 01       	movw	r20, r24
    3c58:	c7 01       	movw	r24, r14
    3c5a:	b6 01       	movw	r22, r12
    3c5c:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    3c60:	6b 01       	movw	r12, r22
    3c62:	7c 01       	movw	r14, r24
    3c64:	f4 01       	movw	r30, r8
		acc_v.z += (*data).acc_z;
    3c66:	62 8d       	ldd	r22, Z+26	; 0x1a
    3c68:	73 8d       	ldd	r23, Z+27	; 0x1b
    3c6a:	88 27       	eor	r24, r24
    3c6c:	77 fd       	sbrc	r23, 7
    3c6e:	80 95       	com	r24
    3c70:	98 2f       	mov	r25, r24
    3c72:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    3c76:	9b 01       	movw	r18, r22
    3c78:	ac 01       	movw	r20, r24
    3c7a:	c3 01       	movw	r24, r6
    3c7c:	b2 01       	movw	r22, r4
    3c7e:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    3c82:	2b 01       	movw	r4, r22
    3c84:	3c 01       	movw	r6, r24
    3c86:	f4 01       	movw	r30, r8

		mag_v.x += (*data).mag_x;
    3c88:	60 89       	ldd	r22, Z+16	; 0x10
    3c8a:	71 89       	ldd	r23, Z+17	; 0x11
    3c8c:	88 27       	eor	r24, r24
    3c8e:	77 fd       	sbrc	r23, 7
    3c90:	80 95       	com	r24
    3c92:	98 2f       	mov	r25, r24
    3c94:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    3c98:	9b 01       	movw	r18, r22
    3c9a:	ac 01       	movw	r20, r24
    3c9c:	6d 96       	adiw	r28, 0x1d	; 29
    3c9e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3ca0:	7d ad       	ldd	r23, Y+61	; 0x3d
    3ca2:	8e ad       	ldd	r24, Y+62	; 0x3e
    3ca4:	9f ad       	ldd	r25, Y+63	; 0x3f
    3ca6:	6d 97       	sbiw	r28, 0x1d	; 29
    3ca8:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    3cac:	6d 96       	adiw	r28, 0x1d	; 29
    3cae:	6c af       	std	Y+60, r22	; 0x3c
    3cb0:	7d af       	std	Y+61, r23	; 0x3d
    3cb2:	8e af       	std	Y+62, r24	; 0x3e
    3cb4:	9f af       	std	Y+63, r25	; 0x3f
    3cb6:	6d 97       	sbiw	r28, 0x1d	; 29
    3cb8:	f4 01       	movw	r30, r8
		mag_v.y += (*data).mag_y;
    3cba:	62 89       	ldd	r22, Z+18	; 0x12
    3cbc:	73 89       	ldd	r23, Z+19	; 0x13
    3cbe:	88 27       	eor	r24, r24
    3cc0:	77 fd       	sbrc	r23, 7
    3cc2:	80 95       	com	r24
    3cc4:	98 2f       	mov	r25, r24
    3cc6:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    3cca:	9b 01       	movw	r18, r22
    3ccc:	ac 01       	movw	r20, r24
    3cce:	a1 96       	adiw	r28, 0x21	; 33
    3cd0:	6c ad       	ldd	r22, Y+60	; 0x3c
    3cd2:	7d ad       	ldd	r23, Y+61	; 0x3d
    3cd4:	8e ad       	ldd	r24, Y+62	; 0x3e
    3cd6:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cd8:	a1 97       	sbiw	r28, 0x21	; 33
    3cda:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    3cde:	a1 96       	adiw	r28, 0x21	; 33
    3ce0:	6c af       	std	Y+60, r22	; 0x3c
    3ce2:	7d af       	std	Y+61, r23	; 0x3d
    3ce4:	8e af       	std	Y+62, r24	; 0x3e
    3ce6:	9f af       	std	Y+63, r25	; 0x3f
    3ce8:	a1 97       	sbiw	r28, 0x21	; 33
    3cea:	f4 01       	movw	r30, r8
		mag_v.z += (*data).mag_z;
    3cec:	64 89       	ldd	r22, Z+20	; 0x14
    3cee:	75 89       	ldd	r23, Z+21	; 0x15
    3cf0:	88 27       	eor	r24, r24
    3cf2:	77 fd       	sbrc	r23, 7
    3cf4:	80 95       	com	r24
    3cf6:	98 2f       	mov	r25, r24
    3cf8:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    3cfc:	9b 01       	movw	r18, r22
    3cfe:	ac 01       	movw	r20, r24
    3d00:	a5 96       	adiw	r28, 0x25	; 37
    3d02:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d04:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d06:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d08:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d0a:	a5 97       	sbiw	r28, 0x25	; 37
    3d0c:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    3d10:	a5 96       	adiw	r28, 0x25	; 37
    3d12:	6c af       	std	Y+60, r22	; 0x3c
    3d14:	7d af       	std	Y+61, r23	; 0x3d
    3d16:	8e af       	std	Y+62, r24	; 0x3e
    3d18:	9f af       	std	Y+63, r25	; 0x3f
    3d1a:	a5 97       	sbiw	r28, 0x25	; 37
    3d1c:	01 50       	subi	r16, 0x01	; 1
    3d1e:	11 09       	sbc	r17, r1
    3d20:	09 f0       	breq	.+2      	; 0x3d24 <ahrs_init+0x1d2>

	mag_v.x = 0.0;
	mag_v.y = 0.0;
	mag_v.z = 0.0;

	for (int i = 0; i < amount; i++) {
    3d22:	6c cf       	rjmp	.-296    	; 0x3bfc <ahrs_init+0xaa>
    3d24:	69 e3       	ldi	r22, 0x39	; 57
//			display_draw_line2x("Initialization:", str);
//		}

	}

	display_draw_line2x("Initialization:", "...done!");
    3d26:	71 e0       	ldi	r23, 0x01	; 1
    3d28:	82 e4       	ldi	r24, 0x42	; 66
    3d2a:	91 e0       	ldi	r25, 0x01	; 1
    3d2c:	f8 d9       	rcall	.-3088   	; 0x311e <display_draw_line2x>
    3d2e:	ff ef       	ldi	r31, 0xFF	; 255
    3d30:	27 ea       	ldi	r18, 0xA7	; 167
    3d32:	81 e6       	ldi	r24, 0x61	; 97
    3d34:	f1 50       	subi	r31, 0x01	; 1
    3d36:	20 40       	sbci	r18, 0x00	; 0
    3d38:	80 40       	sbci	r24, 0x00	; 0
    3d3a:	e1 f7       	brne	.-8      	; 0x3d34 <ahrs_init+0x1e2>
    3d3c:	00 c0       	rjmp	.+0      	; 0x3d3e <ahrs_init+0x1ec>
    3d3e:	00 00       	nop
    3d40:	d6 d9       	rcall	.-3156   	; 0x30ee <display_draw_logo>
    3d42:	20 e0       	ldi	r18, 0x00	; 0
	_delay_ms(2000);
	display_draw_logo();
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	48 ec       	ldi	r20, 0xC8	; 200

	acc_v.x /= amount;
	acc_v.y /= amount;
	acc_v.z /= amount;

	mag_v.x /= amount;
    3d48:	52 e4       	ldi	r21, 0x42	; 66
    3d4a:	6d 96       	adiw	r28, 0x1d	; 29
    3d4c:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d4e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d50:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d52:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d54:	6d 97       	sbiw	r28, 0x1d	; 29
    3d56:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    3d5a:	6d 96       	adiw	r28, 0x1d	; 29
    3d5c:	6c af       	std	Y+60, r22	; 0x3c
    3d5e:	7d af       	std	Y+61, r23	; 0x3d
    3d60:	8e af       	std	Y+62, r24	; 0x3e
    3d62:	9f af       	std	Y+63, r25	; 0x3f
    3d64:	6d 97       	sbiw	r28, 0x1d	; 29
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	30 e0       	ldi	r19, 0x00	; 0
    3d6a:	48 ec       	ldi	r20, 0xC8	; 200
	mag_v.y /= amount;
    3d6c:	52 e4       	ldi	r21, 0x42	; 66
    3d6e:	a1 96       	adiw	r28, 0x21	; 33
    3d70:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d72:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d74:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d76:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d78:	a1 97       	sbiw	r28, 0x21	; 33
    3d7a:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    3d7e:	a1 96       	adiw	r28, 0x21	; 33
    3d80:	6c af       	std	Y+60, r22	; 0x3c
    3d82:	7d af       	std	Y+61, r23	; 0x3d
    3d84:	8e af       	std	Y+62, r24	; 0x3e
    3d86:	9f af       	std	Y+63, r25	; 0x3f
    3d88:	a1 97       	sbiw	r28, 0x21	; 33
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	48 ec       	ldi	r20, 0xC8	; 200
	mag_v.z /= amount;
    3d90:	52 e4       	ldi	r21, 0x42	; 66
    3d92:	a5 96       	adiw	r28, 0x25	; 37
    3d94:	6c ad       	ldd	r22, Y+60	; 0x3c
    3d96:	7d ad       	ldd	r23, Y+61	; 0x3d
    3d98:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d9c:	a5 97       	sbiw	r28, 0x25	; 37
    3d9e:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    3da2:	a5 96       	adiw	r28, 0x25	; 37
    3da4:	6c af       	std	Y+60, r22	; 0x3c
    3da6:	7d af       	std	Y+61, r23	; 0x3d
    3da8:	8e af       	std	Y+62, r24	; 0x3e
    3daa:	9f af       	std	Y+63, r25	; 0x3f
    3dac:	a5 97       	sbiw	r28, 0x25	; 37
    3dae:	60 91 0b 02 	lds	r22, 0x020B
    3db2:	70 91 0c 02 	lds	r23, 0x020C

	hmc5883l_applyCalibration(&mag_v, calib_ptr);
    3db6:	ce 01       	movw	r24, r28
    3db8:	87 5a       	subi	r24, 0xA7	; 167
    3dba:	9f 4f       	sbci	r25, 0xFF	; 255
    3dbc:	0e 94 c1 14 	call	0x2982	; 0x2982 <hmc5883l_applyCalibration>
    3dc0:	20 e0       	ldi	r18, 0x00	; 0
    3dc2:	30 e0       	ldi	r19, 0x00	; 0
    3dc4:	48 ec       	ldi	r20, 0xC8	; 200

	display_draw_line2x("Initialization:", "...done!");
	_delay_ms(2000);
	display_draw_logo();

	acc_v.x /= amount;
    3dc6:	52 e4       	ldi	r21, 0x42	; 66
    3dc8:	cf 57       	subi	r28, 0x7F	; 127
    3dca:	df 4f       	sbci	r29, 0xFF	; 255
    3dcc:	68 81       	ld	r22, Y
    3dce:	79 81       	ldd	r23, Y+1	; 0x01
    3dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd4:	c1 58       	subi	r28, 0x81	; 129
    3dd6:	d0 40       	sbci	r29, 0x00	; 0
    3dd8:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    3ddc:	16 2f       	mov	r17, r22
    3dde:	ab 01       	movw	r20, r22
    3de0:	bc 01       	movw	r22, r24
	mag_v.y /= amount;
	mag_v.z /= amount;

	hmc5883l_applyCalibration(&mag_v, calib_ptr);

	vector3d down = vector_inv(acc_v);
    3de2:	a9 96       	adiw	r28, 0x29	; 41
    3de4:	4c af       	std	Y+60, r20	; 0x3c
    3de6:	5d af       	std	Y+61, r21	; 0x3d
    3de8:	6e af       	std	Y+62, r22	; 0x3e
    3dea:	7f af       	std	Y+63, r23	; 0x3f
    3dec:	a9 97       	sbiw	r28, 0x29	; 41
    3dee:	20 e0       	ldi	r18, 0x00	; 0
    3df0:	30 e0       	ldi	r19, 0x00	; 0
    3df2:	48 ec       	ldi	r20, 0xC8	; 200
	display_draw_line2x("Initialization:", "...done!");
	_delay_ms(2000);
	display_draw_logo();

	acc_v.x /= amount;
	acc_v.y /= amount;
    3df4:	52 e4       	ldi	r21, 0x42	; 66
    3df6:	c7 01       	movw	r24, r14
    3df8:	b6 01       	movw	r22, r12
    3dfa:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    3dfe:	06 2f       	mov	r16, r22
    3e00:	ab 01       	movw	r20, r22
    3e02:	bc 01       	movw	r22, r24
	mag_v.y /= amount;
	mag_v.z /= amount;

	hmc5883l_applyCalibration(&mag_v, calib_ptr);

	vector3d down = vector_inv(acc_v);
    3e04:	ad 96       	adiw	r28, 0x2d	; 45
    3e06:	4c af       	std	Y+60, r20	; 0x3c
    3e08:	5d af       	std	Y+61, r21	; 0x3d
    3e0a:	6e af       	std	Y+62, r22	; 0x3e
    3e0c:	7f af       	std	Y+63, r23	; 0x3f
    3e0e:	ad 97       	sbiw	r28, 0x2d	; 45
    3e10:	20 e0       	ldi	r18, 0x00	; 0
    3e12:	30 e0       	ldi	r19, 0x00	; 0
    3e14:	48 ec       	ldi	r20, 0xC8	; 200
	_delay_ms(2000);
	display_draw_logo();

	acc_v.x /= amount;
	acc_v.y /= amount;
	acc_v.z /= amount;
    3e16:	52 e4       	ldi	r21, 0x42	; 66
    3e18:	c3 01       	movw	r24, r6
    3e1a:	b2 01       	movw	r22, r4
    3e1c:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    3e20:	46 2f       	mov	r20, r22
    3e22:	2b 01       	movw	r4, r22
    3e24:	3c 01       	movw	r6, r24
	mag_v.y /= amount;
	mag_v.z /= amount;

	hmc5883l_applyCalibration(&mag_v, calib_ptr);

	vector3d down = vector_inv(acc_v);
    3e26:	e1 96       	adiw	r28, 0x31	; 49
    3e28:	4c ae       	std	Y+60, r4	; 0x3c
    3e2a:	5d ae       	std	Y+61, r5	; 0x3d
    3e2c:	6e ae       	std	Y+62, r6	; 0x3e
    3e2e:	7f ae       	std	Y+63, r7	; 0x3f
    3e30:	e1 97       	sbiw	r28, 0x31	; 49
    3e32:	c1 2e       	mov	r12, r17
    3e34:	a7 96       	adiw	r28, 0x27	; 39
    3e36:	df ac       	ldd	r13, Y+63	; 0x3f
    3e38:	a7 97       	sbiw	r28, 0x27	; 39
    3e3a:	a8 96       	adiw	r28, 0x28	; 40
    3e3c:	ef ac       	ldd	r14, Y+63	; 0x3f
    3e3e:	a8 97       	sbiw	r28, 0x28	; 40
    3e40:	a9 96       	adiw	r28, 0x29	; 41
    3e42:	ff ac       	ldd	r15, Y+63	; 0x3f
    3e44:	a9 97       	sbiw	r28, 0x29	; 41
    3e46:	ab 96       	adiw	r28, 0x2b	; 43
    3e48:	1f ad       	ldd	r17, Y+63	; 0x3f
    3e4a:	ab 97       	sbiw	r28, 0x2b	; 43
    3e4c:	ac 96       	adiw	r28, 0x2c	; 44
    3e4e:	2f ad       	ldd	r18, Y+63	; 0x3f
    3e50:	ac 97       	sbiw	r28, 0x2c	; 44
    3e52:	ad 96       	adiw	r28, 0x2d	; 45
    3e54:	3f ad       	ldd	r19, Y+63	; 0x3f
    3e56:	ad 97       	sbiw	r28, 0x2d	; 45
    3e58:	af 96       	adiw	r28, 0x2f	; 47
    3e5a:	5f ad       	ldd	r21, Y+63	; 0x3f
    3e5c:	af 97       	sbiw	r28, 0x2f	; 47
    3e5e:	e0 96       	adiw	r28, 0x30	; 48
    3e60:	6f ad       	ldd	r22, Y+63	; 0x3f
    3e62:	e0 97       	sbiw	r28, 0x30	; 48
    3e64:	e1 96       	adiw	r28, 0x31	; 49
    3e66:	7f ad       	ldd	r23, Y+63	; 0x3f
    3e68:	e1 97       	sbiw	r28, 0x31	; 49
    3e6a:	ce 01       	movw	r24, r28
    3e6c:	83 5b       	subi	r24, 0xB3	; 179
    3e6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e70:	99 da       	rcall	.-2766   	; 0x33a4 <vector_inv>
    3e72:	ed b7       	in	r30, 0x3d	; 61
    3e74:	fe b7       	in	r31, 0x3e	; 62
    3e76:	3c 97       	sbiw	r30, 0x0c	; 12
    3e78:	0f b6       	in	r0, 0x3f	; 63
	vector3d east = vector_cross(down, mag_v);
    3e7a:	f8 94       	cli
    3e7c:	fe bf       	out	0x3e, r31	; 62
    3e7e:	0f be       	out	0x3f, r0	; 63
    3e80:	ed bf       	out	0x3d, r30	; 61
    3e82:	ad b7       	in	r26, 0x3d	; 61
    3e84:	be b7       	in	r27, 0x3e	; 62
    3e86:	11 96       	adiw	r26, 0x01	; 1
    3e88:	8c e0       	ldi	r24, 0x0C	; 12
    3e8a:	fe 01       	movw	r30, r28
    3e8c:	e7 5a       	subi	r30, 0xA7	; 167
    3e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e90:	01 90       	ld	r0, Z+
    3e92:	0d 92       	st	X+, r0
    3e94:	8a 95       	dec	r24
    3e96:	e1 f7       	brne	.-8      	; 0x3e90 <ahrs_init+0x33e>
    3e98:	2e 96       	adiw	r28, 0x0e	; 14
    3e9a:	cf ac       	ldd	r12, Y+63	; 0x3f
    3e9c:	2e 97       	sbiw	r28, 0x0e	; 14
    3e9e:	2f 96       	adiw	r28, 0x0f	; 15
    3ea0:	df ac       	ldd	r13, Y+63	; 0x3f
    3ea2:	2f 97       	sbiw	r28, 0x0f	; 15
    3ea4:	60 96       	adiw	r28, 0x10	; 16
    3ea6:	ef ac       	ldd	r14, Y+63	; 0x3f
    3ea8:	60 97       	sbiw	r28, 0x10	; 16
    3eaa:	61 96       	adiw	r28, 0x11	; 17
    3eac:	ff ac       	ldd	r15, Y+63	; 0x3f
    3eae:	61 97       	sbiw	r28, 0x11	; 17
    3eb0:	62 96       	adiw	r28, 0x12	; 18
    3eb2:	0f ad       	ldd	r16, Y+63	; 0x3f
    3eb4:	62 97       	sbiw	r28, 0x12	; 18
    3eb6:	63 96       	adiw	r28, 0x13	; 19
    3eb8:	1f ad       	ldd	r17, Y+63	; 0x3f
    3eba:	63 97       	sbiw	r28, 0x13	; 19
    3ebc:	64 96       	adiw	r28, 0x14	; 20
    3ebe:	2f ad       	ldd	r18, Y+63	; 0x3f
    3ec0:	64 97       	sbiw	r28, 0x14	; 20
    3ec2:	65 96       	adiw	r28, 0x15	; 21
    3ec4:	3f ad       	ldd	r19, Y+63	; 0x3f
    3ec6:	65 97       	sbiw	r28, 0x15	; 21
    3ec8:	66 96       	adiw	r28, 0x16	; 22
    3eca:	4f ad       	ldd	r20, Y+63	; 0x3f
    3ecc:	66 97       	sbiw	r28, 0x16	; 22
    3ece:	67 96       	adiw	r28, 0x17	; 23
    3ed0:	5f ad       	ldd	r21, Y+63	; 0x3f
    3ed2:	67 97       	sbiw	r28, 0x17	; 23
    3ed4:	68 96       	adiw	r28, 0x18	; 24
    3ed6:	6f ad       	ldd	r22, Y+63	; 0x3f
    3ed8:	68 97       	sbiw	r28, 0x18	; 24
    3eda:	69 96       	adiw	r28, 0x19	; 25
    3edc:	7f ad       	ldd	r23, Y+63	; 0x3f
    3ede:	69 97       	sbiw	r28, 0x19	; 25
    3ee0:	ce 01       	movw	r24, r28
    3ee2:	8f 5b       	subi	r24, 0xBF	; 191
    3ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ee6:	12 db       	rcall	.-2524   	; 0x350c <vector_cross>
    3ee8:	8d b7       	in	r24, 0x3d	; 61
    3eea:	9e b7       	in	r25, 0x3e	; 62
    3eec:	0c 97       	sbiw	r24, 0x0c	; 12
    3eee:	0f b6       	in	r0, 0x3f	; 63
    3ef0:	f8 94       	cli
	vector3d north = vector_cross(east, down);
    3ef2:	9e bf       	out	0x3e, r25	; 62
    3ef4:	0f be       	out	0x3f, r0	; 63
    3ef6:	8d bf       	out	0x3d, r24	; 61
    3ef8:	ad b7       	in	r26, 0x3d	; 61
    3efa:	be b7       	in	r27, 0x3e	; 62
    3efc:	11 96       	adiw	r26, 0x01	; 1
    3efe:	8c e0       	ldi	r24, 0x0C	; 12
    3f00:	fe 01       	movw	r30, r28
    3f02:	e3 5b       	subi	r30, 0xB3	; 179
    3f04:	ff 4f       	sbci	r31, 0xFF	; 255
    3f06:	01 90       	ld	r0, Z+
    3f08:	0d 92       	st	X+, r0
    3f0a:	8a 95       	dec	r24
    3f0c:	e1 f7       	brne	.-8      	; 0x3f06 <ahrs_init+0x3b4>
    3f0e:	22 96       	adiw	r28, 0x02	; 2
    3f10:	cf ac       	ldd	r12, Y+63	; 0x3f
    3f12:	22 97       	sbiw	r28, 0x02	; 2
    3f14:	23 96       	adiw	r28, 0x03	; 3
    3f16:	df ac       	ldd	r13, Y+63	; 0x3f
    3f18:	23 97       	sbiw	r28, 0x03	; 3
    3f1a:	24 96       	adiw	r28, 0x04	; 4
    3f1c:	ef ac       	ldd	r14, Y+63	; 0x3f
    3f1e:	24 97       	sbiw	r28, 0x04	; 4
    3f20:	25 96       	adiw	r28, 0x05	; 5
    3f22:	ff ac       	ldd	r15, Y+63	; 0x3f
    3f24:	25 97       	sbiw	r28, 0x05	; 5
    3f26:	26 96       	adiw	r28, 0x06	; 6
    3f28:	0f ad       	ldd	r16, Y+63	; 0x3f
    3f2a:	26 97       	sbiw	r28, 0x06	; 6
    3f2c:	27 96       	adiw	r28, 0x07	; 7
    3f2e:	1f ad       	ldd	r17, Y+63	; 0x3f
    3f30:	27 97       	sbiw	r28, 0x07	; 7
    3f32:	28 96       	adiw	r28, 0x08	; 8
    3f34:	2f ad       	ldd	r18, Y+63	; 0x3f
    3f36:	28 97       	sbiw	r28, 0x08	; 8
    3f38:	29 96       	adiw	r28, 0x09	; 9
    3f3a:	3f ad       	ldd	r19, Y+63	; 0x3f
    3f3c:	29 97       	sbiw	r28, 0x09	; 9
    3f3e:	2a 96       	adiw	r28, 0x0a	; 10
    3f40:	4f ad       	ldd	r20, Y+63	; 0x3f
    3f42:	2a 97       	sbiw	r28, 0x0a	; 10
    3f44:	2b 96       	adiw	r28, 0x0b	; 11
    3f46:	5f ad       	ldd	r21, Y+63	; 0x3f
    3f48:	2b 97       	sbiw	r28, 0x0b	; 11
    3f4a:	2c 96       	adiw	r28, 0x0c	; 12
    3f4c:	6f ad       	ldd	r22, Y+63	; 0x3f
    3f4e:	2c 97       	sbiw	r28, 0x0c	; 12
    3f50:	2d 96       	adiw	r28, 0x0d	; 13
    3f52:	7f ad       	ldd	r23, Y+63	; 0x3f
    3f54:	2d 97       	sbiw	r28, 0x0d	; 13
    3f56:	ce 01       	movw	r24, r28
    3f58:	c5 96       	adiw	r24, 0x35	; 53
    3f5a:	d8 da       	rcall	.-2640   	; 0x350c <vector_cross>
    3f5c:	ce 01       	movw	r24, r28
    3f5e:	83 5b       	subi	r24, 0xB3	; 179
    3f60:	9f 4f       	sbci	r25, 0xFF	; 255
    3f62:	d4 d9       	rcall	.-3160   	; 0x330c <vector_norm>
    3f64:	ce 01       	movw	r24, r28
    3f66:	8f 5b       	subi	r24, 0xBF	; 191

	//normalize vectors
	vector_norm(&down);
    3f68:	9f 4f       	sbci	r25, 0xFF	; 255
    3f6a:	d0 d9       	rcall	.-3168   	; 0x330c <vector_norm>
    3f6c:	ce 01       	movw	r24, r28
    3f6e:	c5 96       	adiw	r24, 0x35	; 53
    3f70:	cd d9       	rcall	.-3174   	; 0x330c <vector_norm>
	vector_norm(&east);
    3f72:	aa 24       	eor	r10, r10
    3f74:	a3 94       	inc	r10
    3f76:	cd a8       	ldd	r12, Y+53	; 0x35
    3f78:	de a8       	ldd	r13, Y+54	; 0x36
    3f7a:	ef a8       	ldd	r14, Y+55	; 0x37
	vector_norm(&north);
    3f7c:	f8 ac       	ldd	r15, Y+56	; 0x38
    3f7e:	09 ad       	ldd	r16, Y+57	; 0x39
    3f80:	1a ad       	ldd	r17, Y+58	; 0x3a
    3f82:	2b ad       	ldd	r18, Y+59	; 0x3b

	//vectors to matrix
	matrix_vector_to_row(&initial_rmat, north, 1);
    3f84:	3c ad       	ldd	r19, Y+60	; 0x3c
    3f86:	4d ad       	ldd	r20, Y+61	; 0x3d
    3f88:	5e ad       	ldd	r21, Y+62	; 0x3e
    3f8a:	6f ad       	ldd	r22, Y+63	; 0x3f
    3f8c:	21 96       	adiw	r28, 0x01	; 1
    3f8e:	7f ad       	ldd	r23, Y+63	; 0x3f
    3f90:	21 97       	sbiw	r28, 0x01	; 1
    3f92:	ce 01       	movw	r24, r28
    3f94:	01 96       	adiw	r24, 0x01	; 1
    3f96:	cc db       	rcall	.-2152   	; 0x3730 <matrix_vector_to_row>
    3f98:	82 e0       	ldi	r24, 0x02	; 2
    3f9a:	a8 2e       	mov	r10, r24
    3f9c:	22 96       	adiw	r28, 0x02	; 2
    3f9e:	cf ac       	ldd	r12, Y+63	; 0x3f
    3fa0:	22 97       	sbiw	r28, 0x02	; 2
    3fa2:	23 96       	adiw	r28, 0x03	; 3
    3fa4:	df ac       	ldd	r13, Y+63	; 0x3f
    3fa6:	23 97       	sbiw	r28, 0x03	; 3
    3fa8:	24 96       	adiw	r28, 0x04	; 4
    3faa:	ef ac       	ldd	r14, Y+63	; 0x3f
	matrix_vector_to_row(&initial_rmat, east, 2);
    3fac:	24 97       	sbiw	r28, 0x04	; 4
    3fae:	25 96       	adiw	r28, 0x05	; 5
    3fb0:	ff ac       	ldd	r15, Y+63	; 0x3f
    3fb2:	25 97       	sbiw	r28, 0x05	; 5
    3fb4:	26 96       	adiw	r28, 0x06	; 6
    3fb6:	0f ad       	ldd	r16, Y+63	; 0x3f
    3fb8:	26 97       	sbiw	r28, 0x06	; 6
    3fba:	27 96       	adiw	r28, 0x07	; 7
    3fbc:	1f ad       	ldd	r17, Y+63	; 0x3f
    3fbe:	27 97       	sbiw	r28, 0x07	; 7
    3fc0:	28 96       	adiw	r28, 0x08	; 8
    3fc2:	2f ad       	ldd	r18, Y+63	; 0x3f
    3fc4:	28 97       	sbiw	r28, 0x08	; 8
    3fc6:	29 96       	adiw	r28, 0x09	; 9
    3fc8:	3f ad       	ldd	r19, Y+63	; 0x3f
    3fca:	29 97       	sbiw	r28, 0x09	; 9
    3fcc:	2a 96       	adiw	r28, 0x0a	; 10
    3fce:	4f ad       	ldd	r20, Y+63	; 0x3f
    3fd0:	2a 97       	sbiw	r28, 0x0a	; 10
    3fd2:	2b 96       	adiw	r28, 0x0b	; 11
    3fd4:	5f ad       	ldd	r21, Y+63	; 0x3f
    3fd6:	2b 97       	sbiw	r28, 0x0b	; 11
    3fd8:	2c 96       	adiw	r28, 0x0c	; 12
    3fda:	6f ad       	ldd	r22, Y+63	; 0x3f
    3fdc:	2c 97       	sbiw	r28, 0x0c	; 12
    3fde:	2d 96       	adiw	r28, 0x0d	; 13
    3fe0:	7f ad       	ldd	r23, Y+63	; 0x3f
    3fe2:	2d 97       	sbiw	r28, 0x0d	; 13
    3fe4:	ce 01       	movw	r24, r28
    3fe6:	01 96       	adiw	r24, 0x01	; 1
    3fe8:	a3 db       	rcall	.-2234   	; 0x3730 <matrix_vector_to_row>
    3fea:	93 e0       	ldi	r25, 0x03	; 3
    3fec:	a9 2e       	mov	r10, r25
    3fee:	2e 96       	adiw	r28, 0x0e	; 14
    3ff0:	cf ac       	ldd	r12, Y+63	; 0x3f
    3ff2:	2e 97       	sbiw	r28, 0x0e	; 14
    3ff4:	2f 96       	adiw	r28, 0x0f	; 15
    3ff6:	df ac       	ldd	r13, Y+63	; 0x3f
    3ff8:	2f 97       	sbiw	r28, 0x0f	; 15
    3ffa:	60 96       	adiw	r28, 0x10	; 16
    3ffc:	ef ac       	ldd	r14, Y+63	; 0x3f
    3ffe:	60 97       	sbiw	r28, 0x10	; 16
	matrix_vector_to_row(&initial_rmat, down, 3);
    4000:	61 96       	adiw	r28, 0x11	; 17
    4002:	ff ac       	ldd	r15, Y+63	; 0x3f
    4004:	61 97       	sbiw	r28, 0x11	; 17
    4006:	62 96       	adiw	r28, 0x12	; 18
    4008:	0f ad       	ldd	r16, Y+63	; 0x3f
    400a:	62 97       	sbiw	r28, 0x12	; 18
    400c:	63 96       	adiw	r28, 0x13	; 19
    400e:	1f ad       	ldd	r17, Y+63	; 0x3f
    4010:	63 97       	sbiw	r28, 0x13	; 19
    4012:	64 96       	adiw	r28, 0x14	; 20
    4014:	2f ad       	ldd	r18, Y+63	; 0x3f
    4016:	64 97       	sbiw	r28, 0x14	; 20
    4018:	65 96       	adiw	r28, 0x15	; 21
    401a:	3f ad       	ldd	r19, Y+63	; 0x3f
    401c:	65 97       	sbiw	r28, 0x15	; 21
    401e:	66 96       	adiw	r28, 0x16	; 22
    4020:	4f ad       	ldd	r20, Y+63	; 0x3f
    4022:	66 97       	sbiw	r28, 0x16	; 22
    4024:	67 96       	adiw	r28, 0x17	; 23
    4026:	5f ad       	ldd	r21, Y+63	; 0x3f
    4028:	67 97       	sbiw	r28, 0x17	; 23
    402a:	68 96       	adiw	r28, 0x18	; 24
    402c:	6f ad       	ldd	r22, Y+63	; 0x3f
    402e:	68 97       	sbiw	r28, 0x18	; 24
    4030:	69 96       	adiw	r28, 0x19	; 25
    4032:	7f ad       	ldd	r23, Y+63	; 0x3f
    4034:	69 97       	sbiw	r28, 0x19	; 25
    4036:	ce 01       	movw	r24, r28
    4038:	01 96       	adiw	r24, 0x01	; 1
    403a:	7a db       	rcall	.-2316   	; 0x3730 <matrix_vector_to_row>
    403c:	be 01       	movw	r22, r28
    403e:	6f 5f       	subi	r22, 0xFF	; 255
    4040:	7f 4f       	sbci	r23, 0xFF	; 255
    4042:	ce 01       	movw	r24, r28
    4044:	8f 58       	subi	r24, 0x8F	; 143
    4046:	9f 4f       	sbci	r25, 0xFF	; 255
    4048:	0e 94 a5 29 	call	0x534a	; 0x534a <quaternion_from_matrix>
    404c:	80 e1       	ldi	r24, 0x10	; 16
    404e:	fe 01       	movw	r30, r28
    4050:	ef 58       	subi	r30, 0x8F	; 143
    4052:	ff 4f       	sbci	r31, 0xFF	; 255

	//matrix to quaternion
	initial_q = quaternion_from_matrix(&initial_rmat);
    4054:	de 01       	movw	r26, r28
    4056:	95 96       	adiw	r26, 0x25	; 37
    4058:	01 90       	ld	r0, Z+
    405a:	0d 92       	st	X+, r0
    405c:	8a 95       	dec	r24
    405e:	e1 f7       	brne	.-8      	; 0x4058 <ahrs_init+0x506>
    4060:	ce 01       	movw	r24, r28
    4062:	85 96       	adiw	r24, 0x25	; 37
    4064:	01 d5       	rcall	.+2562   	; 0x4a68 <quaternion_norm>
    4066:	8d a1       	ldd	r24, Y+37	; 0x25
    4068:	9e a1       	ldd	r25, Y+38	; 0x26
    406a:	af a1       	ldd	r26, Y+39	; 0x27
    406c:	b8 a5       	ldd	r27, Y+40	; 0x28
    406e:	f4 01       	movw	r30, r8
    4070:	80 83       	st	Z, r24
    4072:	91 83       	std	Z+1, r25	; 0x01
    4074:	a2 83       	std	Z+2, r26	; 0x02
    4076:	b3 83       	std	Z+3, r27	; 0x03

	//normalize
	quaternion_norm(&initial_q);
    4078:	89 a5       	ldd	r24, Y+41	; 0x29
    407a:	9a a5       	ldd	r25, Y+42	; 0x2a
    407c:	ab a5       	ldd	r26, Y+43	; 0x2b
    407e:	bc a5       	ldd	r27, Y+44	; 0x2c

	//initialize
	(*data).qr.w = initial_q.w;
    4080:	84 83       	std	Z+4, r24	; 0x04
    4082:	95 83       	std	Z+5, r25	; 0x05
    4084:	a6 83       	std	Z+6, r26	; 0x06
    4086:	b7 83       	std	Z+7, r27	; 0x07
    4088:	8d a5       	ldd	r24, Y+45	; 0x2d
    408a:	9e a5       	ldd	r25, Y+46	; 0x2e
    408c:	af a5       	ldd	r26, Y+47	; 0x2f
    408e:	b8 a9       	ldd	r27, Y+48	; 0x30
    4090:	80 87       	std	Z+8, r24	; 0x08
	(*data).qr.x = initial_q.x;
    4092:	91 87       	std	Z+9, r25	; 0x09
    4094:	a2 87       	std	Z+10, r26	; 0x0a
    4096:	b3 87       	std	Z+11, r27	; 0x0b
    4098:	89 a9       	ldd	r24, Y+49	; 0x31
    409a:	9a a9       	ldd	r25, Y+50	; 0x32
    409c:	ab a9       	ldd	r26, Y+51	; 0x33
    409e:	bc a9       	ldd	r27, Y+52	; 0x34
    40a0:	84 87       	std	Z+12, r24	; 0x0c
	(*data).qr.y = initial_q.y;
    40a2:	95 87       	std	Z+13, r25	; 0x0d
    40a4:	a6 87       	std	Z+14, r26	; 0x0e
    40a6:	b7 87       	std	Z+15, r27	; 0x0f
    40a8:	0f b6       	in	r0, 0x3f	; 63
    40aa:	f8 94       	cli
    40ac:	de bf       	out	0x3e, r29	; 62
    40ae:	0f be       	out	0x3f, r0	; 63
    40b0:	cd bf       	out	0x3d, r28	; 61
	(*data).qr.z = initial_q.z;
    40b2:	cc 57       	subi	r28, 0x7C	; 124
    40b4:	df 4f       	sbci	r29, 0xFF	; 255
    40b6:	0f b6       	in	r0, 0x3f	; 63
    40b8:	f8 94       	cli
    40ba:	de bf       	out	0x3e, r29	; 62
    40bc:	0f be       	out	0x3f, r0	; 63
    40be:	cd bf       	out	0x3d, r28	; 61
    40c0:	df 91       	pop	r29
    40c2:	cf 91       	pop	r28
    40c4:	1f 91       	pop	r17
    40c6:	0f 91       	pop	r16
    40c8:	ff 90       	pop	r15
    40ca:	ef 90       	pop	r14

}
    40cc:	df 90       	pop	r13
    40ce:	cf 90       	pop	r12
    40d0:	af 90       	pop	r10
    40d2:	9f 90       	pop	r9
    40d4:	8f 90       	pop	r8
    40d6:	7f 90       	pop	r7
    40d8:	6f 90       	pop	r6
    40da:	5f 90       	pop	r5
    40dc:	4f 90       	pop	r4
    40de:	08 95       	ret

000040e0 <ahrs_drift_correction>:
    40e0:	4f 92       	push	r4
    40e2:	5f 92       	push	r5
    40e4:	6f 92       	push	r6
    40e6:	7f 92       	push	r7
    40e8:	8f 92       	push	r8
    40ea:	9f 92       	push	r9
    40ec:	af 92       	push	r10
    40ee:	bf 92       	push	r11
    40f0:	cf 92       	push	r12
    40f2:	df 92       	push	r13
    40f4:	ef 92       	push	r14
    40f6:	ff 92       	push	r15
    40f8:	0f 93       	push	r16
	(*data).qr = q;

	return q;
}

vector3d ahrs_drift_correction(dataexchange_t *data) {
    40fa:	1f 93       	push	r17
    40fc:	cf 93       	push	r28
    40fe:	df 93       	push	r29
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    4104:	c8 5d       	subi	r28, 0xD8	; 216
    4106:	d1 09       	sbc	r29, r1
    4108:	0f b6       	in	r0, 0x3f	; 63
    410a:	f8 94       	cli
    410c:	de bf       	out	0x3e, r29	; 62
    410e:	0f be       	out	0x3f, r0	; 63
    4110:	cd bf       	out	0x3d, r28	; 61
    4112:	2c 01       	movw	r4, r24
    4114:	3b 01       	movw	r6, r22
	corr_vector.x = 0.0;
	corr_vector.y = 0.0;
	corr_vector.z = 0.0;

	//do correction only then acceleration is close to 1G (unreliable if greater)
	acc_g = adxl345_raw_to_g(data, SCALE_2G_10B);
    4116:	24 e2       	ldi	r18, 0x24	; 36
    4118:	37 e9       	ldi	r19, 0x97	; 151
    411a:	4f e7       	ldi	r20, 0x7F	; 127
    411c:	5b e3       	ldi	r21, 0x3B	; 59
    411e:	ce 01       	movw	r24, r28
    4120:	8f 53       	subi	r24, 0x3F	; 63
    4122:	9f 4f       	sbci	r25, 0xFF	; 255
    4124:	0e 94 c0 13 	call	0x2780	; 0x2780 <adxl345_raw_to_g>
	double acc_magnitude = vector_magnitude(acc_g);
    4128:	cf 53       	subi	r28, 0x3F	; 63
    412a:	df 4f       	sbci	r29, 0xFF	; 255
    412c:	e8 80       	ld	r14, Y
    412e:	c1 5c       	subi	r28, 0xC1	; 193
    4130:	d0 40       	sbci	r29, 0x00	; 0
    4132:	ce 53       	subi	r28, 0x3E	; 62
    4134:	df 4f       	sbci	r29, 0xFF	; 255
    4136:	f8 80       	ld	r15, Y
    4138:	c2 5c       	subi	r28, 0xC2	; 194
    413a:	d0 40       	sbci	r29, 0x00	; 0
    413c:	cd 53       	subi	r28, 0x3D	; 61
    413e:	df 4f       	sbci	r29, 0xFF	; 255
    4140:	08 81       	ld	r16, Y
    4142:	c3 5c       	subi	r28, 0xC3	; 195
    4144:	d0 40       	sbci	r29, 0x00	; 0
    4146:	cc 53       	subi	r28, 0x3C	; 60
    4148:	df 4f       	sbci	r29, 0xFF	; 255
    414a:	18 81       	ld	r17, Y
    414c:	c4 5c       	subi	r28, 0xC4	; 196
    414e:	d0 40       	sbci	r29, 0x00	; 0
    4150:	cb 53       	subi	r28, 0x3B	; 59
    4152:	df 4f       	sbci	r29, 0xFF	; 255
    4154:	28 81       	ld	r18, Y
    4156:	c5 5c       	subi	r28, 0xC5	; 197
    4158:	d0 40       	sbci	r29, 0x00	; 0
    415a:	ca 53       	subi	r28, 0x3A	; 58
    415c:	df 4f       	sbci	r29, 0xFF	; 255
    415e:	38 81       	ld	r19, Y
    4160:	c6 5c       	subi	r28, 0xC6	; 198
    4162:	d0 40       	sbci	r29, 0x00	; 0
    4164:	c9 53       	subi	r28, 0x39	; 57
    4166:	df 4f       	sbci	r29, 0xFF	; 255
    4168:	48 81       	ld	r20, Y
    416a:	c7 5c       	subi	r28, 0xC7	; 199
    416c:	d0 40       	sbci	r29, 0x00	; 0
    416e:	c8 53       	subi	r28, 0x38	; 56
    4170:	df 4f       	sbci	r29, 0xFF	; 255
    4172:	58 81       	ld	r21, Y
    4174:	c8 5c       	subi	r28, 0xC8	; 200
    4176:	d0 40       	sbci	r29, 0x00	; 0
    4178:	c7 53       	subi	r28, 0x37	; 55
    417a:	df 4f       	sbci	r29, 0xFF	; 255
    417c:	68 81       	ld	r22, Y
    417e:	c9 5c       	subi	r28, 0xC9	; 201
    4180:	d0 40       	sbci	r29, 0x00	; 0
    4182:	c6 53       	subi	r28, 0x36	; 54
    4184:	df 4f       	sbci	r29, 0xFF	; 255
    4186:	78 81       	ld	r23, Y
    4188:	ca 5c       	subi	r28, 0xCA	; 202
    418a:	d0 40       	sbci	r29, 0x00	; 0
    418c:	c5 53       	subi	r28, 0x35	; 53
    418e:	df 4f       	sbci	r29, 0xFF	; 255
    4190:	88 81       	ld	r24, Y
    4192:	cb 5c       	subi	r28, 0xCB	; 203
    4194:	d0 40       	sbci	r29, 0x00	; 0
    4196:	c4 53       	subi	r28, 0x34	; 52
    4198:	df 4f       	sbci	r29, 0xFF	; 255
    419a:	98 81       	ld	r25, Y
    419c:	cc 5c       	subi	r28, 0xCC	; 204
    419e:	d0 40       	sbci	r29, 0x00	; 0
    41a0:	0e 94 b6 18 	call	0x316c	; 0x316c <vector_magnitude>
	if (fabs(acc_magnitude - 1.0) <= 0.15) {
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	40 e8       	ldi	r20, 0x80	; 128
    41aa:	5f e3       	ldi	r21, 0x3F	; 63
    41ac:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    41b0:	9f 77       	andi	r25, 0x7F	; 127
    41b2:	2a e9       	ldi	r18, 0x9A	; 154
    41b4:	39 e9       	ldi	r19, 0x99	; 153
    41b6:	49 e1       	ldi	r20, 0x19	; 25
    41b8:	5e e3       	ldi	r21, 0x3E	; 62
    41ba:	0e 94 de 32 	call	0x65bc	; 0x65bc <__cmpsf2>
    41be:	18 16       	cp	r1, r24
    41c0:	0c f4       	brge	.+2      	; 0x41c4 <ahrs_drift_correction+0xe4>
    41c2:	5f c3       	rjmp	.+1726   	; 0x4882 <ahrs_drift_correction+0x7a2>
		float corr_strength = 0.15;

		//vectors for rotation matrix
		vector3d acc_v, mag_v;

		acc_v.x = (*data).acc_x;
    41c4:	f3 01       	movw	r30, r6
    41c6:	66 89       	ldd	r22, Z+22	; 0x16
    41c8:	77 89       	ldd	r23, Z+23	; 0x17
    41ca:	88 27       	eor	r24, r24
    41cc:	77 fd       	sbrc	r23, 7
    41ce:	80 95       	com	r24
    41d0:	98 2f       	mov	r25, r24
    41d2:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    41d6:	cb 54       	subi	r28, 0x4B	; 75
    41d8:	df 4f       	sbci	r29, 0xFF	; 255
    41da:	68 83       	st	Y, r22
    41dc:	79 83       	std	Y+1, r23	; 0x01
    41de:	8a 83       	std	Y+2, r24	; 0x02
    41e0:	9b 83       	std	Y+3, r25	; 0x03
    41e2:	c5 5b       	subi	r28, 0xB5	; 181
    41e4:	d0 40       	sbci	r29, 0x00	; 0
		acc_v.y = (*data).acc_y;
    41e6:	f3 01       	movw	r30, r6
    41e8:	60 8d       	ldd	r22, Z+24	; 0x18
    41ea:	71 8d       	ldd	r23, Z+25	; 0x19
    41ec:	88 27       	eor	r24, r24
    41ee:	77 fd       	sbrc	r23, 7
    41f0:	80 95       	com	r24
    41f2:	98 2f       	mov	r25, r24
    41f4:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    41f8:	c7 54       	subi	r28, 0x47	; 71
    41fa:	df 4f       	sbci	r29, 0xFF	; 255
    41fc:	68 83       	st	Y, r22
    41fe:	79 83       	std	Y+1, r23	; 0x01
    4200:	8a 83       	std	Y+2, r24	; 0x02
    4202:	9b 83       	std	Y+3, r25	; 0x03
    4204:	c9 5b       	subi	r28, 0xB9	; 185
    4206:	d0 40       	sbci	r29, 0x00	; 0
		acc_v.z = (*data).acc_z;
    4208:	f3 01       	movw	r30, r6
    420a:	62 8d       	ldd	r22, Z+26	; 0x1a
    420c:	73 8d       	ldd	r23, Z+27	; 0x1b
    420e:	88 27       	eor	r24, r24
    4210:	77 fd       	sbrc	r23, 7
    4212:	80 95       	com	r24
    4214:	98 2f       	mov	r25, r24
    4216:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    421a:	c3 54       	subi	r28, 0x43	; 67
    421c:	df 4f       	sbci	r29, 0xFF	; 255
    421e:	68 83       	st	Y, r22
    4220:	79 83       	std	Y+1, r23	; 0x01
    4222:	8a 83       	std	Y+2, r24	; 0x02
    4224:	9b 83       	std	Y+3, r25	; 0x03
    4226:	cd 5b       	subi	r28, 0xBD	; 189
    4228:	d0 40       	sbci	r29, 0x00	; 0

		mag_v.x = (*data).mag_x;
    422a:	f3 01       	movw	r30, r6
    422c:	60 89       	ldd	r22, Z+16	; 0x10
    422e:	71 89       	ldd	r23, Z+17	; 0x11
    4230:	88 27       	eor	r24, r24
    4232:	77 fd       	sbrc	r23, 7
    4234:	80 95       	com	r24
    4236:	98 2f       	mov	r25, r24
    4238:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    423c:	c7 55       	subi	r28, 0x57	; 87
    423e:	df 4f       	sbci	r29, 0xFF	; 255
    4240:	68 83       	st	Y, r22
    4242:	79 83       	std	Y+1, r23	; 0x01
    4244:	8a 83       	std	Y+2, r24	; 0x02
    4246:	9b 83       	std	Y+3, r25	; 0x03
    4248:	c9 5a       	subi	r28, 0xA9	; 169
    424a:	d0 40       	sbci	r29, 0x00	; 0
		mag_v.y = (*data).mag_y;
    424c:	f3 01       	movw	r30, r6
    424e:	62 89       	ldd	r22, Z+18	; 0x12
    4250:	73 89       	ldd	r23, Z+19	; 0x13
    4252:	88 27       	eor	r24, r24
    4254:	77 fd       	sbrc	r23, 7
    4256:	80 95       	com	r24
    4258:	98 2f       	mov	r25, r24
    425a:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    425e:	c3 55       	subi	r28, 0x53	; 83
    4260:	df 4f       	sbci	r29, 0xFF	; 255
    4262:	68 83       	st	Y, r22
    4264:	79 83       	std	Y+1, r23	; 0x01
    4266:	8a 83       	std	Y+2, r24	; 0x02
    4268:	9b 83       	std	Y+3, r25	; 0x03
    426a:	cd 5a       	subi	r28, 0xAD	; 173
    426c:	d0 40       	sbci	r29, 0x00	; 0
		mag_v.z = (*data).mag_z;
    426e:	f3 01       	movw	r30, r6
    4270:	64 89       	ldd	r22, Z+20	; 0x14
    4272:	75 89       	ldd	r23, Z+21	; 0x15
    4274:	88 27       	eor	r24, r24
    4276:	77 fd       	sbrc	r23, 7
    4278:	80 95       	com	r24
    427a:	98 2f       	mov	r25, r24
    427c:	0e 94 7b 33 	call	0x66f6	; 0x66f6 <__floatsisf>
    4280:	cf 54       	subi	r28, 0x4F	; 79
    4282:	df 4f       	sbci	r29, 0xFF	; 255
    4284:	68 83       	st	Y, r22
    4286:	79 83       	std	Y+1, r23	; 0x01
    4288:	8a 83       	std	Y+2, r24	; 0x02
    428a:	9b 83       	std	Y+3, r25	; 0x03
    428c:	c1 5b       	subi	r28, 0xB1	; 177
    428e:	d0 40       	sbci	r29, 0x00	; 0

		hmc5883l_applyCalibration(&mag_v, calib_ptr);
    4290:	60 91 0b 02 	lds	r22, 0x020B
    4294:	70 91 0c 02 	lds	r23, 0x020C
    4298:	ce 01       	movw	r24, r28
    429a:	87 55       	subi	r24, 0x57	; 87
    429c:	9f 4f       	sbci	r25, 0xFF	; 255
    429e:	0e 94 c1 14 	call	0x2982	; 0x2982 <hmc5883l_applyCalibration>

		vector3d down = vector_inv(acc_v);
    42a2:	cb 54       	subi	r28, 0x4B	; 75
    42a4:	df 4f       	sbci	r29, 0xFF	; 255
    42a6:	c8 80       	ld	r12, Y
    42a8:	c5 5b       	subi	r28, 0xB5	; 181
    42aa:	d0 40       	sbci	r29, 0x00	; 0
    42ac:	ca 54       	subi	r28, 0x4A	; 74
    42ae:	df 4f       	sbci	r29, 0xFF	; 255
    42b0:	d8 80       	ld	r13, Y
    42b2:	c6 5b       	subi	r28, 0xB6	; 182
    42b4:	d0 40       	sbci	r29, 0x00	; 0
    42b6:	c9 54       	subi	r28, 0x49	; 73
    42b8:	df 4f       	sbci	r29, 0xFF	; 255
    42ba:	e8 80       	ld	r14, Y
    42bc:	c7 5b       	subi	r28, 0xB7	; 183
    42be:	d0 40       	sbci	r29, 0x00	; 0
    42c0:	c8 54       	subi	r28, 0x48	; 72
    42c2:	df 4f       	sbci	r29, 0xFF	; 255
    42c4:	f8 80       	ld	r15, Y
    42c6:	c8 5b       	subi	r28, 0xB8	; 184
    42c8:	d0 40       	sbci	r29, 0x00	; 0
    42ca:	c7 54       	subi	r28, 0x47	; 71
    42cc:	df 4f       	sbci	r29, 0xFF	; 255
    42ce:	08 81       	ld	r16, Y
    42d0:	c9 5b       	subi	r28, 0xB9	; 185
    42d2:	d0 40       	sbci	r29, 0x00	; 0
    42d4:	c6 54       	subi	r28, 0x46	; 70
    42d6:	df 4f       	sbci	r29, 0xFF	; 255
    42d8:	18 81       	ld	r17, Y
    42da:	ca 5b       	subi	r28, 0xBA	; 186
    42dc:	d0 40       	sbci	r29, 0x00	; 0
    42de:	c5 54       	subi	r28, 0x45	; 69
    42e0:	df 4f       	sbci	r29, 0xFF	; 255
    42e2:	28 81       	ld	r18, Y
    42e4:	cb 5b       	subi	r28, 0xBB	; 187
    42e6:	d0 40       	sbci	r29, 0x00	; 0
    42e8:	c4 54       	subi	r28, 0x44	; 68
    42ea:	df 4f       	sbci	r29, 0xFF	; 255
    42ec:	38 81       	ld	r19, Y
    42ee:	cc 5b       	subi	r28, 0xBC	; 188
    42f0:	d0 40       	sbci	r29, 0x00	; 0
    42f2:	c3 54       	subi	r28, 0x43	; 67
    42f4:	df 4f       	sbci	r29, 0xFF	; 255
    42f6:	48 81       	ld	r20, Y
    42f8:	cd 5b       	subi	r28, 0xBD	; 189
    42fa:	d0 40       	sbci	r29, 0x00	; 0
    42fc:	c2 54       	subi	r28, 0x42	; 66
    42fe:	df 4f       	sbci	r29, 0xFF	; 255
    4300:	58 81       	ld	r21, Y
    4302:	ce 5b       	subi	r28, 0xBE	; 190
    4304:	d0 40       	sbci	r29, 0x00	; 0
    4306:	c1 54       	subi	r28, 0x41	; 65
    4308:	df 4f       	sbci	r29, 0xFF	; 255
    430a:	68 81       	ld	r22, Y
    430c:	cf 5b       	subi	r28, 0xBF	; 191
    430e:	d0 40       	sbci	r29, 0x00	; 0
    4310:	c0 54       	subi	r28, 0x40	; 64
    4312:	df 4f       	sbci	r29, 0xFF	; 255
    4314:	78 81       	ld	r23, Y
    4316:	c0 5c       	subi	r28, 0xC0	; 192
    4318:	d0 40       	sbci	r29, 0x00	; 0
    431a:	ce 01       	movw	r24, r28
    431c:	83 56       	subi	r24, 0x63	; 99
    431e:	9f 4f       	sbci	r25, 0xFF	; 255
    4320:	41 d8       	rcall	.-3966   	; 0x33a4 <vector_inv>
    4322:	8d b7       	in	r24, 0x3d	; 61
		vector3d east = vector_cross(down, mag_v);
    4324:	9e b7       	in	r25, 0x3e	; 62
    4326:	0c 97       	sbiw	r24, 0x0c	; 12
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	9e bf       	out	0x3e, r25	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	8d bf       	out	0x3d, r24	; 61
    4332:	ad b7       	in	r26, 0x3d	; 61
    4334:	be b7       	in	r27, 0x3e	; 62
    4336:	11 96       	adiw	r26, 0x01	; 1
    4338:	8c e0       	ldi	r24, 0x0C	; 12
    433a:	fe 01       	movw	r30, r28
    433c:	e7 55       	subi	r30, 0x57	; 87
    433e:	ff 4f       	sbci	r31, 0xFF	; 255
    4340:	01 90       	ld	r0, Z+
    4342:	0d 92       	st	X+, r0
    4344:	8a 95       	dec	r24
    4346:	e1 f7       	brne	.-8      	; 0x4340 <ahrs_drift_correction+0x260>
    4348:	c3 56       	subi	r28, 0x63	; 99
    434a:	df 4f       	sbci	r29, 0xFF	; 255
    434c:	c8 80       	ld	r12, Y
    434e:	cd 59       	subi	r28, 0x9D	; 157
    4350:	d0 40       	sbci	r29, 0x00	; 0
    4352:	c2 56       	subi	r28, 0x62	; 98
    4354:	df 4f       	sbci	r29, 0xFF	; 255
    4356:	d8 80       	ld	r13, Y
    4358:	ce 59       	subi	r28, 0x9E	; 158
    435a:	d0 40       	sbci	r29, 0x00	; 0
    435c:	c1 56       	subi	r28, 0x61	; 97
    435e:	df 4f       	sbci	r29, 0xFF	; 255
    4360:	e8 80       	ld	r14, Y
    4362:	cf 59       	subi	r28, 0x9F	; 159
    4364:	d0 40       	sbci	r29, 0x00	; 0
    4366:	c0 56       	subi	r28, 0x60	; 96
    4368:	df 4f       	sbci	r29, 0xFF	; 255
    436a:	f8 80       	ld	r15, Y
    436c:	c0 5a       	subi	r28, 0xA0	; 160
    436e:	d0 40       	sbci	r29, 0x00	; 0
    4370:	cf 55       	subi	r28, 0x5F	; 95
    4372:	df 4f       	sbci	r29, 0xFF	; 255
    4374:	08 81       	ld	r16, Y
    4376:	c1 5a       	subi	r28, 0xA1	; 161
    4378:	d0 40       	sbci	r29, 0x00	; 0
    437a:	ce 55       	subi	r28, 0x5E	; 94
    437c:	df 4f       	sbci	r29, 0xFF	; 255
    437e:	18 81       	ld	r17, Y
    4380:	c2 5a       	subi	r28, 0xA2	; 162
    4382:	d0 40       	sbci	r29, 0x00	; 0
    4384:	cd 55       	subi	r28, 0x5D	; 93
    4386:	df 4f       	sbci	r29, 0xFF	; 255
    4388:	28 81       	ld	r18, Y
    438a:	c3 5a       	subi	r28, 0xA3	; 163
    438c:	d0 40       	sbci	r29, 0x00	; 0
    438e:	cc 55       	subi	r28, 0x5C	; 92
    4390:	df 4f       	sbci	r29, 0xFF	; 255
    4392:	38 81       	ld	r19, Y
    4394:	c4 5a       	subi	r28, 0xA4	; 164
    4396:	d0 40       	sbci	r29, 0x00	; 0
    4398:	cb 55       	subi	r28, 0x5B	; 91
    439a:	df 4f       	sbci	r29, 0xFF	; 255
    439c:	48 81       	ld	r20, Y
    439e:	c5 5a       	subi	r28, 0xA5	; 165
    43a0:	d0 40       	sbci	r29, 0x00	; 0
    43a2:	ca 55       	subi	r28, 0x5A	; 90
    43a4:	df 4f       	sbci	r29, 0xFF	; 255
    43a6:	58 81       	ld	r21, Y
    43a8:	c6 5a       	subi	r28, 0xA6	; 166
    43aa:	d0 40       	sbci	r29, 0x00	; 0
    43ac:	c9 55       	subi	r28, 0x59	; 89
    43ae:	df 4f       	sbci	r29, 0xFF	; 255
    43b0:	68 81       	ld	r22, Y
    43b2:	c7 5a       	subi	r28, 0xA7	; 167
    43b4:	d0 40       	sbci	r29, 0x00	; 0
    43b6:	c8 55       	subi	r28, 0x58	; 88
    43b8:	df 4f       	sbci	r29, 0xFF	; 255
    43ba:	78 81       	ld	r23, Y
    43bc:	c8 5a       	subi	r28, 0xA8	; 168
    43be:	d0 40       	sbci	r29, 0x00	; 0
    43c0:	ce 01       	movw	r24, r28
    43c2:	8f 56       	subi	r24, 0x6F	; 111
    43c4:	9f 4f       	sbci	r25, 0xFF	; 255
    43c6:	a2 d8       	rcall	.-3772   	; 0x350c <vector_cross>
    43c8:	ed b7       	in	r30, 0x3d	; 61
    43ca:	fe b7       	in	r31, 0x3e	; 62
		vector3d north = vector_cross(east, down);
    43cc:	3c 97       	sbiw	r30, 0x0c	; 12
    43ce:	0f b6       	in	r0, 0x3f	; 63
    43d0:	f8 94       	cli
    43d2:	fe bf       	out	0x3e, r31	; 62
    43d4:	0f be       	out	0x3f, r0	; 63
    43d6:	ed bf       	out	0x3d, r30	; 61
    43d8:	ad b7       	in	r26, 0x3d	; 61
    43da:	be b7       	in	r27, 0x3e	; 62
    43dc:	11 96       	adiw	r26, 0x01	; 1
    43de:	8c e0       	ldi	r24, 0x0C	; 12
    43e0:	fe 01       	movw	r30, r28
    43e2:	e3 56       	subi	r30, 0x63	; 99
    43e4:	ff 4f       	sbci	r31, 0xFF	; 255
    43e6:	01 90       	ld	r0, Z+
    43e8:	0d 92       	st	X+, r0
    43ea:	8a 95       	dec	r24
    43ec:	e1 f7       	brne	.-8      	; 0x43e6 <ahrs_drift_correction+0x306>
    43ee:	cf 56       	subi	r28, 0x6F	; 111
    43f0:	df 4f       	sbci	r29, 0xFF	; 255
    43f2:	c8 80       	ld	r12, Y
    43f4:	c1 59       	subi	r28, 0x91	; 145
    43f6:	d0 40       	sbci	r29, 0x00	; 0
    43f8:	ce 56       	subi	r28, 0x6E	; 110
    43fa:	df 4f       	sbci	r29, 0xFF	; 255
    43fc:	d8 80       	ld	r13, Y
    43fe:	c2 59       	subi	r28, 0x92	; 146
    4400:	d0 40       	sbci	r29, 0x00	; 0
    4402:	cd 56       	subi	r28, 0x6D	; 109
    4404:	df 4f       	sbci	r29, 0xFF	; 255
    4406:	e8 80       	ld	r14, Y
    4408:	c3 59       	subi	r28, 0x93	; 147
    440a:	d0 40       	sbci	r29, 0x00	; 0
    440c:	cc 56       	subi	r28, 0x6C	; 108
    440e:	df 4f       	sbci	r29, 0xFF	; 255
    4410:	f8 80       	ld	r15, Y
    4412:	c4 59       	subi	r28, 0x94	; 148
    4414:	d0 40       	sbci	r29, 0x00	; 0
    4416:	cb 56       	subi	r28, 0x6B	; 107
    4418:	df 4f       	sbci	r29, 0xFF	; 255
    441a:	08 81       	ld	r16, Y
    441c:	c5 59       	subi	r28, 0x95	; 149
    441e:	d0 40       	sbci	r29, 0x00	; 0
    4420:	ca 56       	subi	r28, 0x6A	; 106
    4422:	df 4f       	sbci	r29, 0xFF	; 255
    4424:	18 81       	ld	r17, Y
    4426:	c6 59       	subi	r28, 0x96	; 150
    4428:	d0 40       	sbci	r29, 0x00	; 0
    442a:	c9 56       	subi	r28, 0x69	; 105
    442c:	df 4f       	sbci	r29, 0xFF	; 255
    442e:	28 81       	ld	r18, Y
    4430:	c7 59       	subi	r28, 0x97	; 151
    4432:	d0 40       	sbci	r29, 0x00	; 0
    4434:	c8 56       	subi	r28, 0x68	; 104
    4436:	df 4f       	sbci	r29, 0xFF	; 255
    4438:	38 81       	ld	r19, Y
    443a:	c8 59       	subi	r28, 0x98	; 152
    443c:	d0 40       	sbci	r29, 0x00	; 0
    443e:	c7 56       	subi	r28, 0x67	; 103
    4440:	df 4f       	sbci	r29, 0xFF	; 255
    4442:	48 81       	ld	r20, Y
    4444:	c9 59       	subi	r28, 0x99	; 153
    4446:	d0 40       	sbci	r29, 0x00	; 0
    4448:	c6 56       	subi	r28, 0x66	; 102
    444a:	df 4f       	sbci	r29, 0xFF	; 255
    444c:	58 81       	ld	r21, Y
    444e:	ca 59       	subi	r28, 0x9A	; 154
    4450:	d0 40       	sbci	r29, 0x00	; 0
    4452:	c5 56       	subi	r28, 0x65	; 101
    4454:	df 4f       	sbci	r29, 0xFF	; 255
    4456:	68 81       	ld	r22, Y
    4458:	cb 59       	subi	r28, 0x9B	; 155
    445a:	d0 40       	sbci	r29, 0x00	; 0
    445c:	c4 56       	subi	r28, 0x64	; 100
    445e:	df 4f       	sbci	r29, 0xFF	; 255
    4460:	78 81       	ld	r23, Y
    4462:	cc 59       	subi	r28, 0x9C	; 156
    4464:	d0 40       	sbci	r29, 0x00	; 0
    4466:	ce 01       	movw	r24, r28
    4468:	8b 57       	subi	r24, 0x7B	; 123
    446a:	9f 4f       	sbci	r25, 0xFF	; 255
    446c:	4f d8       	rcall	.-3938   	; 0x350c <vector_cross>
    446e:	ce 01       	movw	r24, r28
    4470:	83 56       	subi	r24, 0x63	; 99
    4472:	9f 4f       	sbci	r25, 0xFF	; 255

		//normalize vectors
		vector_norm(&down);
    4474:	0e 94 86 19 	call	0x330c	; 0x330c <vector_norm>
    4478:	ce 01       	movw	r24, r28
    447a:	8f 56       	subi	r24, 0x6F	; 111
    447c:	9f 4f       	sbci	r25, 0xFF	; 255
		vector_norm(&east);
    447e:	0e 94 86 19 	call	0x330c	; 0x330c <vector_norm>
    4482:	ce 01       	movw	r24, r28
    4484:	8b 57       	subi	r24, 0x7B	; 123
    4486:	9f 4f       	sbci	r25, 0xFF	; 255
		vector_norm(&north);
    4488:	0e 94 86 19 	call	0x330c	; 0x330c <vector_norm>
    448c:	f3 01       	movw	r30, r6
    448e:	80 80       	ld	r8, Z
    4490:	91 80       	ldd	r9, Z+1	; 0x01

		//matrix from rotation quaternion
		matrix3x3d rot_matrix = quaternion_to_matrix((*data).qr);
    4492:	a2 80       	ldd	r10, Z+2	; 0x02
    4494:	b3 80       	ldd	r11, Z+3	; 0x03
    4496:	c4 80       	ldd	r12, Z+4	; 0x04
    4498:	d5 80       	ldd	r13, Z+5	; 0x05
    449a:	e6 80       	ldd	r14, Z+6	; 0x06
    449c:	f7 80       	ldd	r15, Z+7	; 0x07
    449e:	00 85       	ldd	r16, Z+8	; 0x08
    44a0:	11 85       	ldd	r17, Z+9	; 0x09
    44a2:	22 85       	ldd	r18, Z+10	; 0x0a
    44a4:	33 85       	ldd	r19, Z+11	; 0x0b
    44a6:	44 85       	ldd	r20, Z+12	; 0x0c
    44a8:	55 85       	ldd	r21, Z+13	; 0x0d
    44aa:	66 85       	ldd	r22, Z+14	; 0x0e
    44ac:	77 85       	ldd	r23, Z+15	; 0x0f
    44ae:	ce 01       	movw	r24, r28
    44b0:	01 96       	adiw	r24, 0x01	; 1
    44b2:	c6 d5       	rcall	.+2956   	; 0x5040 <quaternion_to_matrix>
    44b4:	42 e0       	ldi	r20, 0x02	; 2
    44b6:	be 01       	movw	r22, r28
    44b8:	6f 5f       	subi	r22, 0xFF	; 255
    44ba:	7f 4f       	sbci	r23, 0xFF	; 255

		//correction vector calculation
		vector3d sum1 = vector_sum(vector_cross(north, matrix_row_to_vector(&rot_matrix, 1)),
    44bc:	ce 01       	movw	r24, r28
    44be:	8f 59       	subi	r24, 0x9F	; 159
    44c0:	9f 4f       	sbci	r25, 0xFF	; 255
    44c2:	e7 d8       	rcall	.-3634   	; 0x3692 <matrix_row_to_vector>
    44c4:	8d b7       	in	r24, 0x3d	; 61
    44c6:	9e b7       	in	r25, 0x3e	; 62
    44c8:	0c 97       	sbiw	r24, 0x0c	; 12
    44ca:	0f b6       	in	r0, 0x3f	; 63
    44cc:	f8 94       	cli
    44ce:	9e bf       	out	0x3e, r25	; 62
    44d0:	0f be       	out	0x3f, r0	; 63
    44d2:	8d bf       	out	0x3d, r24	; 61
    44d4:	ad b7       	in	r26, 0x3d	; 61
    44d6:	be b7       	in	r27, 0x3e	; 62
    44d8:	11 96       	adiw	r26, 0x01	; 1
    44da:	8c e0       	ldi	r24, 0x0C	; 12
    44dc:	fe 01       	movw	r30, r28
    44de:	ef 59       	subi	r30, 0x9F	; 159
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	01 90       	ld	r0, Z+
    44e4:	0d 92       	st	X+, r0
    44e6:	8a 95       	dec	r24
    44e8:	e1 f7       	brne	.-8      	; 0x44e2 <ahrs_drift_correction+0x402>
    44ea:	cf 56       	subi	r28, 0x6F	; 111
    44ec:	df 4f       	sbci	r29, 0xFF	; 255
    44ee:	c8 80       	ld	r12, Y
    44f0:	c1 59       	subi	r28, 0x91	; 145
    44f2:	d0 40       	sbci	r29, 0x00	; 0
    44f4:	ce 56       	subi	r28, 0x6E	; 110
    44f6:	df 4f       	sbci	r29, 0xFF	; 255
    44f8:	d8 80       	ld	r13, Y
    44fa:	c2 59       	subi	r28, 0x92	; 146
    44fc:	d0 40       	sbci	r29, 0x00	; 0
    44fe:	cd 56       	subi	r28, 0x6D	; 109
    4500:	df 4f       	sbci	r29, 0xFF	; 255
    4502:	e8 80       	ld	r14, Y
    4504:	c3 59       	subi	r28, 0x93	; 147
    4506:	d0 40       	sbci	r29, 0x00	; 0
    4508:	cc 56       	subi	r28, 0x6C	; 108
    450a:	df 4f       	sbci	r29, 0xFF	; 255
    450c:	f8 80       	ld	r15, Y
    450e:	c4 59       	subi	r28, 0x94	; 148
    4510:	d0 40       	sbci	r29, 0x00	; 0
    4512:	cb 56       	subi	r28, 0x6B	; 107
    4514:	df 4f       	sbci	r29, 0xFF	; 255
    4516:	08 81       	ld	r16, Y
    4518:	c5 59       	subi	r28, 0x95	; 149
    451a:	d0 40       	sbci	r29, 0x00	; 0
    451c:	ca 56       	subi	r28, 0x6A	; 106
    451e:	df 4f       	sbci	r29, 0xFF	; 255
    4520:	18 81       	ld	r17, Y
    4522:	c6 59       	subi	r28, 0x96	; 150
    4524:	d0 40       	sbci	r29, 0x00	; 0
    4526:	c9 56       	subi	r28, 0x69	; 105
    4528:	df 4f       	sbci	r29, 0xFF	; 255
    452a:	28 81       	ld	r18, Y
    452c:	c7 59       	subi	r28, 0x97	; 151
    452e:	d0 40       	sbci	r29, 0x00	; 0
    4530:	c8 56       	subi	r28, 0x68	; 104
    4532:	df 4f       	sbci	r29, 0xFF	; 255
    4534:	38 81       	ld	r19, Y
    4536:	c8 59       	subi	r28, 0x98	; 152
    4538:	d0 40       	sbci	r29, 0x00	; 0
    453a:	c7 56       	subi	r28, 0x67	; 103
    453c:	df 4f       	sbci	r29, 0xFF	; 255
    453e:	48 81       	ld	r20, Y
    4540:	c9 59       	subi	r28, 0x99	; 153
    4542:	d0 40       	sbci	r29, 0x00	; 0
    4544:	c6 56       	subi	r28, 0x66	; 102
    4546:	df 4f       	sbci	r29, 0xFF	; 255
    4548:	58 81       	ld	r21, Y
    454a:	ca 59       	subi	r28, 0x9A	; 154
    454c:	d0 40       	sbci	r29, 0x00	; 0
    454e:	c5 56       	subi	r28, 0x65	; 101
    4550:	df 4f       	sbci	r29, 0xFF	; 255
    4552:	68 81       	ld	r22, Y
    4554:	cb 59       	subi	r28, 0x9B	; 155
    4556:	d0 40       	sbci	r29, 0x00	; 0
    4558:	c4 56       	subi	r28, 0x64	; 100
    455a:	df 4f       	sbci	r29, 0xFF	; 255
    455c:	78 81       	ld	r23, Y
    455e:	cc 59       	subi	r28, 0x9C	; 156
    4560:	d0 40       	sbci	r29, 0x00	; 0
    4562:	ce 01       	movw	r24, r28
    4564:	8b 5a       	subi	r24, 0xAB	; 171
    4566:	9f 4f       	sbci	r25, 0xFF	; 255
    4568:	0e 94 86 1a 	call	0x350c	; 0x350c <vector_cross>
    456c:	0f b6       	in	r0, 0x3f	; 63
    456e:	f8 94       	cli
    4570:	de bf       	out	0x3e, r29	; 62
    4572:	0f be       	out	0x3f, r0	; 63
    4574:	cd bf       	out	0x3d, r28	; 61
    4576:	41 e0       	ldi	r20, 0x01	; 1
    4578:	be 01       	movw	r22, r28
    457a:	6f 5f       	subi	r22, 0xFF	; 255
    457c:	7f 4f       	sbci	r23, 0xFF	; 255
    457e:	ce 01       	movw	r24, r28
    4580:	87 5b       	subi	r24, 0xB7	; 183
    4582:	9f 4f       	sbci	r25, 0xFF	; 255
    4584:	86 d8       	rcall	.-3828   	; 0x3692 <matrix_row_to_vector>
    4586:	8d b7       	in	r24, 0x3d	; 61
    4588:	9e b7       	in	r25, 0x3e	; 62
    458a:	0c 97       	sbiw	r24, 0x0c	; 12
    458c:	0f b6       	in	r0, 0x3f	; 63
    458e:	f8 94       	cli
    4590:	9e bf       	out	0x3e, r25	; 62
    4592:	0f be       	out	0x3f, r0	; 63
    4594:	8d bf       	out	0x3d, r24	; 61
    4596:	ad b7       	in	r26, 0x3d	; 61
    4598:	be b7       	in	r27, 0x3e	; 62
    459a:	11 96       	adiw	r26, 0x01	; 1
    459c:	8c e0       	ldi	r24, 0x0C	; 12
    459e:	fe 01       	movw	r30, r28
    45a0:	e7 5b       	subi	r30, 0xB7	; 183
    45a2:	ff 4f       	sbci	r31, 0xFF	; 255
    45a4:	01 90       	ld	r0, Z+
    45a6:	0d 92       	st	X+, r0
    45a8:	8a 95       	dec	r24
    45aa:	e1 f7       	brne	.-8      	; 0x45a4 <ahrs_drift_correction+0x4c4>
    45ac:	cb 57       	subi	r28, 0x7B	; 123
    45ae:	df 4f       	sbci	r29, 0xFF	; 255
    45b0:	c8 80       	ld	r12, Y
    45b2:	c5 58       	subi	r28, 0x85	; 133
    45b4:	d0 40       	sbci	r29, 0x00	; 0
    45b6:	ca 57       	subi	r28, 0x7A	; 122
    45b8:	df 4f       	sbci	r29, 0xFF	; 255
    45ba:	d8 80       	ld	r13, Y
    45bc:	c6 58       	subi	r28, 0x86	; 134
    45be:	d0 40       	sbci	r29, 0x00	; 0
    45c0:	c9 57       	subi	r28, 0x79	; 121
    45c2:	df 4f       	sbci	r29, 0xFF	; 255
    45c4:	e8 80       	ld	r14, Y
    45c6:	c7 58       	subi	r28, 0x87	; 135
    45c8:	d0 40       	sbci	r29, 0x00	; 0
    45ca:	c8 57       	subi	r28, 0x78	; 120
    45cc:	df 4f       	sbci	r29, 0xFF	; 255
    45ce:	f8 80       	ld	r15, Y
    45d0:	c8 58       	subi	r28, 0x88	; 136
    45d2:	d0 40       	sbci	r29, 0x00	; 0
    45d4:	c7 57       	subi	r28, 0x77	; 119
    45d6:	df 4f       	sbci	r29, 0xFF	; 255
    45d8:	08 81       	ld	r16, Y
    45da:	c9 58       	subi	r28, 0x89	; 137
    45dc:	d0 40       	sbci	r29, 0x00	; 0
    45de:	c6 57       	subi	r28, 0x76	; 118
    45e0:	df 4f       	sbci	r29, 0xFF	; 255
    45e2:	18 81       	ld	r17, Y
    45e4:	ca 58       	subi	r28, 0x8A	; 138
    45e6:	d0 40       	sbci	r29, 0x00	; 0
    45e8:	c5 57       	subi	r28, 0x75	; 117
    45ea:	df 4f       	sbci	r29, 0xFF	; 255
    45ec:	28 81       	ld	r18, Y
    45ee:	cb 58       	subi	r28, 0x8B	; 139
    45f0:	d0 40       	sbci	r29, 0x00	; 0
    45f2:	c4 57       	subi	r28, 0x74	; 116
    45f4:	df 4f       	sbci	r29, 0xFF	; 255
    45f6:	38 81       	ld	r19, Y
    45f8:	cc 58       	subi	r28, 0x8C	; 140
    45fa:	d0 40       	sbci	r29, 0x00	; 0
    45fc:	c3 57       	subi	r28, 0x73	; 115
    45fe:	df 4f       	sbci	r29, 0xFF	; 255
    4600:	48 81       	ld	r20, Y
    4602:	cd 58       	subi	r28, 0x8D	; 141
    4604:	d0 40       	sbci	r29, 0x00	; 0
    4606:	c2 57       	subi	r28, 0x72	; 114
    4608:	df 4f       	sbci	r29, 0xFF	; 255
    460a:	58 81       	ld	r21, Y
    460c:	ce 58       	subi	r28, 0x8E	; 142
    460e:	d0 40       	sbci	r29, 0x00	; 0
    4610:	c1 57       	subi	r28, 0x71	; 113
    4612:	df 4f       	sbci	r29, 0xFF	; 255
    4614:	68 81       	ld	r22, Y
    4616:	cf 58       	subi	r28, 0x8F	; 143
    4618:	d0 40       	sbci	r29, 0x00	; 0
    461a:	c0 57       	subi	r28, 0x70	; 112
    461c:	df 4f       	sbci	r29, 0xFF	; 255
    461e:	78 81       	ld	r23, Y
    4620:	c0 59       	subi	r28, 0x90	; 144
    4622:	d0 40       	sbci	r29, 0x00	; 0
    4624:	ce 01       	movw	r24, r28
    4626:	cd 96       	adiw	r24, 0x3d	; 61
    4628:	0e 94 86 1a 	call	0x350c	; 0x350c <vector_cross>
    462c:	ed b7       	in	r30, 0x3d	; 61
    462e:	fe b7       	in	r31, 0x3e	; 62
    4630:	3c 97       	sbiw	r30, 0x0c	; 12
    4632:	0f b6       	in	r0, 0x3f	; 63
    4634:	f8 94       	cli
    4636:	fe bf       	out	0x3e, r31	; 62
    4638:	0f be       	out	0x3f, r0	; 63
    463a:	ed bf       	out	0x3d, r30	; 61
    463c:	ad b7       	in	r26, 0x3d	; 61
    463e:	be b7       	in	r27, 0x3e	; 62
    4640:	11 96       	adiw	r26, 0x01	; 1
    4642:	8c e0       	ldi	r24, 0x0C	; 12
    4644:	fe 01       	movw	r30, r28
    4646:	eb 5a       	subi	r30, 0xAB	; 171
    4648:	ff 4f       	sbci	r31, 0xFF	; 255
    464a:	01 90       	ld	r0, Z+
    464c:	0d 92       	st	X+, r0
    464e:	8a 95       	dec	r24
    4650:	e1 f7       	brne	.-8      	; 0x464a <ahrs_drift_correction+0x56a>
    4652:	cd ac       	ldd	r12, Y+61	; 0x3d
    4654:	de ac       	ldd	r13, Y+62	; 0x3e
    4656:	ef ac       	ldd	r14, Y+63	; 0x3f
    4658:	21 96       	adiw	r28, 0x01	; 1
    465a:	ff ac       	ldd	r15, Y+63	; 0x3f
    465c:	21 97       	sbiw	r28, 0x01	; 1
    465e:	22 96       	adiw	r28, 0x02	; 2
    4660:	0f ad       	ldd	r16, Y+63	; 0x3f
    4662:	22 97       	sbiw	r28, 0x02	; 2
    4664:	23 96       	adiw	r28, 0x03	; 3
    4666:	1f ad       	ldd	r17, Y+63	; 0x3f
    4668:	23 97       	sbiw	r28, 0x03	; 3
    466a:	24 96       	adiw	r28, 0x04	; 4
    466c:	2f ad       	ldd	r18, Y+63	; 0x3f
    466e:	24 97       	sbiw	r28, 0x04	; 4
    4670:	25 96       	adiw	r28, 0x05	; 5
    4672:	3f ad       	ldd	r19, Y+63	; 0x3f
    4674:	25 97       	sbiw	r28, 0x05	; 5
    4676:	26 96       	adiw	r28, 0x06	; 6
    4678:	4f ad       	ldd	r20, Y+63	; 0x3f
    467a:	26 97       	sbiw	r28, 0x06	; 6
    467c:	27 96       	adiw	r28, 0x07	; 7
    467e:	5f ad       	ldd	r21, Y+63	; 0x3f
    4680:	27 97       	sbiw	r28, 0x07	; 7
    4682:	28 96       	adiw	r28, 0x08	; 8
    4684:	6f ad       	ldd	r22, Y+63	; 0x3f
    4686:	28 97       	sbiw	r28, 0x08	; 8
    4688:	29 96       	adiw	r28, 0x09	; 9
    468a:	7f ad       	ldd	r23, Y+63	; 0x3f
    468c:	29 97       	sbiw	r28, 0x09	; 9
    468e:	ce 01       	movw	r24, r28
    4690:	87 58       	subi	r24, 0x87	; 135
    4692:	9f 4f       	sbci	r25, 0xFF	; 255
    4694:	0e 94 1e 19 	call	0x323c	; 0x323c <vector_sum>
    4698:	43 e0       	ldi	r20, 0x03	; 3
    469a:	be 01       	movw	r22, r28
    469c:	6f 5f       	subi	r22, 0xFF	; 255
    469e:	7f 4f       	sbci	r23, 0xFF	; 255
    46a0:	ce 01       	movw	r24, r28
    46a2:	c1 96       	adiw	r24, 0x31	; 49
				vector_cross(east, matrix_row_to_vector(&rot_matrix, 2)));

		vector3d sum2 = vector_sum(sum1, vector_cross(down, matrix_row_to_vector(&rot_matrix, 3)));
    46a4:	0e 94 49 1b 	call	0x3692	; 0x3692 <matrix_row_to_vector>
    46a8:	8d b7       	in	r24, 0x3d	; 61
    46aa:	9e b7       	in	r25, 0x3e	; 62
    46ac:	0c 97       	sbiw	r24, 0x0c	; 12
    46ae:	0f b6       	in	r0, 0x3f	; 63
    46b0:	f8 94       	cli
    46b2:	9e bf       	out	0x3e, r25	; 62
    46b4:	0f be       	out	0x3f, r0	; 63
    46b6:	8d bf       	out	0x3d, r24	; 61
    46b8:	ad b7       	in	r26, 0x3d	; 61
    46ba:	be b7       	in	r27, 0x3e	; 62
    46bc:	11 96       	adiw	r26, 0x01	; 1
    46be:	8c e0       	ldi	r24, 0x0C	; 12
    46c0:	fe 01       	movw	r30, r28
    46c2:	f1 96       	adiw	r30, 0x31	; 49
    46c4:	01 90       	ld	r0, Z+
    46c6:	0d 92       	st	X+, r0
    46c8:	8a 95       	dec	r24
    46ca:	e1 f7       	brne	.-8      	; 0x46c4 <ahrs_drift_correction+0x5e4>
    46cc:	c3 56       	subi	r28, 0x63	; 99
    46ce:	df 4f       	sbci	r29, 0xFF	; 255
    46d0:	c8 80       	ld	r12, Y
    46d2:	cd 59       	subi	r28, 0x9D	; 157
    46d4:	d0 40       	sbci	r29, 0x00	; 0
    46d6:	c2 56       	subi	r28, 0x62	; 98
    46d8:	df 4f       	sbci	r29, 0xFF	; 255
    46da:	d8 80       	ld	r13, Y
    46dc:	ce 59       	subi	r28, 0x9E	; 158
    46de:	d0 40       	sbci	r29, 0x00	; 0
    46e0:	c1 56       	subi	r28, 0x61	; 97
    46e2:	df 4f       	sbci	r29, 0xFF	; 255
    46e4:	e8 80       	ld	r14, Y
    46e6:	cf 59       	subi	r28, 0x9F	; 159
    46e8:	d0 40       	sbci	r29, 0x00	; 0
    46ea:	c0 56       	subi	r28, 0x60	; 96
    46ec:	df 4f       	sbci	r29, 0xFF	; 255
    46ee:	f8 80       	ld	r15, Y
    46f0:	c0 5a       	subi	r28, 0xA0	; 160
    46f2:	d0 40       	sbci	r29, 0x00	; 0
    46f4:	cf 55       	subi	r28, 0x5F	; 95
    46f6:	df 4f       	sbci	r29, 0xFF	; 255
    46f8:	08 81       	ld	r16, Y
    46fa:	c1 5a       	subi	r28, 0xA1	; 161
    46fc:	d0 40       	sbci	r29, 0x00	; 0
    46fe:	ce 55       	subi	r28, 0x5E	; 94
    4700:	df 4f       	sbci	r29, 0xFF	; 255
    4702:	18 81       	ld	r17, Y
    4704:	c2 5a       	subi	r28, 0xA2	; 162
    4706:	d0 40       	sbci	r29, 0x00	; 0
    4708:	cd 55       	subi	r28, 0x5D	; 93
    470a:	df 4f       	sbci	r29, 0xFF	; 255
    470c:	28 81       	ld	r18, Y
    470e:	c3 5a       	subi	r28, 0xA3	; 163
    4710:	d0 40       	sbci	r29, 0x00	; 0
    4712:	cc 55       	subi	r28, 0x5C	; 92
    4714:	df 4f       	sbci	r29, 0xFF	; 255
    4716:	38 81       	ld	r19, Y
    4718:	c4 5a       	subi	r28, 0xA4	; 164
    471a:	d0 40       	sbci	r29, 0x00	; 0
    471c:	cb 55       	subi	r28, 0x5B	; 91
    471e:	df 4f       	sbci	r29, 0xFF	; 255
    4720:	48 81       	ld	r20, Y
    4722:	c5 5a       	subi	r28, 0xA5	; 165
    4724:	d0 40       	sbci	r29, 0x00	; 0
    4726:	ca 55       	subi	r28, 0x5A	; 90
    4728:	df 4f       	sbci	r29, 0xFF	; 255
    472a:	58 81       	ld	r21, Y
    472c:	c6 5a       	subi	r28, 0xA6	; 166
    472e:	d0 40       	sbci	r29, 0x00	; 0
    4730:	c9 55       	subi	r28, 0x59	; 89
    4732:	df 4f       	sbci	r29, 0xFF	; 255
    4734:	68 81       	ld	r22, Y
    4736:	c7 5a       	subi	r28, 0xA7	; 167
    4738:	d0 40       	sbci	r29, 0x00	; 0
    473a:	c8 55       	subi	r28, 0x58	; 88
    473c:	df 4f       	sbci	r29, 0xFF	; 255
    473e:	78 81       	ld	r23, Y
    4740:	c8 5a       	subi	r28, 0xA8	; 168
    4742:	d0 40       	sbci	r29, 0x00	; 0
    4744:	ce 01       	movw	r24, r28
    4746:	85 96       	adiw	r24, 0x25	; 37
    4748:	0e 94 86 1a 	call	0x350c	; 0x350c <vector_cross>
    474c:	0f b6       	in	r0, 0x3f	; 63
    474e:	f8 94       	cli
    4750:	de bf       	out	0x3e, r29	; 62
    4752:	0f be       	out	0x3f, r0	; 63
    4754:	cd bf       	out	0x3d, r28	; 61
    4756:	8d b7       	in	r24, 0x3d	; 61
    4758:	9e b7       	in	r25, 0x3e	; 62
    475a:	0c 97       	sbiw	r24, 0x0c	; 12
    475c:	0f b6       	in	r0, 0x3f	; 63
    475e:	f8 94       	cli
    4760:	9e bf       	out	0x3e, r25	; 62
    4762:	0f be       	out	0x3f, r0	; 63
    4764:	8d bf       	out	0x3d, r24	; 61
    4766:	ad b7       	in	r26, 0x3d	; 61
    4768:	be b7       	in	r27, 0x3e	; 62
    476a:	11 96       	adiw	r26, 0x01	; 1
    476c:	8c e0       	ldi	r24, 0x0C	; 12
    476e:	fe 01       	movw	r30, r28
    4770:	b5 96       	adiw	r30, 0x25	; 37
    4772:	01 90       	ld	r0, Z+
    4774:	0d 92       	st	X+, r0
    4776:	8a 95       	dec	r24
    4778:	e1 f7       	brne	.-8      	; 0x4772 <ahrs_drift_correction+0x692>
    477a:	ea 96       	adiw	r28, 0x3a	; 58
    477c:	cf ac       	ldd	r12, Y+63	; 0x3f
    477e:	ea 97       	sbiw	r28, 0x3a	; 58
    4780:	eb 96       	adiw	r28, 0x3b	; 59
    4782:	df ac       	ldd	r13, Y+63	; 0x3f
    4784:	eb 97       	sbiw	r28, 0x3b	; 59
    4786:	ec 96       	adiw	r28, 0x3c	; 60
    4788:	ef ac       	ldd	r14, Y+63	; 0x3f
    478a:	ec 97       	sbiw	r28, 0x3c	; 60
    478c:	ed 96       	adiw	r28, 0x3d	; 61
    478e:	ff ac       	ldd	r15, Y+63	; 0x3f
    4790:	ed 97       	sbiw	r28, 0x3d	; 61
    4792:	ee 96       	adiw	r28, 0x3e	; 62
    4794:	0f ad       	ldd	r16, Y+63	; 0x3f
    4796:	ee 97       	sbiw	r28, 0x3e	; 62
    4798:	ef 96       	adiw	r28, 0x3f	; 63
    479a:	1f ad       	ldd	r17, Y+63	; 0x3f
    479c:	ef 97       	sbiw	r28, 0x3f	; 63
    479e:	c1 58       	subi	r28, 0x81	; 129
    47a0:	df 4f       	sbci	r29, 0xFF	; 255
    47a2:	28 81       	ld	r18, Y
    47a4:	cf 57       	subi	r28, 0x7F	; 127
    47a6:	d0 40       	sbci	r29, 0x00	; 0
    47a8:	c0 58       	subi	r28, 0x80	; 128
    47aa:	df 4f       	sbci	r29, 0xFF	; 255
    47ac:	38 81       	ld	r19, Y
    47ae:	c0 58       	subi	r28, 0x80	; 128
    47b0:	d0 40       	sbci	r29, 0x00	; 0
    47b2:	cf 57       	subi	r28, 0x7F	; 127
    47b4:	df 4f       	sbci	r29, 0xFF	; 255
    47b6:	48 81       	ld	r20, Y
    47b8:	c1 58       	subi	r28, 0x81	; 129
    47ba:	d0 40       	sbci	r29, 0x00	; 0
    47bc:	ce 57       	subi	r28, 0x7E	; 126
    47be:	df 4f       	sbci	r29, 0xFF	; 255
    47c0:	58 81       	ld	r21, Y
    47c2:	c2 58       	subi	r28, 0x82	; 130
    47c4:	d0 40       	sbci	r29, 0x00	; 0
    47c6:	cd 57       	subi	r28, 0x7D	; 125
    47c8:	df 4f       	sbci	r29, 0xFF	; 255
    47ca:	68 81       	ld	r22, Y
    47cc:	c3 58       	subi	r28, 0x83	; 131
    47ce:	d0 40       	sbci	r29, 0x00	; 0
    47d0:	cc 57       	subi	r28, 0x7C	; 124
    47d2:	df 4f       	sbci	r29, 0xFF	; 255
    47d4:	78 81       	ld	r23, Y
    47d6:	c4 58       	subi	r28, 0x84	; 132
    47d8:	d0 40       	sbci	r29, 0x00	; 0
    47da:	ce 01       	movw	r24, r28
    47dc:	83 59       	subi	r24, 0x93	; 147
    47de:	9f 4f       	sbci	r25, 0xFF	; 255
    47e0:	0e 94 1e 19 	call	0x323c	; 0x323c <vector_sum>
    47e4:	8a e9       	ldi	r24, 0x9A	; 154
    47e6:	88 2e       	mov	r8, r24
    47e8:	89 e9       	ldi	r24, 0x99	; 153
    47ea:	98 2e       	mov	r9, r24
    47ec:	89 e1       	ldi	r24, 0x19	; 25
    47ee:	a8 2e       	mov	r10, r24

		corr_vector = vector_scale(sum2, corr_strength);
    47f0:	8e e3       	ldi	r24, 0x3E	; 62
    47f2:	b8 2e       	mov	r11, r24
    47f4:	ae 96       	adiw	r28, 0x2e	; 46
    47f6:	cf ac       	ldd	r12, Y+63	; 0x3f
    47f8:	ae 97       	sbiw	r28, 0x2e	; 46
    47fa:	af 96       	adiw	r28, 0x2f	; 47
    47fc:	df ac       	ldd	r13, Y+63	; 0x3f
    47fe:	af 97       	sbiw	r28, 0x2f	; 47
    4800:	e0 96       	adiw	r28, 0x30	; 48
    4802:	ef ac       	ldd	r14, Y+63	; 0x3f
    4804:	e0 97       	sbiw	r28, 0x30	; 48
    4806:	e1 96       	adiw	r28, 0x31	; 49
    4808:	ff ac       	ldd	r15, Y+63	; 0x3f
    480a:	e1 97       	sbiw	r28, 0x31	; 49
    480c:	e2 96       	adiw	r28, 0x32	; 50
    480e:	0f ad       	ldd	r16, Y+63	; 0x3f
    4810:	e2 97       	sbiw	r28, 0x32	; 50
    4812:	e3 96       	adiw	r28, 0x33	; 51
    4814:	1f ad       	ldd	r17, Y+63	; 0x3f
    4816:	e3 97       	sbiw	r28, 0x33	; 51
    4818:	e4 96       	adiw	r28, 0x34	; 52
    481a:	2f ad       	ldd	r18, Y+63	; 0x3f
    481c:	e4 97       	sbiw	r28, 0x34	; 52
    481e:	e5 96       	adiw	r28, 0x35	; 53
    4820:	3f ad       	ldd	r19, Y+63	; 0x3f
    4822:	e5 97       	sbiw	r28, 0x35	; 53
    4824:	e6 96       	adiw	r28, 0x36	; 54
    4826:	4f ad       	ldd	r20, Y+63	; 0x3f
    4828:	e6 97       	sbiw	r28, 0x36	; 54
    482a:	e7 96       	adiw	r28, 0x37	; 55
    482c:	5f ad       	ldd	r21, Y+63	; 0x3f
    482e:	e7 97       	sbiw	r28, 0x37	; 55
    4830:	e8 96       	adiw	r28, 0x38	; 56
    4832:	6f ad       	ldd	r22, Y+63	; 0x3f
    4834:	e8 97       	sbiw	r28, 0x38	; 56
    4836:	e9 96       	adiw	r28, 0x39	; 57
    4838:	7f ad       	ldd	r23, Y+63	; 0x3f
    483a:	e9 97       	sbiw	r28, 0x39	; 57
    483c:	ce 01       	movw	r24, r28
    483e:	83 53       	subi	r24, 0x33	; 51
    4840:	9f 4f       	sbci	r25, 0xFF	; 255
    4842:	0e 94 1c 1a 	call	0x3438	; 0x3438 <vector_scale>
    4846:	c3 53       	subi	r28, 0x33	; 51
    4848:	df 4f       	sbci	r29, 0xFF	; 255
    484a:	08 81       	ld	r16, Y
    484c:	19 81       	ldd	r17, Y+1	; 0x01
    484e:	2a 81       	ldd	r18, Y+2	; 0x02
    4850:	3b 81       	ldd	r19, Y+3	; 0x03
    4852:	cd 5c       	subi	r28, 0xCD	; 205
    4854:	d0 40       	sbci	r29, 0x00	; 0
    4856:	cf 52       	subi	r28, 0x2F	; 47
    4858:	df 4f       	sbci	r29, 0xFF	; 255
    485a:	48 81       	ld	r20, Y
    485c:	59 81       	ldd	r21, Y+1	; 0x01
    485e:	6a 81       	ldd	r22, Y+2	; 0x02
    4860:	7b 81       	ldd	r23, Y+3	; 0x03
    4862:	c1 5d       	subi	r28, 0xD1	; 209
    4864:	d0 40       	sbci	r29, 0x00	; 0
    4866:	cb 52       	subi	r28, 0x2B	; 43
    4868:	df 4f       	sbci	r29, 0xFF	; 255
    486a:	88 81       	ld	r24, Y
    486c:	99 81       	ldd	r25, Y+1	; 0x01
    486e:	aa 81       	ldd	r26, Y+2	; 0x02
    4870:	bb 81       	ldd	r27, Y+3	; 0x03
    4872:	c5 5d       	subi	r28, 0xD5	; 213
    4874:	d0 40       	sbci	r29, 0x00	; 0
    4876:	0f b6       	in	r0, 0x3f	; 63
    4878:	f8 94       	cli
    487a:	de bf       	out	0x3e, r29	; 62
    487c:	0f be       	out	0x3f, r0	; 63
    487e:	cd bf       	out	0x3d, r28	; 61
    4880:	07 c0       	rjmp	.+14     	; 0x4890 <ahrs_drift_correction+0x7b0>
    4882:	80 e0       	ldi	r24, 0x00	; 0
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	dc 01       	movw	r26, r24
    4888:	ac 01       	movw	r20, r24
    488a:	bd 01       	movw	r22, r26
    488c:	8c 01       	movw	r16, r24
vector3d ahrs_drift_correction(dataexchange_t *data) {
	vector3d corr_vector, acc_g;

	corr_vector.x = 0.0;
	corr_vector.y = 0.0;
	corr_vector.z = 0.0;
    488e:	9d 01       	movw	r18, r26
    4890:	f2 01       	movw	r30, r4
    4892:	00 83       	st	Z, r16

vector3d ahrs_drift_correction(dataexchange_t *data) {
	vector3d corr_vector, acc_g;

	corr_vector.x = 0.0;
	corr_vector.y = 0.0;
    4894:	11 83       	std	Z+1, r17	; 0x01
    4896:	22 83       	std	Z+2, r18	; 0x02
}

vector3d ahrs_drift_correction(dataexchange_t *data) {
	vector3d corr_vector, acc_g;

	corr_vector.x = 0.0;
    4898:	33 83       	std	Z+3, r19	; 0x03
    489a:	44 83       	std	Z+4, r20	; 0x04
		vector3d sum2 = vector_sum(sum1, vector_cross(down, matrix_row_to_vector(&rot_matrix, 3)));

		corr_vector = vector_scale(sum2, corr_strength);
	}

	return corr_vector;
    489c:	55 83       	std	Z+5, r21	; 0x05
    489e:	66 83       	std	Z+6, r22	; 0x06
    48a0:	77 83       	std	Z+7, r23	; 0x07
    48a2:	80 87       	std	Z+8, r24	; 0x08
    48a4:	91 87       	std	Z+9, r25	; 0x09
    48a6:	a2 87       	std	Z+10, r26	; 0x0a
    48a8:	b3 87       	std	Z+11, r27	; 0x0b
    48aa:	c2 01       	movw	r24, r4
    48ac:	c8 52       	subi	r28, 0x28	; 40
    48ae:	df 4f       	sbci	r29, 0xFF	; 255
    48b0:	0f b6       	in	r0, 0x3f	; 63
    48b2:	f8 94       	cli
    48b4:	de bf       	out	0x3e, r29	; 62
}
    48b6:	0f be       	out	0x3f, r0	; 63
    48b8:	cd bf       	out	0x3d, r28	; 61
    48ba:	df 91       	pop	r29
    48bc:	cf 91       	pop	r28
    48be:	1f 91       	pop	r17
    48c0:	0f 91       	pop	r16
    48c2:	ff 90       	pop	r15
    48c4:	ef 90       	pop	r14
    48c6:	df 90       	pop	r13
    48c8:	cf 90       	pop	r12
    48ca:	bf 90       	pop	r11
    48cc:	af 90       	pop	r10
    48ce:	9f 90       	pop	r9
    48d0:	8f 90       	pop	r8
    48d2:	7f 90       	pop	r7
    48d4:	6f 90       	pop	r6
    48d6:	5f 90       	pop	r5
    48d8:	4f 90       	pop	r4
    48da:	08 95       	ret

000048dc <ahrs_orientation>:
    48dc:	4f 92       	push	r4
    48de:	5f 92       	push	r5
    48e0:	6f 92       	push	r6
    48e2:	7f 92       	push	r7
    48e4:	8f 92       	push	r8
    48e6:	9f 92       	push	r9
	(*data).qr.y = initial_q.y;
	(*data).qr.z = initial_q.z;

}

quaternion ahrs_orientation(dataexchange_t *data) {
    48e8:	af 92       	push	r10
    48ea:	bf 92       	push	r11
    48ec:	cf 92       	push	r12
    48ee:	df 92       	push	r13
    48f0:	ef 92       	push	r14
    48f2:	ff 92       	push	r15
    48f4:	0f 93       	push	r16
    48f6:	1f 93       	push	r17
    48f8:	cf 93       	push	r28
    48fa:	df 93       	push	r29
    48fc:	cd b7       	in	r28, 0x3d	; 61
    48fe:	de b7       	in	r29, 0x3e	; 62
    4900:	c4 54       	subi	r28, 0x44	; 68
    4902:	d1 09       	sbc	r29, r1
    4904:	0f b6       	in	r0, 0x3f	; 63
    4906:	f8 94       	cli
    4908:	de bf       	out	0x3e, r29	; 62
    490a:	0f be       	out	0x3f, r0	; 63
    490c:	cd bf       	out	0x3d, r28	; 61
    490e:	2c 01       	movw	r4, r24
    4910:	3b 01       	movw	r6, r22

	//angle component
	vector3d gyr_rad_s = vector_sum(l3g4200d_raw_to_rad(data), ahrs_drift_correction(data));
    4912:	ce 01       	movw	r24, r28
    4914:	4d 96       	adiw	r24, 0x1d	; 29
    4916:	e4 db       	rcall	.-2104   	; 0x40e0 <ahrs_drift_correction>
    4918:	b3 01       	movw	r22, r6
    491a:	ce 01       	movw	r24, r28
    491c:	41 96       	adiw	r24, 0x11	; 17
    491e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <l3g4200d_raw_to_rad>
    4922:	8d b7       	in	r24, 0x3d	; 61
    4924:	9e b7       	in	r25, 0x3e	; 62
    4926:	0c 97       	sbiw	r24, 0x0c	; 12
    4928:	0f b6       	in	r0, 0x3f	; 63
    492a:	f8 94       	cli
    492c:	9e bf       	out	0x3e, r25	; 62
    492e:	0f be       	out	0x3f, r0	; 63
    4930:	8d bf       	out	0x3d, r24	; 61
    4932:	ad b7       	in	r26, 0x3d	; 61
    4934:	be b7       	in	r27, 0x3e	; 62
    4936:	11 96       	adiw	r26, 0x01	; 1
    4938:	8c e0       	ldi	r24, 0x0C	; 12
    493a:	fe 01       	movw	r30, r28
    493c:	7d 96       	adiw	r30, 0x1d	; 29
    493e:	01 90       	ld	r0, Z+
    4940:	0d 92       	st	X+, r0
    4942:	8a 95       	dec	r24
    4944:	e1 f7       	brne	.-8      	; 0x493e <ahrs_orientation+0x62>
    4946:	c9 88       	ldd	r12, Y+17	; 0x11
    4948:	da 88       	ldd	r13, Y+18	; 0x12
    494a:	eb 88       	ldd	r14, Y+19	; 0x13
    494c:	fc 88       	ldd	r15, Y+20	; 0x14
    494e:	0d 89       	ldd	r16, Y+21	; 0x15
    4950:	1e 89       	ldd	r17, Y+22	; 0x16
    4952:	2f 89       	ldd	r18, Y+23	; 0x17
    4954:	38 8d       	ldd	r19, Y+24	; 0x18
    4956:	49 8d       	ldd	r20, Y+25	; 0x19
    4958:	5a 8d       	ldd	r21, Y+26	; 0x1a
    495a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    495c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    495e:	ce 01       	movw	r24, r28
    4960:	89 96       	adiw	r24, 0x29	; 41
    4962:	0e 94 1e 19 	call	0x323c	; 0x323c <vector_sum>
    4966:	e9 a4       	ldd	r14, Y+41	; 0x29

	//vector3d gyr_rad_s = vector_sum(l3g4200d_raw_to_rad(data), ahrs_drift_correction(data));
	double angle = vector_magnitude(gyr_rad_s) * (*data).time_period;
    4968:	fa a4       	ldd	r15, Y+42	; 0x2a
    496a:	0b a5       	ldd	r16, Y+43	; 0x2b
    496c:	1c a5       	ldd	r17, Y+44	; 0x2c
    496e:	2d a5       	ldd	r18, Y+45	; 0x2d
    4970:	3e a5       	ldd	r19, Y+46	; 0x2e
    4972:	4f a5       	ldd	r20, Y+47	; 0x2f
    4974:	58 a9       	ldd	r21, Y+48	; 0x30
    4976:	69 a9       	ldd	r22, Y+49	; 0x31
    4978:	7a a9       	ldd	r23, Y+50	; 0x32
    497a:	8b a9       	ldd	r24, Y+51	; 0x33
    497c:	9c a9       	ldd	r25, Y+52	; 0x34
    497e:	0e 94 b6 18 	call	0x316c	; 0x316c <vector_magnitude>
    4982:	f3 01       	movw	r30, r6
    4984:	22 a1       	ldd	r18, Z+34	; 0x22
    4986:	33 a1       	ldd	r19, Z+35	; 0x23
    4988:	44 a1       	ldd	r20, Z+36	; 0x24
    498a:	55 a1       	ldd	r21, Z+37	; 0x25
    498c:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4990:	4b 01       	movw	r8, r22
    4992:	5c 01       	movw	r10, r24
    4994:	ce 01       	movw	r24, r28

	//axis, normalized
	vector_norm(&gyr_rad_s);
    4996:	89 96       	adiw	r24, 0x29	; 41
    4998:	0e 94 86 19 	call	0x330c	; 0x330c <vector_norm>
    499c:	c9 a4       	ldd	r12, Y+41	; 0x29

	//quaternion from axis/angle
	quaternion q = quaternion_from_axis_angle(gyr_rad_s, angle);
    499e:	da a4       	ldd	r13, Y+42	; 0x2a
    49a0:	eb a4       	ldd	r14, Y+43	; 0x2b
    49a2:	fc a4       	ldd	r15, Y+44	; 0x2c
    49a4:	0d a5       	ldd	r16, Y+45	; 0x2d
    49a6:	1e a5       	ldd	r17, Y+46	; 0x2e
    49a8:	2f a5       	ldd	r18, Y+47	; 0x2f
    49aa:	38 a9       	ldd	r19, Y+48	; 0x30
    49ac:	49 a9       	ldd	r20, Y+49	; 0x31
    49ae:	5a a9       	ldd	r21, Y+50	; 0x32
    49b0:	6b a9       	ldd	r22, Y+51	; 0x33
    49b2:	7c a9       	ldd	r23, Y+52	; 0x34
    49b4:	ce 01       	movw	r24, r28
    49b6:	01 96       	adiw	r24, 0x01	; 1
    49b8:	bd d2       	rcall	.+1402   	; 0x4f34 <quaternion_from_axis_angle>
    49ba:	ce 01       	movw	r24, r28
    49bc:	01 96       	adiw	r24, 0x01	; 1

	//normalize
	quaternion_norm(&q);
    49be:	54 d0       	rcall	.+168    	; 0x4a68 <quaternion_norm>
    49c0:	8d b7       	in	r24, 0x3d	; 61
    49c2:	9e b7       	in	r25, 0x3e	; 62
    49c4:	40 97       	sbiw	r24, 0x10	; 16

	(*data).qr = quaternion_product((*data).qr, q);
    49c6:	0f b6       	in	r0, 0x3f	; 63
    49c8:	f8 94       	cli
    49ca:	9e bf       	out	0x3e, r25	; 62
    49cc:	0f be       	out	0x3f, r0	; 63
    49ce:	8d bf       	out	0x3d, r24	; 61
    49d0:	ad b7       	in	r26, 0x3d	; 61
    49d2:	be b7       	in	r27, 0x3e	; 62
    49d4:	11 96       	adiw	r26, 0x01	; 1
    49d6:	80 e1       	ldi	r24, 0x10	; 16
    49d8:	fe 01       	movw	r30, r28
    49da:	31 96       	adiw	r30, 0x01	; 1
    49dc:	01 90       	ld	r0, Z+
    49de:	0d 92       	st	X+, r0
    49e0:	8a 95       	dec	r24
    49e2:	e1 f7       	brne	.-8      	; 0x49dc <ahrs_orientation+0x100>
    49e4:	f3 01       	movw	r30, r6
    49e6:	80 80       	ld	r8, Z
    49e8:	91 80       	ldd	r9, Z+1	; 0x01
    49ea:	a2 80       	ldd	r10, Z+2	; 0x02
    49ec:	b3 80       	ldd	r11, Z+3	; 0x03
    49ee:	c4 80       	ldd	r12, Z+4	; 0x04
    49f0:	d5 80       	ldd	r13, Z+5	; 0x05
    49f2:	e6 80       	ldd	r14, Z+6	; 0x06
    49f4:	f7 80       	ldd	r15, Z+7	; 0x07
    49f6:	00 85       	ldd	r16, Z+8	; 0x08
    49f8:	11 85       	ldd	r17, Z+9	; 0x09
    49fa:	22 85       	ldd	r18, Z+10	; 0x0a
    49fc:	33 85       	ldd	r19, Z+11	; 0x0b
    49fe:	44 85       	ldd	r20, Z+12	; 0x0c
    4a00:	55 85       	ldd	r21, Z+13	; 0x0d
    4a02:	66 85       	ldd	r22, Z+14	; 0x0e
    4a04:	77 85       	ldd	r23, Z+15	; 0x0f
    4a06:	ce 01       	movw	r24, r28
    4a08:	c5 96       	adiw	r24, 0x35	; 53
    4a0a:	08 d1       	rcall	.+528    	; 0x4c1c <quaternion_product>
    4a0c:	80 e1       	ldi	r24, 0x10	; 16
    4a0e:	fe 01       	movw	r30, r28
    4a10:	f5 96       	adiw	r30, 0x35	; 53
    4a12:	d3 01       	movw	r26, r6
    4a14:	01 90       	ld	r0, Z+
    4a16:	0d 92       	st	X+, r0
    4a18:	8a 95       	dec	r24
    4a1a:	e1 f7       	brne	.-8      	; 0x4a14 <ahrs_orientation+0x138>
    4a1c:	80 e1       	ldi	r24, 0x10	; 16
    4a1e:	fe 01       	movw	r30, r28
    4a20:	31 96       	adiw	r30, 0x01	; 1
    4a22:	d2 01       	movw	r26, r4

	return q;
    4a24:	01 90       	ld	r0, Z+
    4a26:	0d 92       	st	X+, r0
    4a28:	8a 95       	dec	r24
    4a2a:	e1 f7       	brne	.-8      	; 0x4a24 <ahrs_orientation+0x148>
    4a2c:	0f b6       	in	r0, 0x3f	; 63
    4a2e:	f8 94       	cli
    4a30:	de bf       	out	0x3e, r29	; 62
    4a32:	0f be       	out	0x3f, r0	; 63
    4a34:	cd bf       	out	0x3d, r28	; 61
    4a36:	c2 01       	movw	r24, r4
    4a38:	cc 5b       	subi	r28, 0xBC	; 188
    4a3a:	df 4f       	sbci	r29, 0xFF	; 255
    4a3c:	0f b6       	in	r0, 0x3f	; 63
}
    4a3e:	f8 94       	cli
    4a40:	de bf       	out	0x3e, r29	; 62
    4a42:	0f be       	out	0x3f, r0	; 63
    4a44:	cd bf       	out	0x3d, r28	; 61
    4a46:	df 91       	pop	r29
    4a48:	cf 91       	pop	r28
    4a4a:	1f 91       	pop	r17
    4a4c:	0f 91       	pop	r16
    4a4e:	ff 90       	pop	r15
    4a50:	ef 90       	pop	r14
    4a52:	df 90       	pop	r13
    4a54:	cf 90       	pop	r12
    4a56:	bf 90       	pop	r11
    4a58:	af 90       	pop	r10
    4a5a:	9f 90       	pop	r9
    4a5c:	8f 90       	pop	r8
    4a5e:	7f 90       	pop	r7
    4a60:	6f 90       	pop	r6
    4a62:	5f 90       	pop	r5
    4a64:	4f 90       	pop	r4
    4a66:	08 95       	ret

00004a68 <quaternion_norm>:
    4a68:	4f 92       	push	r4
    4a6a:	5f 92       	push	r5
    4a6c:	6f 92       	push	r6
    4a6e:	7f 92       	push	r7
 */

#include "ahrs/quaternion.h"
#include <math.h>

void quaternion_norm(quaternion *q) {
    4a70:	8f 92       	push	r8
    4a72:	9f 92       	push	r9
    4a74:	af 92       	push	r10
    4a76:	bf 92       	push	r11
    4a78:	cf 92       	push	r12
    4a7a:	df 92       	push	r13
    4a7c:	ef 92       	push	r14
    4a7e:	ff 92       	push	r15
    4a80:	0f 93       	push	r16
    4a82:	1f 93       	push	r17
    4a84:	cf 93       	push	r28
    4a86:	df 93       	push	r29
    4a88:	cd b7       	in	r28, 0x3d	; 61
    4a8a:	de b7       	in	r29, 0x3e	; 62
    4a8c:	28 97       	sbiw	r28, 0x08	; 8
    4a8e:	0f b6       	in	r0, 0x3f	; 63
    4a90:	f8 94       	cli
    4a92:	de bf       	out	0x3e, r29	; 62
    4a94:	0f be       	out	0x3f, r0	; 63
    4a96:	cd bf       	out	0x3d, r28	; 61
    4a98:	8c 01       	movw	r16, r24
	double res = ((*q).w * (*q).w) + ((*q).x * (*q).x) + ((*q).y * (*q).y) + ((*q).z * (*q).z);
    4a9a:	dc 01       	movw	r26, r24
    4a9c:	4d 90       	ld	r4, X+
    4a9e:	5d 90       	ld	r5, X+
    4aa0:	6d 90       	ld	r6, X+
    4aa2:	7c 90       	ld	r7, X
    4aa4:	13 97       	sbiw	r26, 0x03	; 3
    4aa6:	14 96       	adiw	r26, 0x04	; 4
    4aa8:	8d 90       	ld	r8, X+
    4aaa:	9d 90       	ld	r9, X+
    4aac:	ad 90       	ld	r10, X+
    4aae:	bc 90       	ld	r11, X
    4ab0:	17 97       	sbiw	r26, 0x07	; 7
    4ab2:	18 96       	adiw	r26, 0x08	; 8
    4ab4:	8d 91       	ld	r24, X+
    4ab6:	9d 91       	ld	r25, X+
    4ab8:	0d 90       	ld	r0, X+
    4aba:	bc 91       	ld	r27, X
    4abc:	a0 2d       	mov	r26, r0
    4abe:	89 83       	std	Y+1, r24	; 0x01
    4ac0:	9a 83       	std	Y+2, r25	; 0x02
    4ac2:	ab 83       	std	Y+3, r26	; 0x03
    4ac4:	bc 83       	std	Y+4, r27	; 0x04
    4ac6:	d8 01       	movw	r26, r16
    4ac8:	1c 96       	adiw	r26, 0x0c	; 12
    4aca:	8d 91       	ld	r24, X+
    4acc:	9d 91       	ld	r25, X+
    4ace:	0d 90       	ld	r0, X+
    4ad0:	bc 91       	ld	r27, X
    4ad2:	a0 2d       	mov	r26, r0
    4ad4:	8d 83       	std	Y+5, r24	; 0x05
    4ad6:	9e 83       	std	Y+6, r25	; 0x06
    4ad8:	af 83       	std	Y+7, r26	; 0x07
    4ada:	b8 87       	std	Y+8, r27	; 0x08
    4adc:	a3 01       	movw	r20, r6
    4ade:	92 01       	movw	r18, r4
    4ae0:	c3 01       	movw	r24, r6
    4ae2:	b2 01       	movw	r22, r4
    4ae4:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4ae8:	6b 01       	movw	r12, r22
    4aea:	7c 01       	movw	r14, r24
    4aec:	a5 01       	movw	r20, r10
    4aee:	94 01       	movw	r18, r8
    4af0:	c5 01       	movw	r24, r10
    4af2:	b4 01       	movw	r22, r8
    4af4:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4af8:	9b 01       	movw	r18, r22
    4afa:	ac 01       	movw	r20, r24
    4afc:	c7 01       	movw	r24, r14
    4afe:	b6 01       	movw	r22, r12
    4b00:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    4b04:	6b 01       	movw	r12, r22
    4b06:	7c 01       	movw	r14, r24
    4b08:	29 81       	ldd	r18, Y+1	; 0x01
    4b0a:	3a 81       	ldd	r19, Y+2	; 0x02
    4b0c:	4b 81       	ldd	r20, Y+3	; 0x03
    4b0e:	5c 81       	ldd	r21, Y+4	; 0x04
    4b10:	ca 01       	movw	r24, r20
    4b12:	b9 01       	movw	r22, r18
    4b14:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4b18:	9b 01       	movw	r18, r22
    4b1a:	ac 01       	movw	r20, r24
    4b1c:	c7 01       	movw	r24, r14
    4b1e:	b6 01       	movw	r22, r12
    4b20:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    4b24:	6b 01       	movw	r12, r22
    4b26:	7c 01       	movw	r14, r24
    4b28:	2d 81       	ldd	r18, Y+5	; 0x05
    4b2a:	3e 81       	ldd	r19, Y+6	; 0x06
    4b2c:	4f 81       	ldd	r20, Y+7	; 0x07
    4b2e:	58 85       	ldd	r21, Y+8	; 0x08
    4b30:	ca 01       	movw	r24, r20
    4b32:	b9 01       	movw	r22, r18
    4b34:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4b38:	9b 01       	movw	r18, r22
    4b3a:	ac 01       	movw	r20, r24
    4b3c:	c7 01       	movw	r24, r14
    4b3e:	b6 01       	movw	r22, r12
    4b40:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    4b44:	6b 01       	movw	r12, r22
    4b46:	7c 01       	movw	r14, r24
	if((res > 1.001) || (res < 0.999)) //only normalize if it needs to be done
    4b48:	25 ec       	ldi	r18, 0xC5	; 197
    4b4a:	30 e2       	ldi	r19, 0x20	; 32
    4b4c:	40 e8       	ldi	r20, 0x80	; 128
    4b4e:	5f e3       	ldi	r21, 0x3F	; 63
    4b50:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__gesf2>
    4b54:	18 16       	cp	r1, r24
    4b56:	54 f0       	brlt	.+20     	; 0x4b6c <quaternion_norm+0x104>
    4b58:	27 e7       	ldi	r18, 0x77	; 119
    4b5a:	3e eb       	ldi	r19, 0xBE	; 190
    4b5c:	4f e7       	ldi	r20, 0x7F	; 127
    4b5e:	5f e3       	ldi	r21, 0x3F	; 63
    4b60:	c7 01       	movw	r24, r14
    4b62:	b6 01       	movw	r22, r12
    4b64:	0e 94 de 32 	call	0x65bc	; 0x65bc <__cmpsf2>
    4b68:	87 ff       	sbrs	r24, 7
    4b6a:	41 c0       	rjmp	.+130    	; 0x4bee <quaternion_norm+0x186>
	{
		double mag = sqrt(res);
    4b6c:	c7 01       	movw	r24, r14
    4b6e:	b6 01       	movw	r22, r12
    4b70:	0e 94 d5 34 	call	0x69aa	; 0x69aa <sqrt>
    4b74:	6b 01       	movw	r12, r22
    4b76:	7c 01       	movw	r14, r24
		if(mag == 0) //avoid divide b_y _zero
    4b78:	20 e0       	ldi	r18, 0x00	; 0
    4b7a:	30 e0       	ldi	r19, 0x00	; 0
    4b7c:	a9 01       	movw	r20, r18
    4b7e:	0e 94 de 32 	call	0x65bc	; 0x65bc <__cmpsf2>
    4b82:	88 23       	and	r24, r24
    4b84:	a1 f1       	breq	.+104    	; 0x4bee <quaternion_norm+0x186>
			return;
		(*q).w = (*q).w/mag;
    4b86:	a7 01       	movw	r20, r14
    4b88:	96 01       	movw	r18, r12
    4b8a:	c3 01       	movw	r24, r6
    4b8c:	b2 01       	movw	r22, r4
    4b8e:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    4b92:	f8 01       	movw	r30, r16
    4b94:	60 83       	st	Z, r22
    4b96:	71 83       	std	Z+1, r23	; 0x01
    4b98:	82 83       	std	Z+2, r24	; 0x02
    4b9a:	93 83       	std	Z+3, r25	; 0x03
		(*q).x = (*q).x/mag;
    4b9c:	a7 01       	movw	r20, r14
    4b9e:	96 01       	movw	r18, r12
    4ba0:	c5 01       	movw	r24, r10
    4ba2:	b4 01       	movw	r22, r8
    4ba4:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    4ba8:	d8 01       	movw	r26, r16
    4baa:	14 96       	adiw	r26, 0x04	; 4
    4bac:	6d 93       	st	X+, r22
    4bae:	7d 93       	st	X+, r23
    4bb0:	8d 93       	st	X+, r24
    4bb2:	9c 93       	st	X, r25
    4bb4:	17 97       	sbiw	r26, 0x07	; 7
		(*q).y = (*q).y/mag;
    4bb6:	a7 01       	movw	r20, r14
    4bb8:	96 01       	movw	r18, r12
    4bba:	69 81       	ldd	r22, Y+1	; 0x01
    4bbc:	7a 81       	ldd	r23, Y+2	; 0x02
    4bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc2:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    4bc6:	f8 01       	movw	r30, r16
    4bc8:	60 87       	std	Z+8, r22	; 0x08
    4bca:	71 87       	std	Z+9, r23	; 0x09
    4bcc:	82 87       	std	Z+10, r24	; 0x0a
    4bce:	93 87       	std	Z+11, r25	; 0x0b
		(*q).z = (*q).z/mag;
    4bd0:	a7 01       	movw	r20, r14
    4bd2:	96 01       	movw	r18, r12
    4bd4:	6d 81       	ldd	r22, Y+5	; 0x05
    4bd6:	7e 81       	ldd	r23, Y+6	; 0x06
    4bd8:	8f 81       	ldd	r24, Y+7	; 0x07
    4bda:	98 85       	ldd	r25, Y+8	; 0x08
    4bdc:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    4be0:	d8 01       	movw	r26, r16
    4be2:	1c 96       	adiw	r26, 0x0c	; 12
    4be4:	6d 93       	st	X+, r22
    4be6:	7d 93       	st	X+, r23
    4be8:	8d 93       	st	X+, r24
    4bea:	9c 93       	st	X, r25
    4bec:	1f 97       	sbiw	r26, 0x0f	; 15
	}
}
    4bee:	28 96       	adiw	r28, 0x08	; 8
    4bf0:	0f b6       	in	r0, 0x3f	; 63
    4bf2:	f8 94       	cli
    4bf4:	de bf       	out	0x3e, r29	; 62
    4bf6:	0f be       	out	0x3f, r0	; 63
    4bf8:	cd bf       	out	0x3d, r28	; 61
    4bfa:	df 91       	pop	r29
    4bfc:	cf 91       	pop	r28
    4bfe:	1f 91       	pop	r17
    4c00:	0f 91       	pop	r16
    4c02:	ff 90       	pop	r15
    4c04:	ef 90       	pop	r14
    4c06:	df 90       	pop	r13
    4c08:	cf 90       	pop	r12
    4c0a:	bf 90       	pop	r11
    4c0c:	af 90       	pop	r10
    4c0e:	9f 90       	pop	r9
    4c10:	8f 90       	pop	r8
    4c12:	7f 90       	pop	r7
    4c14:	6f 90       	pop	r6
    4c16:	5f 90       	pop	r5
    4c18:	4f 90       	pop	r4
    4c1a:	08 95       	ret

00004c1c <quaternion_product>:

quaternion quaternion_product(quaternion q_a, quaternion q_b) {
    4c1c:	2f 92       	push	r2
    4c1e:	3f 92       	push	r3
    4c20:	4f 92       	push	r4
    4c22:	5f 92       	push	r5
    4c24:	6f 92       	push	r6
    4c26:	7f 92       	push	r7
    4c28:	8f 92       	push	r8
    4c2a:	9f 92       	push	r9
    4c2c:	af 92       	push	r10
    4c2e:	bf 92       	push	r11
    4c30:	cf 92       	push	r12
    4c32:	df 92       	push	r13
    4c34:	ef 92       	push	r14
    4c36:	ff 92       	push	r15
    4c38:	0f 93       	push	r16
    4c3a:	1f 93       	push	r17
    4c3c:	cf 93       	push	r28
    4c3e:	df 93       	push	r29
    4c40:	cd b7       	in	r28, 0x3d	; 61
    4c42:	de b7       	in	r29, 0x3e	; 62
    4c44:	a8 97       	sbiw	r28, 0x28	; 40
    4c46:	0f b6       	in	r0, 0x3f	; 63
    4c48:	f8 94       	cli
    4c4a:	de bf       	out	0x3e, r29	; 62
    4c4c:	0f be       	out	0x3f, r0	; 63
    4c4e:	cd bf       	out	0x3d, r28	; 61
    4c50:	1c 01       	movw	r2, r24
    4c52:	89 82       	std	Y+1, r8	; 0x01
    4c54:	9a 82       	std	Y+2, r9	; 0x02
    4c56:	ab 82       	std	Y+3, r10	; 0x03
    4c58:	bc 82       	std	Y+4, r11	; 0x04
    4c5a:	cd 82       	std	Y+5, r12	; 0x05
    4c5c:	de 82       	std	Y+6, r13	; 0x06
    4c5e:	ef 82       	std	Y+7, r14	; 0x07
    4c60:	f8 86       	std	Y+8, r15	; 0x08
    4c62:	09 87       	std	Y+9, r16	; 0x09
    4c64:	1a 87       	std	Y+10, r17	; 0x0a
    4c66:	2b 87       	std	Y+11, r18	; 0x0b
    4c68:	3c 87       	std	Y+12, r19	; 0x0c
    4c6a:	4d 87       	std	Y+13, r20	; 0x0d
    4c6c:	5e 87       	std	Y+14, r21	; 0x0e
    4c6e:	6f 87       	std	Y+15, r22	; 0x0f
    4c70:	78 8b       	std	Y+16, r23	; 0x10
    4c72:	c9 80       	ldd	r12, Y+1	; 0x01
    4c74:	da 80       	ldd	r13, Y+2	; 0x02
    4c76:	eb 80       	ldd	r14, Y+3	; 0x03
    4c78:	fc 80       	ldd	r15, Y+4	; 0x04
    4c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    4c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    4c7e:	af 81       	ldd	r26, Y+7	; 0x07
    4c80:	b8 85       	ldd	r27, Y+8	; 0x08
    4c82:	89 a3       	std	Y+33, r24	; 0x21
    4c84:	9a a3       	std	Y+34, r25	; 0x22
    4c86:	ab a3       	std	Y+35, r26	; 0x23
    4c88:	bc a3       	std	Y+36, r27	; 0x24
    4c8a:	89 85       	ldd	r24, Y+9	; 0x09
    4c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c8e:	ab 85       	ldd	r26, Y+11	; 0x0b
    4c90:	bc 85       	ldd	r27, Y+12	; 0x0c
    4c92:	8d 8f       	std	Y+29, r24	; 0x1d
    4c94:	9e 8f       	std	Y+30, r25	; 0x1e
    4c96:	af 8f       	std	Y+31, r26	; 0x1f
    4c98:	b8 a3       	std	Y+32, r27	; 0x20
    4c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c9e:	af 85       	ldd	r26, Y+15	; 0x0f
    4ca0:	b8 89       	ldd	r27, Y+16	; 0x10
    4ca2:	89 8f       	std	Y+25, r24	; 0x19
    4ca4:	9a 8f       	std	Y+26, r25	; 0x1a
    4ca6:	ab 8f       	std	Y+27, r26	; 0x1b
    4ca8:	bc 8f       	std	Y+28, r27	; 0x1c
    4caa:	21 96       	adiw	r28, 0x01	; 1
    4cac:	8c ad       	ldd	r24, Y+60	; 0x3c
    4cae:	9d ad       	ldd	r25, Y+61	; 0x3d
    4cb0:	ae ad       	ldd	r26, Y+62	; 0x3e
    4cb2:	bf ad       	ldd	r27, Y+63	; 0x3f
    4cb4:	21 97       	sbiw	r28, 0x01	; 1
    4cb6:	8d 8b       	std	Y+21, r24	; 0x15
    4cb8:	9e 8b       	std	Y+22, r25	; 0x16
    4cba:	af 8b       	std	Y+23, r26	; 0x17
    4cbc:	b8 8f       	std	Y+24, r27	; 0x18
    4cbe:	25 96       	adiw	r28, 0x05	; 5
    4cc0:	8c ad       	ldd	r24, Y+60	; 0x3c
    4cc2:	9d ad       	ldd	r25, Y+61	; 0x3d
    4cc4:	ae ad       	ldd	r26, Y+62	; 0x3e
    4cc6:	bf ad       	ldd	r27, Y+63	; 0x3f
    4cc8:	25 97       	sbiw	r28, 0x05	; 5
    4cca:	89 8b       	std	Y+17, r24	; 0x11
    4ccc:	9a 8b       	std	Y+18, r25	; 0x12
    4cce:	ab 8b       	std	Y+19, r26	; 0x13
    4cd0:	bc 8b       	std	Y+20, r27	; 0x14
    4cd2:	29 96       	adiw	r28, 0x09	; 9
    4cd4:	8c ad       	ldd	r24, Y+60	; 0x3c
    4cd6:	9d ad       	ldd	r25, Y+61	; 0x3d
    4cd8:	ae ad       	ldd	r26, Y+62	; 0x3e
    4cda:	bf ad       	ldd	r27, Y+63	; 0x3f
    4cdc:	29 97       	sbiw	r28, 0x09	; 9
    4cde:	8d a3       	std	Y+37, r24	; 0x25
    4ce0:	9e a3       	std	Y+38, r25	; 0x26
    4ce2:	af a3       	std	Y+39, r26	; 0x27
    4ce4:	b8 a7       	std	Y+40, r27	; 0x28
    4ce6:	2d 96       	adiw	r28, 0x0d	; 13
    4ce8:	8c ac       	ldd	r8, Y+60	; 0x3c
    4cea:	9d ac       	ldd	r9, Y+61	; 0x3d
    4cec:	ae ac       	ldd	r10, Y+62	; 0x3e
    4cee:	bf ac       	ldd	r11, Y+63	; 0x3f
    4cf0:	2d 97       	sbiw	r28, 0x0d	; 13
	quaternion ret;
	ret.w = ((q_a.w*q_b.w) - (q_a.x*q_b.x) - (q_a.y*q_b.y) - (q_a.z*q_b.z));
    4cf2:	2d 89       	ldd	r18, Y+21	; 0x15
    4cf4:	3e 89       	ldd	r19, Y+22	; 0x16
    4cf6:	4f 89       	ldd	r20, Y+23	; 0x17
    4cf8:	58 8d       	ldd	r21, Y+24	; 0x18
    4cfa:	c7 01       	movw	r24, r14
    4cfc:	b6 01       	movw	r22, r12
    4cfe:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4d02:	2b 01       	movw	r4, r22
    4d04:	3c 01       	movw	r6, r24
    4d06:	29 89       	ldd	r18, Y+17	; 0x11
    4d08:	3a 89       	ldd	r19, Y+18	; 0x12
    4d0a:	4b 89       	ldd	r20, Y+19	; 0x13
    4d0c:	5c 89       	ldd	r21, Y+20	; 0x14
    4d0e:	69 a1       	ldd	r22, Y+33	; 0x21
    4d10:	7a a1       	ldd	r23, Y+34	; 0x22
    4d12:	8b a1       	ldd	r24, Y+35	; 0x23
    4d14:	9c a1       	ldd	r25, Y+36	; 0x24
    4d16:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4d1a:	9b 01       	movw	r18, r22
    4d1c:	ac 01       	movw	r20, r24
    4d1e:	c3 01       	movw	r24, r6
    4d20:	b2 01       	movw	r22, r4
    4d22:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    4d26:	2b 01       	movw	r4, r22
    4d28:	3c 01       	movw	r6, r24
    4d2a:	2d a1       	ldd	r18, Y+37	; 0x25
    4d2c:	3e a1       	ldd	r19, Y+38	; 0x26
    4d2e:	4f a1       	ldd	r20, Y+39	; 0x27
    4d30:	58 a5       	ldd	r21, Y+40	; 0x28
    4d32:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4d34:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4d36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d38:	98 a1       	ldd	r25, Y+32	; 0x20
    4d3a:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4d3e:	9b 01       	movw	r18, r22
    4d40:	ac 01       	movw	r20, r24
    4d42:	c3 01       	movw	r24, r6
    4d44:	b2 01       	movw	r22, r4
    4d46:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    4d4a:	2b 01       	movw	r4, r22
    4d4c:	3c 01       	movw	r6, r24
    4d4e:	a5 01       	movw	r20, r10
    4d50:	94 01       	movw	r18, r8
    4d52:	69 8d       	ldd	r22, Y+25	; 0x19
    4d54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d5a:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4d5e:	9b 01       	movw	r18, r22
    4d60:	ac 01       	movw	r20, r24
    4d62:	c3 01       	movw	r24, r6
    4d64:	b2 01       	movw	r22, r4
    4d66:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
	ret.x = ((q_a.w*q_b.x) + (q_a.x*q_b.w) + (q_a.y*q_b.z) - (q_a.z*q_b.y));
	ret.y = ((q_a.w*q_b.y) - (q_a.x*q_b.z) + (q_a.y*q_b.w) + (q_a.z*q_b.x));
	ret.z = ((q_a.w*q_b.z) + (q_a.x*q_b.y) - (q_a.y*q_b.x) + (q_a.z*q_b.w));
	return ret;
    4d6a:	d1 01       	movw	r26, r2
    4d6c:	6d 93       	st	X+, r22
    4d6e:	7d 93       	st	X+, r23
    4d70:	8d 93       	st	X+, r24
    4d72:	9c 93       	st	X, r25
    4d74:	13 97       	sbiw	r26, 0x03	; 3
}

quaternion quaternion_product(quaternion q_a, quaternion q_b) {
	quaternion ret;
	ret.w = ((q_a.w*q_b.w) - (q_a.x*q_b.x) - (q_a.y*q_b.y) - (q_a.z*q_b.z));
	ret.x = ((q_a.w*q_b.x) + (q_a.x*q_b.w) + (q_a.y*q_b.z) - (q_a.z*q_b.y));
    4d76:	29 89       	ldd	r18, Y+17	; 0x11
    4d78:	3a 89       	ldd	r19, Y+18	; 0x12
    4d7a:	4b 89       	ldd	r20, Y+19	; 0x13
    4d7c:	5c 89       	ldd	r21, Y+20	; 0x14
    4d7e:	c7 01       	movw	r24, r14
    4d80:	b6 01       	movw	r22, r12
    4d82:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4d86:	2b 01       	movw	r4, r22
    4d88:	3c 01       	movw	r6, r24
    4d8a:	2d 89       	ldd	r18, Y+21	; 0x15
    4d8c:	3e 89       	ldd	r19, Y+22	; 0x16
    4d8e:	4f 89       	ldd	r20, Y+23	; 0x17
    4d90:	58 8d       	ldd	r21, Y+24	; 0x18
    4d92:	69 a1       	ldd	r22, Y+33	; 0x21
    4d94:	7a a1       	ldd	r23, Y+34	; 0x22
    4d96:	8b a1       	ldd	r24, Y+35	; 0x23
    4d98:	9c a1       	ldd	r25, Y+36	; 0x24
    4d9a:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4d9e:	9b 01       	movw	r18, r22
    4da0:	ac 01       	movw	r20, r24
    4da2:	c3 01       	movw	r24, r6
    4da4:	b2 01       	movw	r22, r4
    4da6:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    4daa:	2b 01       	movw	r4, r22
    4dac:	3c 01       	movw	r6, r24
    4dae:	a5 01       	movw	r20, r10
    4db0:	94 01       	movw	r18, r8
    4db2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4db4:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4db6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4db8:	98 a1       	ldd	r25, Y+32	; 0x20
    4dba:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4dbe:	9b 01       	movw	r18, r22
    4dc0:	ac 01       	movw	r20, r24
    4dc2:	c3 01       	movw	r24, r6
    4dc4:	b2 01       	movw	r22, r4
    4dc6:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    4dca:	2b 01       	movw	r4, r22
    4dcc:	3c 01       	movw	r6, r24
    4dce:	2d a1       	ldd	r18, Y+37	; 0x25
    4dd0:	3e a1       	ldd	r19, Y+38	; 0x26
    4dd2:	4f a1       	ldd	r20, Y+39	; 0x27
    4dd4:	58 a5       	ldd	r21, Y+40	; 0x28
    4dd6:	69 8d       	ldd	r22, Y+25	; 0x19
    4dd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4dda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ddc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4dde:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4de2:	9b 01       	movw	r18, r22
    4de4:	ac 01       	movw	r20, r24
    4de6:	c3 01       	movw	r24, r6
    4de8:	b2 01       	movw	r22, r4
    4dea:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
	ret.y = ((q_a.w*q_b.y) - (q_a.x*q_b.z) + (q_a.y*q_b.w) + (q_a.z*q_b.x));
	ret.z = ((q_a.w*q_b.z) + (q_a.x*q_b.y) - (q_a.y*q_b.x) + (q_a.z*q_b.w));
	return ret;
    4dee:	f1 01       	movw	r30, r2
    4df0:	64 83       	std	Z+4, r22	; 0x04
    4df2:	75 83       	std	Z+5, r23	; 0x05
    4df4:	86 83       	std	Z+6, r24	; 0x06
    4df6:	97 83       	std	Z+7, r25	; 0x07

quaternion quaternion_product(quaternion q_a, quaternion q_b) {
	quaternion ret;
	ret.w = ((q_a.w*q_b.w) - (q_a.x*q_b.x) - (q_a.y*q_b.y) - (q_a.z*q_b.z));
	ret.x = ((q_a.w*q_b.x) + (q_a.x*q_b.w) + (q_a.y*q_b.z) - (q_a.z*q_b.y));
	ret.y = ((q_a.w*q_b.y) - (q_a.x*q_b.z) + (q_a.y*q_b.w) + (q_a.z*q_b.x));
    4df8:	2d a1       	ldd	r18, Y+37	; 0x25
    4dfa:	3e a1       	ldd	r19, Y+38	; 0x26
    4dfc:	4f a1       	ldd	r20, Y+39	; 0x27
    4dfe:	58 a5       	ldd	r21, Y+40	; 0x28
    4e00:	c7 01       	movw	r24, r14
    4e02:	b6 01       	movw	r22, r12
    4e04:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4e08:	2b 01       	movw	r4, r22
    4e0a:	3c 01       	movw	r6, r24
    4e0c:	a5 01       	movw	r20, r10
    4e0e:	94 01       	movw	r18, r8
    4e10:	69 a1       	ldd	r22, Y+33	; 0x21
    4e12:	7a a1       	ldd	r23, Y+34	; 0x22
    4e14:	8b a1       	ldd	r24, Y+35	; 0x23
    4e16:	9c a1       	ldd	r25, Y+36	; 0x24
    4e18:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4e1c:	9b 01       	movw	r18, r22
    4e1e:	ac 01       	movw	r20, r24
    4e20:	c3 01       	movw	r24, r6
    4e22:	b2 01       	movw	r22, r4
    4e24:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    4e28:	2b 01       	movw	r4, r22
    4e2a:	3c 01       	movw	r6, r24
    4e2c:	2d 89       	ldd	r18, Y+21	; 0x15
    4e2e:	3e 89       	ldd	r19, Y+22	; 0x16
    4e30:	4f 89       	ldd	r20, Y+23	; 0x17
    4e32:	58 8d       	ldd	r21, Y+24	; 0x18
    4e34:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4e36:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4e38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4e3a:	98 a1       	ldd	r25, Y+32	; 0x20
    4e3c:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4e40:	9b 01       	movw	r18, r22
    4e42:	ac 01       	movw	r20, r24
    4e44:	c3 01       	movw	r24, r6
    4e46:	b2 01       	movw	r22, r4
    4e48:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    4e4c:	2b 01       	movw	r4, r22
    4e4e:	3c 01       	movw	r6, r24
    4e50:	29 89       	ldd	r18, Y+17	; 0x11
    4e52:	3a 89       	ldd	r19, Y+18	; 0x12
    4e54:	4b 89       	ldd	r20, Y+19	; 0x13
    4e56:	5c 89       	ldd	r21, Y+20	; 0x14
    4e58:	69 8d       	ldd	r22, Y+25	; 0x19
    4e5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e60:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4e64:	9b 01       	movw	r18, r22
    4e66:	ac 01       	movw	r20, r24
    4e68:	c3 01       	movw	r24, r6
    4e6a:	b2 01       	movw	r22, r4
    4e6c:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
	ret.z = ((q_a.w*q_b.z) + (q_a.x*q_b.y) - (q_a.y*q_b.x) + (q_a.z*q_b.w));
	return ret;
    4e70:	d1 01       	movw	r26, r2
    4e72:	18 96       	adiw	r26, 0x08	; 8
    4e74:	6d 93       	st	X+, r22
    4e76:	7d 93       	st	X+, r23
    4e78:	8d 93       	st	X+, r24
    4e7a:	9c 93       	st	X, r25
    4e7c:	1b 97       	sbiw	r26, 0x0b	; 11
quaternion quaternion_product(quaternion q_a, quaternion q_b) {
	quaternion ret;
	ret.w = ((q_a.w*q_b.w) - (q_a.x*q_b.x) - (q_a.y*q_b.y) - (q_a.z*q_b.z));
	ret.x = ((q_a.w*q_b.x) + (q_a.x*q_b.w) + (q_a.y*q_b.z) - (q_a.z*q_b.y));
	ret.y = ((q_a.w*q_b.y) - (q_a.x*q_b.z) + (q_a.y*q_b.w) + (q_a.z*q_b.x));
	ret.z = ((q_a.w*q_b.z) + (q_a.x*q_b.y) - (q_a.y*q_b.x) + (q_a.z*q_b.w));
    4e7e:	a5 01       	movw	r20, r10
    4e80:	94 01       	movw	r18, r8
    4e82:	c7 01       	movw	r24, r14
    4e84:	b6 01       	movw	r22, r12
    4e86:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4e8a:	6b 01       	movw	r12, r22
    4e8c:	7c 01       	movw	r14, r24
    4e8e:	2d a1       	ldd	r18, Y+37	; 0x25
    4e90:	3e a1       	ldd	r19, Y+38	; 0x26
    4e92:	4f a1       	ldd	r20, Y+39	; 0x27
    4e94:	58 a5       	ldd	r21, Y+40	; 0x28
    4e96:	69 a1       	ldd	r22, Y+33	; 0x21
    4e98:	7a a1       	ldd	r23, Y+34	; 0x22
    4e9a:	8b a1       	ldd	r24, Y+35	; 0x23
    4e9c:	9c a1       	ldd	r25, Y+36	; 0x24
    4e9e:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4ea2:	9b 01       	movw	r18, r22
    4ea4:	ac 01       	movw	r20, r24
    4ea6:	c7 01       	movw	r24, r14
    4ea8:	b6 01       	movw	r22, r12
    4eaa:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    4eae:	6b 01       	movw	r12, r22
    4eb0:	7c 01       	movw	r14, r24
    4eb2:	29 89       	ldd	r18, Y+17	; 0x11
    4eb4:	3a 89       	ldd	r19, Y+18	; 0x12
    4eb6:	4b 89       	ldd	r20, Y+19	; 0x13
    4eb8:	5c 89       	ldd	r21, Y+20	; 0x14
    4eba:	6d 8d       	ldd	r22, Y+29	; 0x1d
    4ebc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    4ebe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ec0:	98 a1       	ldd	r25, Y+32	; 0x20
    4ec2:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4ec6:	9b 01       	movw	r18, r22
    4ec8:	ac 01       	movw	r20, r24
    4eca:	c7 01       	movw	r24, r14
    4ecc:	b6 01       	movw	r22, r12
    4ece:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    4ed2:	6b 01       	movw	r12, r22
    4ed4:	7c 01       	movw	r14, r24
    4ed6:	2d 89       	ldd	r18, Y+21	; 0x15
    4ed8:	3e 89       	ldd	r19, Y+22	; 0x16
    4eda:	4f 89       	ldd	r20, Y+23	; 0x17
    4edc:	58 8d       	ldd	r21, Y+24	; 0x18
    4ede:	69 8d       	ldd	r22, Y+25	; 0x19
    4ee0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ee2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ee4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ee6:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4eea:	9b 01       	movw	r18, r22
    4eec:	ac 01       	movw	r20, r24
    4eee:	c7 01       	movw	r24, r14
    4ef0:	b6 01       	movw	r22, r12
    4ef2:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
	return ret;
    4ef6:	f1 01       	movw	r30, r2
    4ef8:	64 87       	std	Z+12, r22	; 0x0c
    4efa:	75 87       	std	Z+13, r23	; 0x0d
    4efc:	86 87       	std	Z+14, r24	; 0x0e
    4efe:	97 87       	std	Z+15, r25	; 0x0f
}
    4f00:	c1 01       	movw	r24, r2
    4f02:	a8 96       	adiw	r28, 0x28	; 40
    4f04:	0f b6       	in	r0, 0x3f	; 63
    4f06:	f8 94       	cli
    4f08:	de bf       	out	0x3e, r29	; 62
    4f0a:	0f be       	out	0x3f, r0	; 63
    4f0c:	cd bf       	out	0x3d, r28	; 61
    4f0e:	df 91       	pop	r29
    4f10:	cf 91       	pop	r28
    4f12:	1f 91       	pop	r17
    4f14:	0f 91       	pop	r16
    4f16:	ff 90       	pop	r15
    4f18:	ef 90       	pop	r14
    4f1a:	df 90       	pop	r13
    4f1c:	cf 90       	pop	r12
    4f1e:	bf 90       	pop	r11
    4f20:	af 90       	pop	r10
    4f22:	9f 90       	pop	r9
    4f24:	8f 90       	pop	r8
    4f26:	7f 90       	pop	r7
    4f28:	6f 90       	pop	r6
    4f2a:	5f 90       	pop	r5
    4f2c:	4f 90       	pop	r4
    4f2e:	3f 90       	pop	r3
    4f30:	2f 90       	pop	r2
    4f32:	08 95       	ret

00004f34 <quaternion_from_axis_angle>:

quaternion quaternion_from_axis_angle(vector3d axis, double angle) {
    4f34:	2f 92       	push	r2
    4f36:	3f 92       	push	r3
    4f38:	4f 92       	push	r4
    4f3a:	5f 92       	push	r5
    4f3c:	6f 92       	push	r6
    4f3e:	7f 92       	push	r7
    4f40:	8f 92       	push	r8
    4f42:	9f 92       	push	r9
    4f44:	af 92       	push	r10
    4f46:	bf 92       	push	r11
    4f48:	cf 92       	push	r12
    4f4a:	df 92       	push	r13
    4f4c:	ef 92       	push	r14
    4f4e:	ff 92       	push	r15
    4f50:	0f 93       	push	r16
    4f52:	1f 93       	push	r17
    4f54:	cf 93       	push	r28
    4f56:	df 93       	push	r29
    4f58:	cd b7       	in	r28, 0x3d	; 61
    4f5a:	de b7       	in	r29, 0x3e	; 62
    4f5c:	60 97       	sbiw	r28, 0x10	; 16
    4f5e:	0f b6       	in	r0, 0x3f	; 63
    4f60:	f8 94       	cli
    4f62:	de bf       	out	0x3e, r29	; 62
    4f64:	0f be       	out	0x3f, r0	; 63
    4f66:	cd bf       	out	0x3d, r28	; 61
    4f68:	1c 01       	movw	r2, r24
    4f6a:	c9 82       	std	Y+1, r12	; 0x01
    4f6c:	da 82       	std	Y+2, r13	; 0x02
    4f6e:	eb 82       	std	Y+3, r14	; 0x03
    4f70:	fc 82       	std	Y+4, r15	; 0x04
    4f72:	0d 83       	std	Y+5, r16	; 0x05
    4f74:	1e 83       	std	Y+6, r17	; 0x06
    4f76:	2f 83       	std	Y+7, r18	; 0x07
    4f78:	38 87       	std	Y+8, r19	; 0x08
    4f7a:	49 87       	std	Y+9, r20	; 0x09
    4f7c:	5a 87       	std	Y+10, r21	; 0x0a
    4f7e:	6b 87       	std	Y+11, r22	; 0x0b
    4f80:	7c 87       	std	Y+12, r23	; 0x0c
	quaternion ret;
	ret.w = cos(angle/2);
    4f82:	20 e0       	ldi	r18, 0x00	; 0
    4f84:	30 e0       	ldi	r19, 0x00	; 0
    4f86:	40 e0       	ldi	r20, 0x00	; 0
    4f88:	5f e3       	ldi	r21, 0x3F	; 63
    4f8a:	c5 01       	movw	r24, r10
    4f8c:	b4 01       	movw	r22, r8
    4f8e:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4f92:	6b 01       	movw	r12, r22
    4f94:	7c 01       	movw	r14, r24
    4f96:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <cos>
    4f9a:	2b 01       	movw	r4, r22
    4f9c:	3c 01       	movw	r6, r24
	//only need to calculate sine of half angle once
	double sht = sin(angle/2);
    4f9e:	c7 01       	movw	r24, r14
    4fa0:	b6 01       	movw	r22, r12
    4fa2:	0e 94 cb 34 	call	0x6996	; 0x6996 <sin>
    4fa6:	6b 01       	movw	r12, r22
    4fa8:	7c 01       	movw	r14, r24
	ret.x = axis.x * sht;
    4faa:	29 81       	ldd	r18, Y+1	; 0x01
    4fac:	3a 81       	ldd	r19, Y+2	; 0x02
    4fae:	4b 81       	ldd	r20, Y+3	; 0x03
    4fb0:	5c 81       	ldd	r21, Y+4	; 0x04
    4fb2:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4fb6:	4b 01       	movw	r8, r22
    4fb8:	5c 01       	movw	r10, r24
	ret.y = axis.y * sht;
    4fba:	2d 81       	ldd	r18, Y+5	; 0x05
    4fbc:	3e 81       	ldd	r19, Y+6	; 0x06
    4fbe:	4f 81       	ldd	r20, Y+7	; 0x07
    4fc0:	58 85       	ldd	r21, Y+8	; 0x08
    4fc2:	c7 01       	movw	r24, r14
    4fc4:	b6 01       	movw	r22, r12
    4fc6:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    4fca:	6d 87       	std	Y+13, r22	; 0x0d
    4fcc:	7e 87       	std	Y+14, r23	; 0x0e
    4fce:	8f 87       	std	Y+15, r24	; 0x0f
    4fd0:	98 8b       	std	Y+16, r25	; 0x10
	ret.z = axis.z * sht;
    4fd2:	29 85       	ldd	r18, Y+9	; 0x09
    4fd4:	3a 85       	ldd	r19, Y+10	; 0x0a
    4fd6:	4b 85       	ldd	r20, Y+11	; 0x0b
    4fd8:	5c 85       	ldd	r21, Y+12	; 0x0c
    4fda:	c7 01       	movw	r24, r14
    4fdc:	b6 01       	movw	r22, r12
    4fde:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
	return ret;
    4fe2:	f1 01       	movw	r30, r2
    4fe4:	40 82       	st	Z, r4
    4fe6:	51 82       	std	Z+1, r5	; 0x01
    4fe8:	62 82       	std	Z+2, r6	; 0x02
    4fea:	73 82       	std	Z+3, r7	; 0x03
    4fec:	84 82       	std	Z+4, r8	; 0x04
    4fee:	95 82       	std	Z+5, r9	; 0x05
    4ff0:	a6 82       	std	Z+6, r10	; 0x06
    4ff2:	b7 82       	std	Z+7, r11	; 0x07
    4ff4:	2d 85       	ldd	r18, Y+13	; 0x0d
    4ff6:	3e 85       	ldd	r19, Y+14	; 0x0e
    4ff8:	4f 85       	ldd	r20, Y+15	; 0x0f
    4ffa:	58 89       	ldd	r21, Y+16	; 0x10
    4ffc:	20 87       	std	Z+8, r18	; 0x08
    4ffe:	31 87       	std	Z+9, r19	; 0x09
    5000:	42 87       	std	Z+10, r20	; 0x0a
    5002:	53 87       	std	Z+11, r21	; 0x0b
    5004:	64 87       	std	Z+12, r22	; 0x0c
    5006:	75 87       	std	Z+13, r23	; 0x0d
    5008:	86 87       	std	Z+14, r24	; 0x0e
    500a:	97 87       	std	Z+15, r25	; 0x0f
}
    500c:	c1 01       	movw	r24, r2
    500e:	60 96       	adiw	r28, 0x10	; 16
    5010:	0f b6       	in	r0, 0x3f	; 63
    5012:	f8 94       	cli
    5014:	de bf       	out	0x3e, r29	; 62
    5016:	0f be       	out	0x3f, r0	; 63
    5018:	cd bf       	out	0x3d, r28	; 61
    501a:	df 91       	pop	r29
    501c:	cf 91       	pop	r28
    501e:	1f 91       	pop	r17
    5020:	0f 91       	pop	r16
    5022:	ff 90       	pop	r15
    5024:	ef 90       	pop	r14
    5026:	df 90       	pop	r13
    5028:	cf 90       	pop	r12
    502a:	bf 90       	pop	r11
    502c:	af 90       	pop	r10
    502e:	9f 90       	pop	r9
    5030:	8f 90       	pop	r8
    5032:	7f 90       	pop	r7
    5034:	6f 90       	pop	r6
    5036:	5f 90       	pop	r5
    5038:	4f 90       	pop	r4
    503a:	3f 90       	pop	r3
    503c:	2f 90       	pop	r2
    503e:	08 95       	ret

00005040 <quaternion_to_matrix>:

matrix3x3d quaternion_to_matrix(quaternion q) {
    5040:	2f 92       	push	r2
    5042:	3f 92       	push	r3
    5044:	4f 92       	push	r4
    5046:	5f 92       	push	r5
    5048:	6f 92       	push	r6
    504a:	7f 92       	push	r7
    504c:	8f 92       	push	r8
    504e:	9f 92       	push	r9
    5050:	af 92       	push	r10
    5052:	bf 92       	push	r11
    5054:	cf 92       	push	r12
    5056:	df 92       	push	r13
    5058:	ef 92       	push	r14
    505a:	ff 92       	push	r15
    505c:	0f 93       	push	r16
    505e:	1f 93       	push	r17
    5060:	cf 93       	push	r28
    5062:	df 93       	push	r29
    5064:	cd b7       	in	r28, 0x3d	; 61
    5066:	de b7       	in	r29, 0x3e	; 62
    5068:	e4 97       	sbiw	r28, 0x34	; 52
    506a:	0f b6       	in	r0, 0x3f	; 63
    506c:	f8 94       	cli
    506e:	de bf       	out	0x3e, r29	; 62
    5070:	0f be       	out	0x3f, r0	; 63
    5072:	cd bf       	out	0x3d, r28	; 61
    5074:	1c 01       	movw	r2, r24
    5076:	89 82       	std	Y+1, r8	; 0x01
    5078:	9a 82       	std	Y+2, r9	; 0x02
    507a:	ab 82       	std	Y+3, r10	; 0x03
    507c:	bc 82       	std	Y+4, r11	; 0x04
    507e:	cd 82       	std	Y+5, r12	; 0x05
    5080:	de 82       	std	Y+6, r13	; 0x06
    5082:	ef 82       	std	Y+7, r14	; 0x07
    5084:	f8 86       	std	Y+8, r15	; 0x08
    5086:	09 87       	std	Y+9, r16	; 0x09
    5088:	1a 87       	std	Y+10, r17	; 0x0a
    508a:	2b 87       	std	Y+11, r18	; 0x0b
    508c:	3c 87       	std	Y+12, r19	; 0x0c
    508e:	4d 87       	std	Y+13, r20	; 0x0d
    5090:	5e 87       	std	Y+14, r21	; 0x0e
    5092:	6f 87       	std	Y+15, r22	; 0x0f
    5094:	78 8b       	std	Y+16, r23	; 0x10
    5096:	89 81       	ldd	r24, Y+1	; 0x01
    5098:	9a 81       	ldd	r25, Y+2	; 0x02
    509a:	ab 81       	ldd	r26, Y+3	; 0x03
    509c:	bc 81       	ldd	r27, Y+4	; 0x04
    509e:	8d 8b       	std	Y+21, r24	; 0x15
    50a0:	9e 8b       	std	Y+22, r25	; 0x16
    50a2:	af 8b       	std	Y+23, r26	; 0x17
    50a4:	b8 8f       	std	Y+24, r27	; 0x18
    50a6:	4d 80       	ldd	r4, Y+5	; 0x05
    50a8:	5e 80       	ldd	r5, Y+6	; 0x06
    50aa:	6f 80       	ldd	r6, Y+7	; 0x07
    50ac:	78 84       	ldd	r7, Y+8	; 0x08
    50ae:	89 84       	ldd	r8, Y+9	; 0x09
    50b0:	9a 84       	ldd	r9, Y+10	; 0x0a
    50b2:	ab 84       	ldd	r10, Y+11	; 0x0b
    50b4:	bc 84       	ldd	r11, Y+12	; 0x0c
    50b6:	cd 84       	ldd	r12, Y+13	; 0x0d
    50b8:	de 84       	ldd	r13, Y+14	; 0x0e
    50ba:	ef 84       	ldd	r14, Y+15	; 0x0f
    50bc:	f8 88       	ldd	r15, Y+16	; 0x10
	matrix3x3d ret;
	ret.r1[0] = 1 -(2 * (q.y * q.y)) - (2 * (q.z * q.z));
    50be:	a5 01       	movw	r20, r10
    50c0:	94 01       	movw	r18, r8
    50c2:	c5 01       	movw	r24, r10
    50c4:	b4 01       	movw	r22, r8
    50c6:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    50ca:	9b 01       	movw	r18, r22
    50cc:	ac 01       	movw	r20, r24
    50ce:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    50d2:	6d 8f       	std	Y+29, r22	; 0x1d
    50d4:	7e 8f       	std	Y+30, r23	; 0x1e
    50d6:	8f 8f       	std	Y+31, r24	; 0x1f
    50d8:	98 a3       	std	Y+32, r25	; 0x20
    50da:	a7 01       	movw	r20, r14
    50dc:	96 01       	movw	r18, r12
    50de:	c7 01       	movw	r24, r14
    50e0:	b6 01       	movw	r22, r12
    50e2:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    50e6:	9b 01       	movw	r18, r22
    50e8:	ac 01       	movw	r20, r24
    50ea:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    50ee:	69 8b       	std	Y+17, r22	; 0x11
    50f0:	7a 8b       	std	Y+18, r23	; 0x12
    50f2:	8b 8b       	std	Y+19, r24	; 0x13
    50f4:	9c 8b       	std	Y+20, r25	; 0x14
	ret.r1[1] = (2 * q.x * q.y) - (2 * q.w * q.z);
    50f6:	a3 01       	movw	r20, r6
    50f8:	92 01       	movw	r18, r4
    50fa:	c3 01       	movw	r24, r6
    50fc:	b2 01       	movw	r22, r4
    50fe:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    5102:	69 a3       	std	Y+33, r22	; 0x21
    5104:	7a a3       	std	Y+34, r23	; 0x22
    5106:	8b a3       	std	Y+35, r24	; 0x23
    5108:	9c a3       	std	Y+36, r25	; 0x24
    510a:	a5 01       	movw	r20, r10
    510c:	94 01       	movw	r18, r8
    510e:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    5112:	6d a3       	std	Y+37, r22	; 0x25
    5114:	7e a3       	std	Y+38, r23	; 0x26
    5116:	8f a3       	std	Y+39, r24	; 0x27
    5118:	98 a7       	std	Y+40, r25	; 0x28
    511a:	2d 89       	ldd	r18, Y+21	; 0x15
    511c:	3e 89       	ldd	r19, Y+22	; 0x16
    511e:	4f 89       	ldd	r20, Y+23	; 0x17
    5120:	58 8d       	ldd	r21, Y+24	; 0x18
    5122:	ca 01       	movw	r24, r20
    5124:	b9 01       	movw	r22, r18
    5126:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    512a:	69 8f       	std	Y+25, r22	; 0x19
    512c:	7a 8f       	std	Y+26, r23	; 0x1a
    512e:	8b 8f       	std	Y+27, r24	; 0x1b
    5130:	9c 8f       	std	Y+28, r25	; 0x1c
    5132:	a7 01       	movw	r20, r14
    5134:	96 01       	movw	r18, r12
    5136:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    513a:	69 a7       	std	Y+41, r22	; 0x29
    513c:	7a a7       	std	Y+42, r23	; 0x2a
    513e:	8b a7       	std	Y+43, r24	; 0x2b
    5140:	9c a7       	std	Y+44, r25	; 0x2c
	ret.r1[2] = (2 * q.x * q.z) + (2 * q.w * q.y);
    5142:	a5 01       	movw	r20, r10
    5144:	94 01       	movw	r18, r8
    5146:	69 8d       	ldd	r22, Y+25	; 0x19
    5148:	7a 8d       	ldd	r23, Y+26	; 0x1a
    514a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    514c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    514e:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    5152:	6d a7       	std	Y+45, r22	; 0x2d
    5154:	7e a7       	std	Y+46, r23	; 0x2e
    5156:	8f a7       	std	Y+47, r24	; 0x2f
    5158:	98 ab       	std	Y+48, r25	; 0x30

	ret.r2[0] = (2 * q.x * q.y) + (2 * q.w * q.z);
	ret.r2[1] = 1 - (2 * (q.x * q.x)) - (2 * (q.z * q.z));
    515a:	a3 01       	movw	r20, r6
    515c:	92 01       	movw	r18, r4
    515e:	c3 01       	movw	r24, r6
    5160:	b2 01       	movw	r22, r4
    5162:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    5166:	9b 01       	movw	r18, r22
    5168:	ac 01       	movw	r20, r24
    516a:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    516e:	9b 01       	movw	r18, r22
    5170:	ac 01       	movw	r20, r24
    5172:	60 e0       	ldi	r22, 0x00	; 0
    5174:	70 e0       	ldi	r23, 0x00	; 0
    5176:	80 e8       	ldi	r24, 0x80	; 128
    5178:	9f e3       	ldi	r25, 0x3F	; 63
    517a:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    517e:	69 ab       	std	Y+49, r22	; 0x31
    5180:	7a ab       	std	Y+50, r23	; 0x32
    5182:	8b ab       	std	Y+51, r24	; 0x33
    5184:	9c ab       	std	Y+52, r25	; 0x34
	return ret;
}

matrix3x3d quaternion_to_matrix(quaternion q) {
	matrix3x3d ret;
	ret.r1[0] = 1 -(2 * (q.y * q.y)) - (2 * (q.z * q.z));
    5186:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5188:	3e 8d       	ldd	r19, Y+30	; 0x1e
    518a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    518c:	58 a1       	ldd	r21, Y+32	; 0x20
    518e:	60 e0       	ldi	r22, 0x00	; 0
    5190:	70 e0       	ldi	r23, 0x00	; 0
    5192:	80 e8       	ldi	r24, 0x80	; 128
    5194:	9f e3       	ldi	r25, 0x3F	; 63
    5196:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    519a:	29 89       	ldd	r18, Y+17	; 0x11
    519c:	3a 89       	ldd	r19, Y+18	; 0x12
    519e:	4b 89       	ldd	r20, Y+19	; 0x13
    51a0:	5c 89       	ldd	r21, Y+20	; 0x14
    51a2:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
	ret.r2[2] = (2 * (q.y * q.z)) - (2 * (q.w * q.x));

	ret.r3[0] = (2 * (q.x * q.z)) - (2 * q.w * q.y);
	ret.r3[1] = (2 * q.y * q.z) + (2 * q.w * q.x);
	ret.r3[2] = 1 - (2 * (q.x * q.x)) - (2 * (q.y * q.y));
	return ret;
    51a6:	d1 01       	movw	r26, r2
    51a8:	6d 93       	st	X+, r22
    51aa:	7d 93       	st	X+, r23
    51ac:	8d 93       	st	X+, r24
    51ae:	9c 93       	st	X, r25
    51b0:	13 97       	sbiw	r26, 0x03	; 3
}

matrix3x3d quaternion_to_matrix(quaternion q) {
	matrix3x3d ret;
	ret.r1[0] = 1 -(2 * (q.y * q.y)) - (2 * (q.z * q.z));
	ret.r1[1] = (2 * q.x * q.y) - (2 * q.w * q.z);
    51b2:	29 a5       	ldd	r18, Y+41	; 0x29
    51b4:	3a a5       	ldd	r19, Y+42	; 0x2a
    51b6:	4b a5       	ldd	r20, Y+43	; 0x2b
    51b8:	5c a5       	ldd	r21, Y+44	; 0x2c
    51ba:	6d a1       	ldd	r22, Y+37	; 0x25
    51bc:	7e a1       	ldd	r23, Y+38	; 0x26
    51be:	8f a1       	ldd	r24, Y+39	; 0x27
    51c0:	98 a5       	ldd	r25, Y+40	; 0x28
    51c2:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
	ret.r2[2] = (2 * (q.y * q.z)) - (2 * (q.w * q.x));

	ret.r3[0] = (2 * (q.x * q.z)) - (2 * q.w * q.y);
	ret.r3[1] = (2 * q.y * q.z) + (2 * q.w * q.x);
	ret.r3[2] = 1 - (2 * (q.x * q.x)) - (2 * (q.y * q.y));
	return ret;
    51c6:	f1 01       	movw	r30, r2
    51c8:	64 83       	std	Z+4, r22	; 0x04
    51ca:	75 83       	std	Z+5, r23	; 0x05
    51cc:	86 83       	std	Z+6, r24	; 0x06
    51ce:	97 83       	std	Z+7, r25	; 0x07

matrix3x3d quaternion_to_matrix(quaternion q) {
	matrix3x3d ret;
	ret.r1[0] = 1 -(2 * (q.y * q.y)) - (2 * (q.z * q.z));
	ret.r1[1] = (2 * q.x * q.y) - (2 * q.w * q.z);
	ret.r1[2] = (2 * q.x * q.z) + (2 * q.w * q.y);
    51d0:	a7 01       	movw	r20, r14
    51d2:	96 01       	movw	r18, r12
    51d4:	69 a1       	ldd	r22, Y+33	; 0x21
    51d6:	7a a1       	ldd	r23, Y+34	; 0x22
    51d8:	8b a1       	ldd	r24, Y+35	; 0x23
    51da:	9c a1       	ldd	r25, Y+36	; 0x24
    51dc:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    51e0:	2d a5       	ldd	r18, Y+45	; 0x2d
    51e2:	3e a5       	ldd	r19, Y+46	; 0x2e
    51e4:	4f a5       	ldd	r20, Y+47	; 0x2f
    51e6:	58 a9       	ldd	r21, Y+48	; 0x30
    51e8:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
	ret.r2[2] = (2 * (q.y * q.z)) - (2 * (q.w * q.x));

	ret.r3[0] = (2 * (q.x * q.z)) - (2 * q.w * q.y);
	ret.r3[1] = (2 * q.y * q.z) + (2 * q.w * q.x);
	ret.r3[2] = 1 - (2 * (q.x * q.x)) - (2 * (q.y * q.y));
	return ret;
    51ec:	d1 01       	movw	r26, r2
    51ee:	18 96       	adiw	r26, 0x08	; 8
    51f0:	6d 93       	st	X+, r22
    51f2:	7d 93       	st	X+, r23
    51f4:	8d 93       	st	X+, r24
    51f6:	9c 93       	st	X, r25
    51f8:	1b 97       	sbiw	r26, 0x0b	; 11
	matrix3x3d ret;
	ret.r1[0] = 1 -(2 * (q.y * q.y)) - (2 * (q.z * q.z));
	ret.r1[1] = (2 * q.x * q.y) - (2 * q.w * q.z);
	ret.r1[2] = (2 * q.x * q.z) + (2 * q.w * q.y);

	ret.r2[0] = (2 * q.x * q.y) + (2 * q.w * q.z);
    51fa:	29 a5       	ldd	r18, Y+41	; 0x29
    51fc:	3a a5       	ldd	r19, Y+42	; 0x2a
    51fe:	4b a5       	ldd	r20, Y+43	; 0x2b
    5200:	5c a5       	ldd	r21, Y+44	; 0x2c
    5202:	6d a1       	ldd	r22, Y+37	; 0x25
    5204:	7e a1       	ldd	r23, Y+38	; 0x26
    5206:	8f a1       	ldd	r24, Y+39	; 0x27
    5208:	98 a5       	ldd	r25, Y+40	; 0x28
    520a:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
	ret.r2[2] = (2 * (q.y * q.z)) - (2 * (q.w * q.x));

	ret.r3[0] = (2 * (q.x * q.z)) - (2 * q.w * q.y);
	ret.r3[1] = (2 * q.y * q.z) + (2 * q.w * q.x);
	ret.r3[2] = 1 - (2 * (q.x * q.x)) - (2 * (q.y * q.y));
	return ret;
    520e:	f1 01       	movw	r30, r2
    5210:	64 87       	std	Z+12, r22	; 0x0c
    5212:	75 87       	std	Z+13, r23	; 0x0d
    5214:	86 87       	std	Z+14, r24	; 0x0e
    5216:	97 87       	std	Z+15, r25	; 0x0f
	ret.r1[0] = 1 -(2 * (q.y * q.y)) - (2 * (q.z * q.z));
	ret.r1[1] = (2 * q.x * q.y) - (2 * q.w * q.z);
	ret.r1[2] = (2 * q.x * q.z) + (2 * q.w * q.y);

	ret.r2[0] = (2 * q.x * q.y) + (2 * q.w * q.z);
	ret.r2[1] = 1 - (2 * (q.x * q.x)) - (2 * (q.z * q.z));
    5218:	29 89       	ldd	r18, Y+17	; 0x11
    521a:	3a 89       	ldd	r19, Y+18	; 0x12
    521c:	4b 89       	ldd	r20, Y+19	; 0x13
    521e:	5c 89       	ldd	r21, Y+20	; 0x14
    5220:	69 a9       	ldd	r22, Y+49	; 0x31
    5222:	7a a9       	ldd	r23, Y+50	; 0x32
    5224:	8b a9       	ldd	r24, Y+51	; 0x33
    5226:	9c a9       	ldd	r25, Y+52	; 0x34
    5228:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
	ret.r2[2] = (2 * (q.y * q.z)) - (2 * (q.w * q.x));

	ret.r3[0] = (2 * (q.x * q.z)) - (2 * q.w * q.y);
	ret.r3[1] = (2 * q.y * q.z) + (2 * q.w * q.x);
	ret.r3[2] = 1 - (2 * (q.x * q.x)) - (2 * (q.y * q.y));
	return ret;
    522c:	d1 01       	movw	r26, r2
    522e:	50 96       	adiw	r26, 0x10	; 16
    5230:	6d 93       	st	X+, r22
    5232:	7d 93       	st	X+, r23
    5234:	8d 93       	st	X+, r24
    5236:	9c 93       	st	X, r25
    5238:	53 97       	sbiw	r26, 0x13	; 19
	ret.r1[1] = (2 * q.x * q.y) - (2 * q.w * q.z);
	ret.r1[2] = (2 * q.x * q.z) + (2 * q.w * q.y);

	ret.r2[0] = (2 * q.x * q.y) + (2 * q.w * q.z);
	ret.r2[1] = 1 - (2 * (q.x * q.x)) - (2 * (q.z * q.z));
	ret.r2[2] = (2 * (q.y * q.z)) - (2 * (q.w * q.x));
    523a:	a7 01       	movw	r20, r14
    523c:	96 01       	movw	r18, r12
    523e:	c5 01       	movw	r24, r10
    5240:	b4 01       	movw	r22, r8
    5242:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    5246:	9b 01       	movw	r18, r22
    5248:	ac 01       	movw	r20, r24
    524a:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    524e:	69 8b       	std	Y+17, r22	; 0x11
    5250:	7a 8b       	std	Y+18, r23	; 0x12
    5252:	8b 8b       	std	Y+19, r24	; 0x13
    5254:	9c 8b       	std	Y+20, r25	; 0x14
    5256:	a3 01       	movw	r20, r6
    5258:	92 01       	movw	r18, r4
    525a:	6d 89       	ldd	r22, Y+21	; 0x15
    525c:	7e 89       	ldd	r23, Y+22	; 0x16
    525e:	8f 89       	ldd	r24, Y+23	; 0x17
    5260:	98 8d       	ldd	r25, Y+24	; 0x18
    5262:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    5266:	9b 01       	movw	r18, r22
    5268:	ac 01       	movw	r20, r24
    526a:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    526e:	9b 01       	movw	r18, r22
    5270:	ac 01       	movw	r20, r24
    5272:	69 89       	ldd	r22, Y+17	; 0x11
    5274:	7a 89       	ldd	r23, Y+18	; 0x12
    5276:	8b 89       	ldd	r24, Y+19	; 0x13
    5278:	9c 89       	ldd	r25, Y+20	; 0x14
    527a:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>

	ret.r3[0] = (2 * (q.x * q.z)) - (2 * q.w * q.y);
	ret.r3[1] = (2 * q.y * q.z) + (2 * q.w * q.x);
	ret.r3[2] = 1 - (2 * (q.x * q.x)) - (2 * (q.y * q.y));
	return ret;
    527e:	f1 01       	movw	r30, r2
    5280:	64 8b       	std	Z+20, r22	; 0x14
    5282:	75 8b       	std	Z+21, r23	; 0x15
    5284:	86 8b       	std	Z+22, r24	; 0x16
    5286:	97 8b       	std	Z+23, r25	; 0x17

	ret.r2[0] = (2 * q.x * q.y) + (2 * q.w * q.z);
	ret.r2[1] = 1 - (2 * (q.x * q.x)) - (2 * (q.z * q.z));
	ret.r2[2] = (2 * (q.y * q.z)) - (2 * (q.w * q.x));

	ret.r3[0] = (2 * (q.x * q.z)) - (2 * q.w * q.y);
    5288:	a7 01       	movw	r20, r14
    528a:	96 01       	movw	r18, r12
    528c:	c3 01       	movw	r24, r6
    528e:	b2 01       	movw	r22, r4
    5290:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    5294:	9b 01       	movw	r18, r22
    5296:	ac 01       	movw	r20, r24
    5298:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    529c:	2d a5       	ldd	r18, Y+45	; 0x2d
    529e:	3e a5       	ldd	r19, Y+46	; 0x2e
    52a0:	4f a5       	ldd	r20, Y+47	; 0x2f
    52a2:	58 a9       	ldd	r21, Y+48	; 0x30
    52a4:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
	ret.r3[1] = (2 * q.y * q.z) + (2 * q.w * q.x);
	ret.r3[2] = 1 - (2 * (q.x * q.x)) - (2 * (q.y * q.y));
	return ret;
    52a8:	d1 01       	movw	r26, r2
    52aa:	58 96       	adiw	r26, 0x18	; 24
    52ac:	6d 93       	st	X+, r22
    52ae:	7d 93       	st	X+, r23
    52b0:	8d 93       	st	X+, r24
    52b2:	9c 93       	st	X, r25
    52b4:	5b 97       	sbiw	r26, 0x1b	; 27
	ret.r2[0] = (2 * q.x * q.y) + (2 * q.w * q.z);
	ret.r2[1] = 1 - (2 * (q.x * q.x)) - (2 * (q.z * q.z));
	ret.r2[2] = (2 * (q.y * q.z)) - (2 * (q.w * q.x));

	ret.r3[0] = (2 * (q.x * q.z)) - (2 * q.w * q.y);
	ret.r3[1] = (2 * q.y * q.z) + (2 * q.w * q.x);
    52b6:	a5 01       	movw	r20, r10
    52b8:	94 01       	movw	r18, r8
    52ba:	c5 01       	movw	r24, r10
    52bc:	b4 01       	movw	r22, r8
    52be:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    52c2:	a7 01       	movw	r20, r14
    52c4:	96 01       	movw	r18, r12
    52c6:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    52ca:	6b 01       	movw	r12, r22
    52cc:	7c 01       	movw	r14, r24
    52ce:	a3 01       	movw	r20, r6
    52d0:	92 01       	movw	r18, r4
    52d2:	69 8d       	ldd	r22, Y+25	; 0x19
    52d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    52d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    52d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    52da:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    52de:	9b 01       	movw	r18, r22
    52e0:	ac 01       	movw	r20, r24
    52e2:	c7 01       	movw	r24, r14
    52e4:	b6 01       	movw	r22, r12
    52e6:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
	ret.r3[2] = 1 - (2 * (q.x * q.x)) - (2 * (q.y * q.y));
	return ret;
    52ea:	f1 01       	movw	r30, r2
    52ec:	64 8f       	std	Z+28, r22	; 0x1c
    52ee:	75 8f       	std	Z+29, r23	; 0x1d
    52f0:	86 8f       	std	Z+30, r24	; 0x1e
    52f2:	97 8f       	std	Z+31, r25	; 0x1f
	ret.r2[1] = 1 - (2 * (q.x * q.x)) - (2 * (q.z * q.z));
	ret.r2[2] = (2 * (q.y * q.z)) - (2 * (q.w * q.x));

	ret.r3[0] = (2 * (q.x * q.z)) - (2 * q.w * q.y);
	ret.r3[1] = (2 * q.y * q.z) + (2 * q.w * q.x);
	ret.r3[2] = 1 - (2 * (q.x * q.x)) - (2 * (q.y * q.y));
    52f4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    52f6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    52f8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    52fa:	58 a1       	ldd	r21, Y+32	; 0x20
    52fc:	69 a9       	ldd	r22, Y+49	; 0x31
    52fe:	7a a9       	ldd	r23, Y+50	; 0x32
    5300:	8b a9       	ldd	r24, Y+51	; 0x33
    5302:	9c a9       	ldd	r25, Y+52	; 0x34
    5304:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
	return ret;
    5308:	d1 01       	movw	r26, r2
    530a:	90 96       	adiw	r26, 0x20	; 32
    530c:	6d 93       	st	X+, r22
    530e:	7d 93       	st	X+, r23
    5310:	8d 93       	st	X+, r24
    5312:	9c 93       	st	X, r25
    5314:	93 97       	sbiw	r26, 0x23	; 35
}
    5316:	c1 01       	movw	r24, r2
    5318:	e4 96       	adiw	r28, 0x34	; 52
    531a:	0f b6       	in	r0, 0x3f	; 63
    531c:	f8 94       	cli
    531e:	de bf       	out	0x3e, r29	; 62
    5320:	0f be       	out	0x3f, r0	; 63
    5322:	cd bf       	out	0x3d, r28	; 61
    5324:	df 91       	pop	r29
    5326:	cf 91       	pop	r28
    5328:	1f 91       	pop	r17
    532a:	0f 91       	pop	r16
    532c:	ff 90       	pop	r15
    532e:	ef 90       	pop	r14
    5330:	df 90       	pop	r13
    5332:	cf 90       	pop	r12
    5334:	bf 90       	pop	r11
    5336:	af 90       	pop	r10
    5338:	9f 90       	pop	r9
    533a:	8f 90       	pop	r8
    533c:	7f 90       	pop	r7
    533e:	6f 90       	pop	r6
    5340:	5f 90       	pop	r5
    5342:	4f 90       	pop	r4
    5344:	3f 90       	pop	r3
    5346:	2f 90       	pop	r2
    5348:	08 95       	ret

0000534a <quaternion_from_matrix>:
	ret.y = -q.y;
	ret.z = -q.z;
	return ret;
}

quaternion quaternion_from_matrix(matrix3x3d *mat) {
    534a:	2f 92       	push	r2
    534c:	3f 92       	push	r3
    534e:	4f 92       	push	r4
    5350:	5f 92       	push	r5
    5352:	6f 92       	push	r6
    5354:	7f 92       	push	r7
    5356:	8f 92       	push	r8
    5358:	9f 92       	push	r9
    535a:	af 92       	push	r10
    535c:	bf 92       	push	r11
    535e:	cf 92       	push	r12
    5360:	df 92       	push	r13
    5362:	ef 92       	push	r14
    5364:	ff 92       	push	r15
    5366:	0f 93       	push	r16
    5368:	1f 93       	push	r17
    536a:	cf 93       	push	r28
    536c:	df 93       	push	r29
    536e:	00 d0       	rcall	.+0      	; 0x5370 <quaternion_from_matrix+0x26>
    5370:	00 d0       	rcall	.+0      	; 0x5372 <quaternion_from_matrix+0x28>
    5372:	cd b7       	in	r28, 0x3d	; 61
    5374:	de b7       	in	r29, 0x3e	; 62
    5376:	8c 01       	movw	r16, r24
    5378:	1b 01       	movw	r2, r22
	quaternion res;

	float trace = (*mat).r1[0] + (*mat).r2[1] + (*mat).r3[2]; //on main diagonal
    537a:	fb 01       	movw	r30, r22
    537c:	80 80       	ld	r8, Z
    537e:	91 80       	ldd	r9, Z+1	; 0x01
    5380:	a2 80       	ldd	r10, Z+2	; 0x02
    5382:	b3 80       	ldd	r11, Z+3	; 0x03
    5384:	c0 88       	ldd	r12, Z+16	; 0x10
    5386:	d1 88       	ldd	r13, Z+17	; 0x11
    5388:	e2 88       	ldd	r14, Z+18	; 0x12
    538a:	f3 88       	ldd	r15, Z+19	; 0x13
    538c:	40 a0       	ldd	r4, Z+32	; 0x20
    538e:	51 a0       	ldd	r5, Z+33	; 0x21
    5390:	62 a0       	ldd	r6, Z+34	; 0x22
    5392:	73 a0       	ldd	r7, Z+35	; 0x23
    5394:	a7 01       	movw	r20, r14
    5396:	96 01       	movw	r18, r12
    5398:	c5 01       	movw	r24, r10
    539a:	b4 01       	movw	r22, r8
    539c:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    53a0:	a3 01       	movw	r20, r6
    53a2:	92 01       	movw	r18, r4
    53a4:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    53a8:	69 83       	std	Y+1, r22	; 0x01
    53aa:	7a 83       	std	Y+2, r23	; 0x02
    53ac:	8b 83       	std	Y+3, r24	; 0x03
    53ae:	9c 83       	std	Y+4, r25	; 0x04

	float scale = 0.0f;
	if (trace > 0)
    53b0:	20 e0       	ldi	r18, 0x00	; 0
    53b2:	30 e0       	ldi	r19, 0x00	; 0
    53b4:	a9 01       	movw	r20, r18
    53b6:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__gesf2>
    53ba:	18 16       	cp	r1, r24
    53bc:	0c f0       	brlt	.+2      	; 0x53c0 <quaternion_from_matrix+0x76>
    53be:	4e c0       	rjmp	.+156    	; 0x545c <quaternion_from_matrix+0x112>
	{
		scale = sqrt(trace + 1.0) * 2.0;
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	40 e8       	ldi	r20, 0x80	; 128
    53c6:	5f e3       	ldi	r21, 0x3F	; 63
    53c8:	69 81       	ldd	r22, Y+1	; 0x01
    53ca:	7a 81       	ldd	r23, Y+2	; 0x02
    53cc:	8b 81       	ldd	r24, Y+3	; 0x03
    53ce:	9c 81       	ldd	r25, Y+4	; 0x04
    53d0:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    53d4:	0e 94 d5 34 	call	0x69aa	; 0x69aa <sqrt>
    53d8:	9b 01       	movw	r18, r22
    53da:	ac 01       	movw	r20, r24
    53dc:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    53e0:	69 83       	std	Y+1, r22	; 0x01
    53e2:	7a 83       	std	Y+2, r23	; 0x02
    53e4:	8b 83       	std	Y+3, r24	; 0x03
    53e6:	9c 83       	std	Y+4, r25	; 0x04
		res.w = 0.25 * scale;
    53e8:	20 e0       	ldi	r18, 0x00	; 0
    53ea:	30 e0       	ldi	r19, 0x00	; 0
    53ec:	40 e8       	ldi	r20, 0x80	; 128
    53ee:	5e e3       	ldi	r21, 0x3E	; 62
    53f0:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    53f4:	2b 01       	movw	r4, r22
    53f6:	3c 01       	movw	r6, r24
		res.x = ((*mat).r3[1] - (*mat).r2[2]) / scale;
    53f8:	f1 01       	movw	r30, r2
    53fa:	24 89       	ldd	r18, Z+20	; 0x14
    53fc:	35 89       	ldd	r19, Z+21	; 0x15
    53fe:	46 89       	ldd	r20, Z+22	; 0x16
    5400:	57 89       	ldd	r21, Z+23	; 0x17
    5402:	64 8d       	ldd	r22, Z+28	; 0x1c
    5404:	75 8d       	ldd	r23, Z+29	; 0x1d
    5406:	86 8d       	ldd	r24, Z+30	; 0x1e
    5408:	97 8d       	ldd	r25, Z+31	; 0x1f
    540a:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    540e:	29 81       	ldd	r18, Y+1	; 0x01
    5410:	3a 81       	ldd	r19, Y+2	; 0x02
    5412:	4b 81       	ldd	r20, Y+3	; 0x03
    5414:	5c 81       	ldd	r21, Y+4	; 0x04
    5416:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    541a:	4b 01       	movw	r8, r22
    541c:	5c 01       	movw	r10, r24
		res.y = ((*mat).r1[2] - (*mat).r3[0]) / scale;
    541e:	f1 01       	movw	r30, r2
    5420:	20 8d       	ldd	r18, Z+24	; 0x18
    5422:	31 8d       	ldd	r19, Z+25	; 0x19
    5424:	42 8d       	ldd	r20, Z+26	; 0x1a
    5426:	53 8d       	ldd	r21, Z+27	; 0x1b
    5428:	60 85       	ldd	r22, Z+8	; 0x08
    542a:	71 85       	ldd	r23, Z+9	; 0x09
    542c:	82 85       	ldd	r24, Z+10	; 0x0a
    542e:	93 85       	ldd	r25, Z+11	; 0x0b
    5430:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    5434:	29 81       	ldd	r18, Y+1	; 0x01
    5436:	3a 81       	ldd	r19, Y+2	; 0x02
    5438:	4b 81       	ldd	r20, Y+3	; 0x03
    543a:	5c 81       	ldd	r21, Y+4	; 0x04
    543c:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    5440:	6b 01       	movw	r12, r22
    5442:	7c 01       	movw	r14, r24
		res.z = ((*mat).r2[0] - (*mat).r1[1]) / scale;
    5444:	f1 01       	movw	r30, r2
    5446:	24 81       	ldd	r18, Z+4	; 0x04
    5448:	35 81       	ldd	r19, Z+5	; 0x05
    544a:	46 81       	ldd	r20, Z+6	; 0x06
    544c:	57 81       	ldd	r21, Z+7	; 0x07
    544e:	64 85       	ldd	r22, Z+12	; 0x0c
    5450:	75 85       	ldd	r23, Z+13	; 0x0d
    5452:	86 85       	ldd	r24, Z+14	; 0x0e
    5454:	97 85       	ldd	r25, Z+15	; 0x0f
    5456:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    545a:	65 c0       	rjmp	.+202    	; 0x5526 <quaternion_from_matrix+0x1dc>
	}
	else if (((*mat).r1[0] < (*mat).r2[1]) & ((*mat).r1[0] < (*mat).r3[2]))
    545c:	a3 01       	movw	r20, r6
    545e:	92 01       	movw	r18, r4
    5460:	c5 01       	movw	r24, r10
    5462:	b4 01       	movw	r22, r8
    5464:	0e 94 de 32 	call	0x65bc	; 0x65bc <__cmpsf2>
    5468:	87 ff       	sbrs	r24, 7
    546a:	64 c0       	rjmp	.+200    	; 0x5534 <quaternion_from_matrix+0x1ea>
    546c:	a7 01       	movw	r20, r14
    546e:	96 01       	movw	r18, r12
    5470:	c5 01       	movw	r24, r10
    5472:	b4 01       	movw	r22, r8
    5474:	0e 94 de 32 	call	0x65bc	; 0x65bc <__cmpsf2>
    5478:	87 ff       	sbrs	r24, 7
    547a:	5c c0       	rjmp	.+184    	; 0x5534 <quaternion_from_matrix+0x1ea>
	{
		scale = sqrt(1.0 + (*mat).r1[0] - (*mat).r2[1] - (*mat).r3[2]) * 2.0;
    547c:	20 e0       	ldi	r18, 0x00	; 0
    547e:	30 e0       	ldi	r19, 0x00	; 0
    5480:	40 e8       	ldi	r20, 0x80	; 128
    5482:	5f e3       	ldi	r21, 0x3F	; 63
    5484:	c5 01       	movw	r24, r10
    5486:	b4 01       	movw	r22, r8
    5488:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    548c:	a7 01       	movw	r20, r14
    548e:	96 01       	movw	r18, r12
    5490:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    5494:	a3 01       	movw	r20, r6
    5496:	92 01       	movw	r18, r4
    5498:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    549c:	0e 94 d5 34 	call	0x69aa	; 0x69aa <sqrt>
    54a0:	9b 01       	movw	r18, r22
    54a2:	ac 01       	movw	r20, r24
    54a4:	0e 94 7a 32 	call	0x64f4	; 0x64f4 <__addsf3>
    54a8:	69 83       	std	Y+1, r22	; 0x01
    54aa:	7a 83       	std	Y+2, r23	; 0x02
    54ac:	8b 83       	std	Y+3, r24	; 0x03
    54ae:	9c 83       	std	Y+4, r25	; 0x04
		res.w = ((*mat).r3[1] - (*mat).r2[2]) / scale;
    54b0:	f1 01       	movw	r30, r2
    54b2:	24 89       	ldd	r18, Z+20	; 0x14
    54b4:	35 89       	ldd	r19, Z+21	; 0x15
    54b6:	46 89       	ldd	r20, Z+22	; 0x16
    54b8:	57 89       	ldd	r21, Z+23	; 0x17
    54ba:	64 8d       	ldd	r22, Z+28	; 0x1c
    54bc:	75 8d       	ldd	r23, Z+29	; 0x1d
    54be:	86 8d       	ldd	r24, Z+30	; 0x1e
    54c0:	97 8d       	ldd	r25, Z+31	; 0x1f
    54c2:	0e 94 79 32 	call	0x64f2	; 0x64f2 <__subsf3>
    54c6:	29 81       	ldd	r18, Y+1	; 0x01
    54c8:	3a 81       	ldd	r19, Y+2	; 0x02
    54ca:	4b 81       	ldd	r20, Y+3	; 0x03
    54cc:	5c 81       	ldd	r21, Y+4	; 0x04
    54ce:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    54d2:	2b 01       	movw	r4, r22
    54d4:	3c 01       	movw	r6, r24
		res.x = 0.25 * scale;
    54d6:	20 e0       	ldi	r18, 0x00	; 0
    54d8:	30 e0       	ldi	r19, 0x00	; 0
    54da:	40 e8       	ldi	r20, 0x80	; 128
    54dc:	5e e3       	ldi	r21, 0x3E	; 62
    54de:	69 81       	ldd	r22, Y+1	; 0x01
    54e0:	7a 81       	ldd	r23, Y+2	; 0x02
    54e2:	8b 81       	ldd	r24, Y+3	; 0x03
    54e4:	9c 81       	ldd	r25, Y+4	; 0x04
    54e6:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    54ea:	4b 01       	movw	r8, r22
    54ec:	5c 01       	movw	r10, r24
		res.y = ((*mat).r1[1] + (*mat).r2[0]) / scale;
    54ee:	f1 01       	movw	r30, r2
    54f0:	24 85       	ldd	r18, Z+12	; 0x0c
    54f2:	35 85       	ldd	r19, Z+13	; 0x0d
    54f4:	46 85       	ldd	r20, Z+14	; 0x0e
    54f6:	57 85       	ldd	r21, Z+15	; 0x0f
    54f8:	64 81       	ldd	r22, Z+4	; 0x04
    54fa:	75 81       	ldd	r23, Z+5	; 0x05
    54fc:	86 81       	ldd	r24, Z+6	; 0x06
    54fe:	97 81       	ldd	r25, Z+7	; 0x07
    5500:	f9 d7       	rcall	.+4082   	; 0x64f4 <__addsf3>
    5502:	29 81       	ldd	r18, Y+1	; 0x01
    5504:	3a 81       	ldd	r19, Y+2	; 0x02
    5506:	4b 81       	ldd	r20, Y+3	; 0x03
    5508:	5c 81       	ldd	r21, Y+4	; 0x04
    550a:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    550e:	6b 01       	movw	r12, r22
    5510:	7c 01       	movw	r14, r24
    5512:	f1 01       	movw	r30, r2
		res.z = ((*mat).r1[2] + (*mat).r3[0]) / scale;
    5514:	20 8d       	ldd	r18, Z+24	; 0x18
    5516:	31 8d       	ldd	r19, Z+25	; 0x19
    5518:	42 8d       	ldd	r20, Z+26	; 0x1a
    551a:	53 8d       	ldd	r21, Z+27	; 0x1b
    551c:	60 85       	ldd	r22, Z+8	; 0x08
    551e:	71 85       	ldd	r23, Z+9	; 0x09
    5520:	82 85       	ldd	r24, Z+10	; 0x0a
    5522:	93 85       	ldd	r25, Z+11	; 0x0b
    5524:	e7 d7       	rcall	.+4046   	; 0x64f4 <__addsf3>
    5526:	29 81       	ldd	r18, Y+1	; 0x01
    5528:	3a 81       	ldd	r19, Y+2	; 0x02
    552a:	4b 81       	ldd	r20, Y+3	; 0x03
    552c:	5c 81       	ldd	r21, Y+4	; 0x04
    552e:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    5532:	a7 c0       	rjmp	.+334    	; 0x5682 <quaternion_from_matrix+0x338>
    5534:	a3 01       	movw	r20, r6
    5536:	92 01       	movw	r18, r4
	}
	else if ((*mat).r2[1] < (*mat).r3[2])
    5538:	c7 01       	movw	r24, r14
    553a:	b6 01       	movw	r22, r12
    553c:	0e 94 de 32 	call	0x65bc	; 0x65bc <__cmpsf2>
    5540:	20 e0       	ldi	r18, 0x00	; 0
    5542:	30 e0       	ldi	r19, 0x00	; 0
	{
		scale = sqrt(1.0 + (*mat).r2[1] - (*mat).r1[0] - (*mat).r3[2]) * 2.0;
    5544:	40 e8       	ldi	r20, 0x80	; 128
    5546:	5f e3       	ldi	r21, 0x3F	; 63
    5548:	87 ff       	sbrs	r24, 7
    554a:	4c c0       	rjmp	.+152    	; 0x55e4 <quaternion_from_matrix+0x29a>
		res.w = ((*mat).r3[1] - (*mat).r2[2]) / scale;
		res.x = 0.25 * scale;
		res.y = ((*mat).r1[1] + (*mat).r2[0]) / scale;
		res.z = ((*mat).r1[2] + (*mat).r3[0]) / scale;
	}
	else if ((*mat).r2[1] < (*mat).r3[2])
    554c:	c7 01       	movw	r24, r14
    554e:	b6 01       	movw	r22, r12
	{
		scale = sqrt(1.0 + (*mat).r2[1] - (*mat).r1[0] - (*mat).r3[2]) * 2.0;
    5550:	d1 d7       	rcall	.+4002   	; 0x64f4 <__addsf3>
    5552:	a5 01       	movw	r20, r10
    5554:	94 01       	movw	r18, r8
    5556:	cd d7       	rcall	.+3994   	; 0x64f2 <__subsf3>
    5558:	a3 01       	movw	r20, r6
    555a:	92 01       	movw	r18, r4
    555c:	ca d7       	rcall	.+3988   	; 0x64f2 <__subsf3>
    555e:	0e 94 d5 34 	call	0x69aa	; 0x69aa <sqrt>
    5562:	9b 01       	movw	r18, r22
    5564:	ac 01       	movw	r20, r24
    5566:	c6 d7       	rcall	.+3980   	; 0x64f4 <__addsf3>
    5568:	69 83       	std	Y+1, r22	; 0x01
    556a:	7a 83       	std	Y+2, r23	; 0x02
    556c:	8b 83       	std	Y+3, r24	; 0x03
    556e:	9c 83       	std	Y+4, r25	; 0x04
    5570:	f1 01       	movw	r30, r2
    5572:	20 8d       	ldd	r18, Z+24	; 0x18
    5574:	31 8d       	ldd	r19, Z+25	; 0x19
    5576:	42 8d       	ldd	r20, Z+26	; 0x1a
    5578:	53 8d       	ldd	r21, Z+27	; 0x1b
    557a:	60 85       	ldd	r22, Z+8	; 0x08
		res.w = ((*mat).r1[2] - (*mat).r3[0]) / scale;
    557c:	71 85       	ldd	r23, Z+9	; 0x09
    557e:	82 85       	ldd	r24, Z+10	; 0x0a
    5580:	93 85       	ldd	r25, Z+11	; 0x0b
    5582:	b7 d7       	rcall	.+3950   	; 0x64f2 <__subsf3>
    5584:	29 81       	ldd	r18, Y+1	; 0x01
    5586:	3a 81       	ldd	r19, Y+2	; 0x02
    5588:	4b 81       	ldd	r20, Y+3	; 0x03
    558a:	5c 81       	ldd	r21, Y+4	; 0x04
    558c:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    5590:	2b 01       	movw	r4, r22
    5592:	3c 01       	movw	r6, r24
    5594:	f1 01       	movw	r30, r2
    5596:	24 85       	ldd	r18, Z+12	; 0x0c
    5598:	35 85       	ldd	r19, Z+13	; 0x0d
    559a:	46 85       	ldd	r20, Z+14	; 0x0e
    559c:	57 85       	ldd	r21, Z+15	; 0x0f
    559e:	64 81       	ldd	r22, Z+4	; 0x04
    55a0:	75 81       	ldd	r23, Z+5	; 0x05
		res.x = ((*mat).r1[1] + (*mat).r2[0]) / scale;
    55a2:	86 81       	ldd	r24, Z+6	; 0x06
    55a4:	97 81       	ldd	r25, Z+7	; 0x07
    55a6:	a6 d7       	rcall	.+3916   	; 0x64f4 <__addsf3>
    55a8:	29 81       	ldd	r18, Y+1	; 0x01
    55aa:	3a 81       	ldd	r19, Y+2	; 0x02
    55ac:	4b 81       	ldd	r20, Y+3	; 0x03
    55ae:	5c 81       	ldd	r21, Y+4	; 0x04
    55b0:	0e 94 e5 32 	call	0x65ca	; 0x65ca <__divsf3>
    55b4:	4b 01       	movw	r8, r22
    55b6:	5c 01       	movw	r10, r24
    55b8:	20 e0       	ldi	r18, 0x00	; 0
    55ba:	30 e0       	ldi	r19, 0x00	; 0
    55bc:	40 e8       	ldi	r20, 0x80	; 128
    55be:	5e e3       	ldi	r21, 0x3E	; 62
    55c0:	69 81       	ldd	r22, Y+1	; 0x01
    55c2:	7a 81       	ldd	r23, Y+2	; 0x02
    55c4:	8b 81       	ldd	r24, Y+3	; 0x03
    55c6:	9c 81       	ldd	r25, Y+4	; 0x04
		res.y = 0.25 * scale;
    55c8:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    55cc:	6b 01       	movw	r12, r22
    55ce:	7c 01       	movw	r14, r24
    55d0:	f1 01       	movw	r30, r2
    55d2:	24 8d       	ldd	r18, Z+28	; 0x1c
    55d4:	35 8d       	ldd	r19, Z+29	; 0x1d
    55d6:	46 8d       	ldd	r20, Z+30	; 0x1e
    55d8:	57 8d       	ldd	r21, Z+31	; 0x1f
    55da:	64 89       	ldd	r22, Z+20	; 0x14
    55dc:	75 89       	ldd	r23, Z+21	; 0x15
    55de:	86 89       	ldd	r24, Z+22	; 0x16
		res.z = ((*mat).r2[2] + (*mat).r3[1]) / scale;
    55e0:	97 89       	ldd	r25, Z+23	; 0x17
    55e2:	a0 cf       	rjmp	.-192    	; 0x5524 <quaternion_from_matrix+0x1da>
    55e4:	c3 01       	movw	r24, r6
    55e6:	b2 01       	movw	r22, r4
    55e8:	85 d7       	rcall	.+3850   	; 0x64f4 <__addsf3>
    55ea:	a5 01       	movw	r20, r10
    55ec:	94 01       	movw	r18, r8
    55ee:	81 d7       	rcall	.+3842   	; 0x64f2 <__subsf3>
    55f0:	a7 01       	movw	r20, r14
    55f2:	96 01       	movw	r18, r12
	}
	else
	{
		scale = sqrt(1.0 + (*mat).r3[2] - (*mat).r1[0] - (*mat).r2[1]) * 2.0;
    55f4:	7e d7       	rcall	.+3836   	; 0x64f2 <__subsf3>
    55f6:	0e 94 d5 34 	call	0x69aa	; 0x69aa <sqrt>
    55fa:	9b 01       	movw	r18, r22
    55fc:	ac 01       	movw	r20, r24
    55fe:	7a d7       	rcall	.+3828   	; 0x64f4 <__addsf3>
    5600:	69 83       	std	Y+1, r22	; 0x01
    5602:	7a 83       	std	Y+2, r23	; 0x02
    5604:	8b 83       	std	Y+3, r24	; 0x03
    5606:	9c 83       	std	Y+4, r25	; 0x04
    5608:	f1 01       	movw	r30, r2
    560a:	24 81       	ldd	r18, Z+4	; 0x04
    560c:	35 81       	ldd	r19, Z+5	; 0x05
    560e:	46 81       	ldd	r20, Z+6	; 0x06
    5610:	57 81       	ldd	r21, Z+7	; 0x07
    5612:	64 85       	ldd	r22, Z+12	; 0x0c
    5614:	75 85       	ldd	r23, Z+13	; 0x0d
    5616:	86 85       	ldd	r24, Z+14	; 0x0e
    5618:	97 85       	ldd	r25, Z+15	; 0x0f
    561a:	6b d7       	rcall	.+3798   	; 0x64f2 <__subsf3>
    561c:	29 81       	ldd	r18, Y+1	; 0x01
    561e:	3a 81       	ldd	r19, Y+2	; 0x02
		res.w = ((*mat).r2[0] - (*mat).r1[1]) / scale;
    5620:	4b 81       	ldd	r20, Y+3	; 0x03
    5622:	5c 81       	ldd	r21, Y+4	; 0x04
    5624:	d2 d7       	rcall	.+4004   	; 0x65ca <__divsf3>
    5626:	2b 01       	movw	r4, r22
    5628:	3c 01       	movw	r6, r24
    562a:	f1 01       	movw	r30, r2
    562c:	20 8d       	ldd	r18, Z+24	; 0x18
    562e:	31 8d       	ldd	r19, Z+25	; 0x19
    5630:	42 8d       	ldd	r20, Z+26	; 0x1a
    5632:	53 8d       	ldd	r21, Z+27	; 0x1b
    5634:	60 85       	ldd	r22, Z+8	; 0x08
    5636:	71 85       	ldd	r23, Z+9	; 0x09
    5638:	82 85       	ldd	r24, Z+10	; 0x0a
    563a:	93 85       	ldd	r25, Z+11	; 0x0b
    563c:	5b d7       	rcall	.+3766   	; 0x64f4 <__addsf3>
    563e:	29 81       	ldd	r18, Y+1	; 0x01
    5640:	3a 81       	ldd	r19, Y+2	; 0x02
    5642:	4b 81       	ldd	r20, Y+3	; 0x03
    5644:	5c 81       	ldd	r21, Y+4	; 0x04
		res.x = ((*mat).r1[2] + (*mat).r3[0]) / scale;
    5646:	c1 d7       	rcall	.+3970   	; 0x65ca <__divsf3>
    5648:	4b 01       	movw	r8, r22
    564a:	5c 01       	movw	r10, r24
    564c:	f1 01       	movw	r30, r2
    564e:	24 8d       	ldd	r18, Z+28	; 0x1c
    5650:	35 8d       	ldd	r19, Z+29	; 0x1d
    5652:	46 8d       	ldd	r20, Z+30	; 0x1e
    5654:	57 8d       	ldd	r21, Z+31	; 0x1f
    5656:	64 89       	ldd	r22, Z+20	; 0x14
    5658:	75 89       	ldd	r23, Z+21	; 0x15
    565a:	86 89       	ldd	r24, Z+22	; 0x16
    565c:	97 89       	ldd	r25, Z+23	; 0x17
    565e:	4a d7       	rcall	.+3732   	; 0x64f4 <__addsf3>
    5660:	29 81       	ldd	r18, Y+1	; 0x01
    5662:	3a 81       	ldd	r19, Y+2	; 0x02
    5664:	4b 81       	ldd	r20, Y+3	; 0x03
    5666:	5c 81       	ldd	r21, Y+4	; 0x04
    5668:	b0 d7       	rcall	.+3936   	; 0x65ca <__divsf3>
    566a:	6b 01       	movw	r12, r22
		res.y = ((*mat).r2[2] + (*mat).r3[1]) / scale;
    566c:	7c 01       	movw	r14, r24
    566e:	20 e0       	ldi	r18, 0x00	; 0
    5670:	30 e0       	ldi	r19, 0x00	; 0
    5672:	40 e8       	ldi	r20, 0x80	; 128
    5674:	5e e3       	ldi	r21, 0x3E	; 62
    5676:	69 81       	ldd	r22, Y+1	; 0x01
    5678:	7a 81       	ldd	r23, Y+2	; 0x02
    567a:	8b 81       	ldd	r24, Y+3	; 0x03
    567c:	9c 81       	ldd	r25, Y+4	; 0x04
    567e:	0e 94 68 34 	call	0x68d0	; 0x68d0 <__mulsf3>
    5682:	f8 01       	movw	r30, r16
    5684:	40 82       	st	Z, r4
    5686:	51 82       	std	Z+1, r5	; 0x01
    5688:	62 82       	std	Z+2, r6	; 0x02
    568a:	73 82       	std	Z+3, r7	; 0x03
    568c:	84 82       	std	Z+4, r8	; 0x04
    568e:	95 82       	std	Z+5, r9	; 0x05
    5690:	a6 82       	std	Z+6, r10	; 0x06
		res.z = 0.25 * scale;
    5692:	b7 82       	std	Z+7, r11	; 0x07
    5694:	c0 86       	std	Z+8, r12	; 0x08
    5696:	d1 86       	std	Z+9, r13	; 0x09
    5698:	e2 86       	std	Z+10, r14	; 0x0a
    569a:	f3 86       	std	Z+11, r15	; 0x0b
    569c:	64 87       	std	Z+12, r22	; 0x0c
    569e:	75 87       	std	Z+13, r23	; 0x0d
    56a0:	86 87       	std	Z+14, r24	; 0x0e
    56a2:	97 87       	std	Z+15, r25	; 0x0f
    56a4:	c8 01       	movw	r24, r16
	}

	return res;
    56a6:	0f 90       	pop	r0
    56a8:	0f 90       	pop	r0
    56aa:	0f 90       	pop	r0
    56ac:	0f 90       	pop	r0
    56ae:	df 91       	pop	r29
    56b0:	cf 91       	pop	r28
    56b2:	1f 91       	pop	r17
    56b4:	0f 91       	pop	r16
    56b6:	ff 90       	pop	r15
    56b8:	ef 90       	pop	r14
    56ba:	df 90       	pop	r13
    56bc:	cf 90       	pop	r12
    56be:	bf 90       	pop	r11
    56c0:	af 90       	pop	r10
    56c2:	9f 90       	pop	r9
    56c4:	8f 90       	pop	r8
    56c6:	7f 90       	pop	r7
}
    56c8:	6f 90       	pop	r6
    56ca:	5f 90       	pop	r5
    56cc:	4f 90       	pop	r4
    56ce:	3f 90       	pop	r3
    56d0:	2f 90       	pop	r2
    56d2:	08 95       	ret

000056d4 <buttons_init>:

#include "buttons/buttons.h"

void buttons_init(void) {
	//button ports init - input with pull up
	BUTTONS_DIR = 0x00; //analog port to input
    56d4:	10 ba       	out	0x10, r1	; 16
	BUTTONS_PORT |= 1 << BUTTON_TOP_PIN_NUM; //pull up PF6 to vcc - A1 on board
    56d6:	8e 9a       	sbi	0x11, 6	; 17
	BUTTONS_PORT |= 1 << BUTTON_FRONT_PIN_NUM; //pull up to vcc - A2 on board
    56d8:	8d 9a       	sbi	0x11, 5	; 17
	BUTTONS_PORT |= 1 << BUTTON_SIDE_PIN_NUM; //pull up to vcc - A3 on board
    56da:	8c 9a       	sbi	0x11, 4	; 17
    56dc:	08 95       	ret

000056de <buttons_read>:
}

void buttons_read(dataexchange_t *data) {
    56de:	fc 01       	movw	r30, r24
	(*data).btn = 0; //default
    56e0:	13 ae       	std	Z+59, r1	; 0x3b
	if ((BUTTONS_PIN & (1 << BUTTON_TOP)) == 0) (*data).btn |= 1 << BUTTON_TOP_BIN_POS; //& (1 << PF6) act as mask, put 1 on pos 2
    56e2:	7e 99       	sbic	0x0f, 6	; 15
    56e4:	02 c0       	rjmp	.+4      	; 0x56ea <buttons_read+0xc>
    56e6:	84 e0       	ldi	r24, 0x04	; 4
    56e8:	83 af       	std	Z+59, r24	; 0x3b
	if ((BUTTONS_PIN & (1 << BUTTON_FRONT)) == 0) (*data).btn |= 1 << BUTTON_FRONT_BIN_POS;
    56ea:	7d 99       	sbic	0x0f, 5	; 15
    56ec:	03 c0       	rjmp	.+6      	; 0x56f4 <buttons_read+0x16>
    56ee:	83 ad       	ldd	r24, Z+59	; 0x3b
    56f0:	81 60       	ori	r24, 0x01	; 1
    56f2:	83 af       	std	Z+59, r24	; 0x3b
	if ((BUTTONS_PIN & (1 << BUTTON_SIDE)) == 0) (*data).btn |= 1 << BUTTON_SIDE_BIN_POS;
    56f4:	7c 99       	sbic	0x0f, 4	; 15
    56f6:	03 c0       	rjmp	.+6      	; 0x56fe <buttons_read+0x20>
    56f8:	83 ad       	ldd	r24, Z+59	; 0x3b
    56fa:	82 60       	ori	r24, 0x02	; 2
    56fc:	83 af       	std	Z+59, r24	; 0x3b
    56fe:	08 95       	ret

00005700 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    5700:	84 b7       	in	r24, 0x34	; 52
    5702:	87 7f       	andi	r24, 0xF7	; 247
    5704:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    5706:	88 e1       	ldi	r24, 0x18	; 24
    5708:	0f b6       	in	r0, 0x3f	; 63
    570a:	f8 94       	cli
    570c:	80 93 60 00 	sts	0x0060, r24
    5710:	10 92 60 00 	sts	0x0060, r1
    5714:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    5716:	90 e0       	ldi	r25, 0x00	; 0
    5718:	80 e8       	ldi	r24, 0x80	; 128
    571a:	0f b6       	in	r0, 0x3f	; 63
    571c:	f8 94       	cli
    571e:	80 93 61 00 	sts	0x0061, r24
    5722:	90 93 61 00 	sts	0x0061, r25
    5726:	0f be       	out	0x3f, r0	; 63
			static inline void TWI_Init(const uint8_t Prescale,
			                            const uint8_t BitLength) ATTR_ALWAYS_INLINE;
			static inline void TWI_Init(const uint8_t Prescale,
			                            const uint8_t BitLength)
			{
				TWCR |= (1 << TWEN);
    5728:	ec eb       	ldi	r30, 0xBC	; 188
    572a:	f0 e0       	ldi	r31, 0x00	; 0
    572c:	80 81       	ld	r24, Z
    572e:	84 60       	ori	r24, 0x04	; 4
    5730:	80 83       	st	Z, r24
				TWSR  = Prescale;
    5732:	10 92 b9 00 	sts	0x00B9, r1
				TWBR  = BitLength;
    5736:	8c e0       	ldi	r24, 0x0C	; 12
    5738:	80 93 b8 00 	sts	0x00B8, r24
	/* Hardware Initialization */
	//i2c
	TWI_Init(TWI_BIT_PRESCALE_1, TWI_BITLENGTH_FROM_FREQ(1, 400000));

	//button ports init
	buttons_init();
    573c:	cb df       	rcall	.-106    	; 0x56d4 <buttons_init>
    573e:	e1 e8       	ldi	r30, 0x81	; 129

	//timer init
	TCCR1B |=(1<<CS10)|(1<<CS12);//prescaler 1024
    5740:	f0 e0       	ldi	r31, 0x00	; 0
    5742:	80 81       	ld	r24, Z
    5744:	85 60       	ori	r24, 0x05	; 5
    5746:	80 83       	st	Z, r24
    5748:	10 92 85 00 	sts	0x0085, r1
	TCNT1 = 0;//init counter
    574c:	10 92 84 00 	sts	0x0084, r1
    5750:	0e 94 4f 18 	call	0x309e	; 0x309e <display_init>
	    SCK (D0) - PORTB, PIN1 == PN(1, 1)
	    MOSI (D1) - PORTB, PIN2
	    RES	(RST) - PORTB, PIN0
	    A0 (DC) - PORTB, PIN5 (OC1A/#A9)
	 */
	display_init();
    5754:	0e 94 77 18 	call	0x30ee	; 0x30ee <display_draw_logo>
	display_draw_logo();
    5758:	4e e0       	ldi	r20, 0x0E	; 14

	//sensors initialization
	adxl345_init(MEASURE_ON, RANGE_2G, ODR_800);
    575a:	60 e0       	ldi	r22, 0x00	; 0
    575c:	88 e0       	ldi	r24, 0x08	; 8
    575e:	0e 94 1b 13 	call	0x2636	; 0x2636 <adxl345_init>
    5762:	6f ec       	ldi	r22, 0xCF	; 207
	l3g4200d_init(FIFO_HI_LO_PASS, NORM_ODR_800);
    5764:	82 e0       	ldi	r24, 0x02	; 2
    5766:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <l3g4200d_init>
    576a:	48 e7       	ldi	r20, 0x78	; 120
	hmc5883l_init(MODE_CONT, GAIN_4_7, NORM_75HZ_8AV);
    576c:	60 ea       	ldi	r22, 0xA0	; 160
    576e:	80 e0       	ldi	r24, 0x00	; 0
    5770:	0e 94 1d 14 	call	0x283a	; 0x283a <hmc5883l_init>
    5774:	f7 c3       	rjmp	.+2030   	; 0x5f64 <USB_Init>

00005776 <EVENT_USB_Device_Connect>:

	USB_Init();
    5776:	08 95       	ret

00005778 <EVENT_USB_Device_Disconnect>:
    5778:	08 95       	ret

0000577a <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    577a:	42 e0       	ldi	r20, 0x02	; 2
    577c:	61 ec       	ldi	r22, 0xC1	; 193
    577e:	81 e0       	ldi	r24, 0x01	; 1
    5780:	2b d3       	rcall	.+1622   	; 0x5dd8 <Endpoint_ConfigureEndpoint_Prv>
    5782:	42 e0       	ldi	r20, 0x02	; 2
    5784:	60 ec       	ldi	r22, 0xC0	; 192
    5786:	82 e0       	ldi	r24, 0x02	; 2
    5788:	27 c3       	rjmp	.+1614   	; 0x5dd8 <Endpoint_ConfigureEndpoint_Prv>

0000578a <ProcessGenericHIDReport>:
    578a:	fc 01       	movw	r30, r24
    578c:	9c e3       	ldi	r25, 0x3C	; 60
		This is where you need to process reports sent from the host to the device. This
		function is called each time the host has sent a new report. DataArray is an array
		holding the report sent from the host.
	 */

	memcpy(&calib_params, DataArray, GENERIC_REPORT_SIZE);
    578e:	a5 e5       	ldi	r26, 0x55	; 85
    5790:	b2 e0       	ldi	r27, 0x02	; 2
    5792:	01 90       	ld	r0, Z+
    5794:	0d 92       	st	X+, r0
    5796:	9a 95       	dec	r25
    5798:	e1 f7       	brne	.-8      	; 0x5792 <ProcessGenericHIDReport+0x8>
	eeprom_write_block(&calib_params, &eeparams, sizeof(params_t)); //store
    579a:	40 e4       	ldi	r20, 0x40	; 64
    579c:	50 e0       	ldi	r21, 0x00	; 0
    579e:	60 e0       	ldi	r22, 0x00	; 0
    57a0:	70 e0       	ldi	r23, 0x00	; 0
    57a2:	85 e5       	ldi	r24, 0x55	; 85
    57a4:	92 e0       	ldi	r25, 0x02	; 2
    57a6:	0c 94 7a 35 	jmp	0x6af4	; 0x6af4 <__eewr_block_m32u4>

000057aa <CreateGenericHIDReport>:
/** Function to create the next report to send back to the host at the next reporting interval.
 *
 *  \param[out] DataArray  Pointer to a buffer where the next report data should be stored
 */
void CreateGenericHIDReport(uint8_t* DataArray)
{
    57aa:	cf 93       	push	r28
    57ac:	df 93       	push	r29
    57ae:	dc 01       	movw	r26, r24
		function is called each time the host is ready to accept a new report. DataArray is
		an array to hold the report to the host.
	 */

	//data unloading
	data.d2 = calib_params.offset_x;
    57b0:	e9 e1       	ldi	r30, 0x19	; 25
    57b2:	f2 e0       	ldi	r31, 0x02	; 2
    57b4:	c5 e5       	ldi	r28, 0x55	; 85
    57b6:	d2 e0       	ldi	r29, 0x02	; 2
    57b8:	4c 81       	ldd	r20, Y+4	; 0x04
    57ba:	5d 81       	ldd	r21, Y+5	; 0x05
    57bc:	6e 81       	ldd	r22, Y+6	; 0x06
    57be:	7f 81       	ldd	r23, Y+7	; 0x07
    57c0:	42 a7       	std	Z+42, r20	; 0x2a
    57c2:	53 a7       	std	Z+43, r21	; 0x2b
    57c4:	64 a7       	std	Z+44, r22	; 0x2c
    57c6:	75 a7       	std	Z+45, r23	; 0x2d
	data.d3 = calib_params.scale_z;
    57c8:	4c ad       	ldd	r20, Y+60	; 0x3c
    57ca:	5d ad       	ldd	r21, Y+61	; 0x3d
    57cc:	6e ad       	ldd	r22, Y+62	; 0x3e
    57ce:	7f ad       	ldd	r23, Y+63	; 0x3f
    57d0:	46 a7       	std	Z+46, r20	; 0x2e
    57d2:	57 a7       	std	Z+47, r21	; 0x2f
    57d4:	60 ab       	std	Z+48, r22	; 0x30
    57d6:	71 ab       	std	Z+49, r23	; 0x31
	memcpy(DataArray, &data, GENERIC_REPORT_SIZE);
    57d8:	9c e3       	ldi	r25, 0x3C	; 60
    57da:	01 90       	ld	r0, Z+
    57dc:	0d 92       	st	X+, r0
    57de:	9a 95       	dec	r25
    57e0:	e1 f7       	brne	.-8      	; 0x57da <CreateGenericHIDReport+0x30>
}
    57e2:	df 91       	pop	r29
    57e4:	cf 91       	pop	r28
    57e6:	08 95       	ret

000057e8 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    57e8:	cf 93       	push	r28
    57ea:	df 93       	push	r29
    57ec:	cd b7       	in	r28, 0x3d	; 61
    57ee:	de b7       	in	r29, 0x3e	; 62
    57f0:	c0 54       	subi	r28, 0x40	; 64
    57f2:	d1 09       	sbc	r29, r1
    57f4:	0f b6       	in	r0, 0x3f	; 63
    57f6:	f8 94       	cli
    57f8:	de bf       	out	0x3e, r29	; 62
    57fa:	0f be       	out	0x3f, r0	; 63
    57fc:	cd bf       	out	0x3d, r28	; 61
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
    57fe:	80 91 9b 02 	lds	r24, 0x029B
    5802:	81 30       	cpi	r24, 0x01	; 1
    5804:	19 f0       	breq	.+6      	; 0x580c <EVENT_USB_Device_ControlRequest+0x24>
    5806:	89 30       	cpi	r24, 0x09	; 9
    5808:	c1 f0       	breq	.+48     	; 0x583a <EVENT_USB_Device_ControlRequest+0x52>
    580a:	2d c0       	rjmp	.+90     	; 0x5866 <EVENT_USB_Device_ControlRequest+0x7e>
	{
	case HID_REQ_GetReport:
		if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    580c:	80 91 9a 02 	lds	r24, 0x029A
    5810:	81 3a       	cpi	r24, 0xA1	; 161
    5812:	49 f5       	brne	.+82     	; 0x5866 <EVENT_USB_Device_ControlRequest+0x7e>
		{
			uint8_t GenericData[GENERIC_REPORT_SIZE];
			CreateGenericHIDReport(GenericData);
    5814:	ce 01       	movw	r24, r28
    5816:	01 96       	adiw	r24, 0x01	; 1
    5818:	c8 df       	rcall	.-112    	; 0x57aa <CreateGenericHIDReport>
    581a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    581e:	87 7f       	andi	r24, 0xF7	; 247
    5820:	80 93 e8 00 	sts	0x00E8, r24
    5824:	6c e3       	ldi	r22, 0x3C	; 60

			Endpoint_ClearSETUP();

			/* Write the report data to the control endpoint */
			Endpoint_Write_Control_Stream_LE(&GenericData, sizeof(GenericData));
    5826:	70 e0       	ldi	r23, 0x00	; 0
    5828:	ce 01       	movw	r24, r28
    582a:	01 96       	adiw	r24, 0x01	; 1
    582c:	d9 d1       	rcall	.+946    	; 0x5be0 <Endpoint_Write_Control_Stream_LE>
    582e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5832:	8b 77       	andi	r24, 0x7B	; 123
    5834:	80 93 e8 00 	sts	0x00E8, r24
    5838:	16 c0       	rjmp	.+44     	; 0x5866 <EVENT_USB_Device_ControlRequest+0x7e>
    583a:	80 91 9a 02 	lds	r24, 0x029A
			Endpoint_ClearOUT();
		}

		break;
	case HID_REQ_SetReport:
		if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    583e:	81 32       	cpi	r24, 0x21	; 33
    5840:	91 f4       	brne	.+36     	; 0x5866 <EVENT_USB_Device_ControlRequest+0x7e>
    5842:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    5846:	87 7f       	andi	r24, 0xF7	; 247
    5848:	80 93 e8 00 	sts	0x00E8, r24
    584c:	60 e4       	ldi	r22, 0x40	; 64
    584e:	70 e0       	ldi	r23, 0x00	; 0
			uint8_t GenericData[INCOMING_REPORT_SIZE];

			Endpoint_ClearSETUP();

			/* Read the report data from the control endpoint */
			Endpoint_Read_Control_Stream_LE(&GenericData, sizeof(GenericData));
    5850:	ce 01       	movw	r24, r28
    5852:	01 96       	adiw	r24, 0x01	; 1
    5854:	24 d2       	rcall	.+1096   	; 0x5c9e <Endpoint_Read_Control_Stream_LE>
    5856:	80 91 e8 00 	lds	r24, 0x00E8
    585a:	8e 77       	andi	r24, 0x7E	; 126
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    585c:	80 93 e8 00 	sts	0x00E8, r24
    5860:	ce 01       	movw	r24, r28
    5862:	01 96       	adiw	r24, 0x01	; 1
    5864:	92 df       	rcall	.-220    	; 0x578a <ProcessGenericHIDReport>
			Endpoint_ClearIN();

			ProcessGenericHIDReport(GenericData);
    5866:	c0 5c       	subi	r28, 0xC0	; 192
    5868:	df 4f       	sbci	r29, 0xFF	; 255
    586a:	0f b6       	in	r0, 0x3f	; 63
    586c:	f8 94       	cli
		}

		break;
	}
}
    586e:	de bf       	out	0x3e, r29	; 62
    5870:	0f be       	out	0x3f, r0	; 63
    5872:	cd bf       	out	0x3d, r28	; 61
    5874:	df 91       	pop	r29
    5876:	cf 91       	pop	r28
    5878:	08 95       	ret

0000587a <HID_Task>:
    587a:	cf 93       	push	r28
    587c:	df 93       	push	r29
    587e:	cd b7       	in	r28, 0x3d	; 61
    5880:	de b7       	in	r29, 0x3e	; 62
	data.d3 = calib_params.scale_z;
	memcpy(DataArray, &data, GENERIC_REPORT_SIZE);
}

void HID_Task(void)
{
    5882:	c0 54       	subi	r28, 0x40	; 64
    5884:	d1 09       	sbc	r29, r1
    5886:	0f b6       	in	r0, 0x3f	; 63
    5888:	f8 94       	cli
    588a:	de bf       	out	0x3e, r29	; 62
    588c:	0f be       	out	0x3f, r0	; 63
    588e:	cd bf       	out	0x3d, r28	; 61
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
    5890:	80 91 99 02 	lds	r24, 0x0299
    5894:	84 30       	cpi	r24, 0x04	; 4
    5896:	81 f5       	brne	.+96     	; 0x58f8 <HID_Task+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5898:	82 e0       	ldi	r24, 0x02	; 2
    589a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    589e:	80 91 e8 00 	lds	r24, 0x00E8
		return;

	Endpoint_SelectEndpoint(GENERIC_OUT_EPADDR);

	/* Check to see if a packet has been sent from the host */
	if (Endpoint_IsOUTReceived())
    58a2:	82 ff       	sbrs	r24, 2
    58a4:	13 c0       	rjmp	.+38     	; 0x58cc <HID_Task+0x52>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    58a6:	80 91 e8 00 	lds	r24, 0x00E8
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
    58aa:	85 ff       	sbrs	r24, 5
    58ac:	0a c0       	rjmp	.+20     	; 0x58c2 <HID_Task+0x48>
		{
			/* Create a temporary buffer to hold the read in report from the host */
			uint8_t GenericData[INCOMING_REPORT_SIZE];

			/* Read Generic Report Data */
			Endpoint_Read_Stream_LE(&GenericData, sizeof(GenericData), NULL);
    58ae:	40 e0       	ldi	r20, 0x00	; 0
    58b0:	50 e0       	ldi	r21, 0x00	; 0
    58b2:	60 e4       	ldi	r22, 0x40	; 64
    58b4:	70 e0       	ldi	r23, 0x00	; 0
    58b6:	ce 01       	movw	r24, r28
    58b8:	01 96       	adiw	r24, 0x01	; 1
    58ba:	48 d1       	rcall	.+656    	; 0x5b4c <Endpoint_Read_Stream_LE>
    58bc:	ce 01       	movw	r24, r28

			/* Process Generic Report Data */
			ProcessGenericHIDReport(GenericData);
    58be:	01 96       	adiw	r24, 0x01	; 1
    58c0:	64 df       	rcall	.-312    	; 0x578a <ProcessGenericHIDReport>
    58c2:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    58c6:	8b 77       	andi	r24, 0x7B	; 123
    58c8:	80 93 e8 00 	sts	0x00E8, r24
    58cc:	81 e0       	ldi	r24, 0x01	; 1
    58ce:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    58d2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    58d6:	80 ff       	sbrs	r24, 0
    58d8:	0f c0       	rjmp	.+30     	; 0x58f8 <HID_Task+0x7e>
	}

	Endpoint_SelectEndpoint(GENERIC_IN_EPADDR);

	/* Check to see if the host is ready to accept another packet */
	if (Endpoint_IsINReady())
    58da:	ce 01       	movw	r24, r28
    58dc:	01 96       	adiw	r24, 0x01	; 1
	{
		/* Create a temporary buffer to hold the report to send to the host */
		uint8_t GenericData[GENERIC_REPORT_SIZE];

		/* Create Generic Report Data */
		CreateGenericHIDReport(GenericData);
    58de:	65 df       	rcall	.-310    	; 0x57aa <CreateGenericHIDReport>
    58e0:	40 e0       	ldi	r20, 0x00	; 0
    58e2:	50 e0       	ldi	r21, 0x00	; 0
    58e4:	6c e3       	ldi	r22, 0x3C	; 60

		/* Write Generic Report Data */
		Endpoint_Write_Stream_LE(&GenericData, sizeof(GenericData), NULL);
    58e6:	70 e0       	ldi	r23, 0x00	; 0
    58e8:	ce 01       	movw	r24, r28
    58ea:	01 96       	adiw	r24, 0x01	; 1
    58ec:	e5 d0       	rcall	.+458    	; 0x5ab8 <Endpoint_Write_Stream_LE>
    58ee:	80 91 e8 00 	lds	r24, 0x00E8
    58f2:	8e 77       	andi	r24, 0x7E	; 126
    58f4:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    58f8:	c0 5c       	subi	r28, 0xC0	; 192
    58fa:	df 4f       	sbci	r29, 0xFF	; 255
    58fc:	0f b6       	in	r0, 0x3f	; 63
    58fe:	f8 94       	cli

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
    5900:	de bf       	out	0x3e, r29	; 62
    5902:	0f be       	out	0x3f, r0	; 63
    5904:	cd bf       	out	0x3d, r28	; 61
    5906:	df 91       	pop	r29
    5908:	cf 91       	pop	r28
    590a:	08 95       	ret

0000590c <get_timer_ms>:
    590c:	8f b7       	in	r24, 0x3f	; 63
    590e:	f8 94       	cli
    5910:	60 91 84 00 	lds	r22, 0x0084

	/* Save global interrupt flag */
	sreg = SREG;
	/* Disable interrupts */
	cli();
	m = TCNT1;
    5914:	70 91 85 00 	lds	r23, 0x0085
	m *= 0.064;//multiplied by amount of msec per tick for 16MHz ((1sec/(16000000/1024))*1000 = usec)
	/* Restore global interrupt flag */
	SREG = sreg;
    5918:	8f bf       	out	0x3f, r24	; 63
	/* Save global interrupt flag */
	sreg = SREG;
	/* Disable interrupts */
	cli();
	m = TCNT1;
	m *= 0.064;//multiplied by amount of msec per tick for 16MHz ((1sec/(16000000/1024))*1000 = usec)
    591a:	80 e0       	ldi	r24, 0x00	; 0
    591c:	90 e0       	ldi	r25, 0x00	; 0
    591e:	e9 d6       	rcall	.+3538   	; 0x66f2 <__floatunsisf>
    5920:	2f e6       	ldi	r18, 0x6F	; 111
    5922:	32 e1       	ldi	r19, 0x12	; 18
    5924:	43 e8       	ldi	r20, 0x83	; 131
    5926:	5d e3       	ldi	r21, 0x3D	; 61
    5928:	d3 d7       	rcall	.+4006   	; 0x68d0 <__mulsf3>
    592a:	b7 c6       	rjmp	.+3438   	; 0x669a <__fixunssfsi>

0000592c <main>:
    592c:	cf 93       	push	r28
    592e:	df 93       	push	r29
    5930:	cd b7       	in	r28, 0x3d	; 61
	/* Restore global interrupt flag */
	SREG = sreg;

	return m;
}
    5932:	de b7       	in	r29, 0x3e	; 62
float t_period;

unsigned long get_timer_ms(void);//get timer value in milliseconds

int main(void)
{
    5934:	60 97       	sbiw	r28, 0x10	; 16
    5936:	0f b6       	in	r0, 0x3f	; 63
    5938:	f8 94       	cli
    593a:	de bf       	out	0x3e, r29	; 62
    593c:	0f be       	out	0x3f, r0	; 63
    593e:	cd bf       	out	0x3d, r28	; 61

	SetupHardware();
    5940:	df de       	rcall	.-578    	; 0x5700 <SetupHardware>
    5942:	65 e5       	ldi	r22, 0x55	; 85

	data_init(&data, &calib_params); //put some values into structure for testing
    5944:	72 e0       	ldi	r23, 0x02	; 2
    5946:	89 e1       	ldi	r24, 0x19	; 25
    5948:	92 e0       	ldi	r25, 0x02	; 2
    594a:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <data_init>
    594e:	45 e5       	ldi	r20, 0x55	; 85
	ahrs_init(&data, &u8g, &calib_params);
    5950:	52 e0       	ldi	r21, 0x02	; 2
    5952:	62 ed       	ldi	r22, 0xD2	; 210
    5954:	71 e0       	ldi	r23, 0x01	; 1
    5956:	89 e1       	ldi	r24, 0x19	; 25
    5958:	92 e0       	ldi	r25, 0x02	; 2
    595a:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <ahrs_init>
    595e:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    5960:	80 91 0d 02 	lds	r24, 0x020D
	GlobalInterruptEnable();

	for (;;)
	{
		//time between updates
		timer_old = timer;
    5964:	90 91 0e 02 	lds	r25, 0x020E
    5968:	a0 91 0f 02 	lds	r26, 0x020F
    596c:	b0 91 10 02 	lds	r27, 0x0210
    5970:	80 93 15 02 	sts	0x0215, r24
    5974:	90 93 16 02 	sts	0x0216, r25
    5978:	a0 93 17 02 	sts	0x0217, r26
    597c:	b0 93 18 02 	sts	0x0218, r27
    5980:	c5 df       	rcall	.-118    	; 0x590c <get_timer_ms>
		timer = get_timer_ms();
    5982:	60 93 0d 02 	sts	0x020D, r22
    5986:	70 93 0e 02 	sts	0x020E, r23
    598a:	80 93 0f 02 	sts	0x020F, r24
    598e:	90 93 10 02 	sts	0x0210, r25
    5992:	00 91 15 02 	lds	r16, 0x0215
		if (timer > timer_old) {
    5996:	10 91 16 02 	lds	r17, 0x0216
    599a:	20 91 17 02 	lds	r18, 0x0217
    599e:	30 91 18 02 	lds	r19, 0x0218
    59a2:	06 17       	cp	r16, r22
    59a4:	17 07       	cpc	r17, r23
    59a6:	28 07       	cpc	r18, r24
    59a8:	39 07       	cpc	r19, r25
    59aa:	98 f4       	brcc	.+38     	; 0x59d2 <main+0xa6>
    59ac:	60 1b       	sub	r22, r16
    59ae:	71 0b       	sbc	r23, r17
			t_period = (timer - timer_old) / 1000.0; //in seconds
    59b0:	82 0b       	sbc	r24, r18
    59b2:	93 0b       	sbc	r25, r19
    59b4:	9e d6       	rcall	.+3388   	; 0x66f2 <__floatunsisf>
    59b6:	20 e0       	ldi	r18, 0x00	; 0
    59b8:	30 e0       	ldi	r19, 0x00	; 0
    59ba:	4a e7       	ldi	r20, 0x7A	; 122
    59bc:	54 e4       	ldi	r21, 0x44	; 68
    59be:	05 d6       	rcall	.+3082   	; 0x65ca <__divsf3>
    59c0:	60 93 11 02 	sts	0x0211, r22
    59c4:	70 93 12 02 	sts	0x0212, r23
    59c8:	80 93 13 02 	sts	0x0213, r24
    59cc:	90 93 14 02 	sts	0x0214, r25
    59d0:	08 c0       	rjmp	.+16     	; 0x59e2 <main+0xb6>
    59d2:	10 92 11 02 	sts	0x0211, r1
    59d6:	10 92 12 02 	sts	0x0212, r1
		}
		else
			t_period = 0;
    59da:	10 92 13 02 	sts	0x0213, r1
    59de:	10 92 14 02 	sts	0x0214, r1
    59e2:	80 91 11 02 	lds	r24, 0x0211
    59e6:	90 91 12 02 	lds	r25, 0x0212
		data.time_period = t_period;
    59ea:	a0 91 13 02 	lds	r26, 0x0213
    59ee:	b0 91 14 02 	lds	r27, 0x0214
    59f2:	80 93 3b 02 	sts	0x023B, r24
    59f6:	90 93 3c 02 	sts	0x023C, r25
    59fa:	a0 93 3d 02 	sts	0x023D, r26
    59fe:	b0 93 3e 02 	sts	0x023E, r27
    5a02:	89 e1       	ldi	r24, 0x19	; 25
    5a04:	92 e0       	ldi	r25, 0x02	; 2
    5a06:	0e 94 52 13 	call	0x26a4	; 0x26a4 <adxl345_read>

		//read data - sensors
		adxl345_read(&data); //accelerometer read
    5a0a:	89 e1       	ldi	r24, 0x19	; 25
    5a0c:	92 e0       	ldi	r25, 0x02	; 2
    5a0e:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <l3g4200d_read_seq>
		l3g4200d_read_seq(&data); //gyroscope read
    5a12:	89 e1       	ldi	r24, 0x19	; 25
    5a14:	92 e0       	ldi	r25, 0x02	; 2
    5a16:	0e 94 53 14 	call	0x28a6	; 0x28a6 <hmc5883l_read>
		hmc5883l_read(&data); //magnetometer read
    5a1a:	89 e1       	ldi	r24, 0x19	; 25
    5a1c:	92 e0       	ldi	r25, 0x02	; 2
    5a1e:	5f de       	rcall	.-834    	; 0x56de <buttons_read>
    5a20:	69 e1       	ldi	r22, 0x19	; 25

		//buttons
		buttons_read(&data);
    5a22:	72 e0       	ldi	r23, 0x02	; 2
    5a24:	ce 01       	movw	r24, r28
    5a26:	01 96       	adiw	r24, 0x01	; 1
    5a28:	0e 94 6e 24 	call	0x48dc	; 0x48dc <ahrs_orientation>

		//compute
		//ahrs_orientation_from_gyro(&data);
		ahrs_orientation(&data);
    5a2c:	26 df       	rcall	.-436    	; 0x587a <HID_Task>
    5a2e:	c6 d4       	rcall	.+2444   	; 0x63bc <USB_USBTask>
    5a30:	97 cf       	rjmp	.-210    	; 0x5960 <main+0x34>

00005a32 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
    5a32:	29 2f       	mov	r18, r25
    5a34:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    5a36:	23 30       	cpi	r18, 0x03	; 3
    5a38:	31 05       	cpc	r19, r1
    5a3a:	e1 f0       	breq	.+56     	; 0x5a74 <CALLBACK_USB_GetDescriptor+0x42>
    5a3c:	5c f4       	brge	.+22     	; 0x5a54 <CALLBACK_USB_GetDescriptor+0x22>
    5a3e:	21 30       	cpi	r18, 0x01	; 1
    5a40:	31 05       	cpc	r19, r1
    5a42:	99 f0       	breq	.+38     	; 0x5a6a <CALLBACK_USB_GetDescriptor+0x38>
    5a44:	22 30       	cpi	r18, 0x02	; 2
    5a46:	31 05       	cpc	r19, r1
    5a48:	79 f5       	brne	.+94     	; 0x5aa8 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    5a4a:	89 e2       	ldi	r24, 0x29	; 41
    5a4c:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    5a4e:	25 ed       	ldi	r18, 0xD5	; 213
    5a50:	38 e1       	ldi	r19, 0x18	; 24
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    5a52:	2e c0       	rjmp	.+92     	; 0x5ab0 <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    5a54:	21 32       	cpi	r18, 0x21	; 33
    5a56:	31 05       	cpc	r19, r1
    5a58:	11 f1       	breq	.+68     	; 0x5a9e <CALLBACK_USB_GetDescriptor+0x6c>
    5a5a:	22 32       	cpi	r18, 0x22	; 34
    5a5c:	31 05       	cpc	r19, r1
    5a5e:	21 f5       	brne	.+72     	; 0x5aa8 <CALLBACK_USB_GetDescriptor+0x76>
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
    5a60:	80 e2       	ldi	r24, 0x20	; 32
    5a62:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &GenericReport;
    5a64:	20 e1       	ldi	r18, 0x10	; 16
    5a66:	39 e1       	ldi	r19, 0x19	; 25
			Size    = sizeof(GenericReport);
			break;
    5a68:	23 c0       	rjmp	.+70     	; 0x5ab0 <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    5a6a:	82 e1       	ldi	r24, 0x12	; 18
    5a6c:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    5a6e:	2e ef       	ldi	r18, 0xFE	; 254
    5a70:	38 e1       	ldi	r19, 0x18	; 24
    5a72:	1e c0       	rjmp	.+60     	; 0x5ab0 <CALLBACK_USB_GetDescriptor+0x7e>
    5a74:	99 27       	eor	r25, r25
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    5a76:	81 30       	cpi	r24, 0x01	; 1
    5a78:	91 05       	cpc	r25, r1
    5a7a:	41 f0       	breq	.+16     	; 0x5a8c <CALLBACK_USB_GetDescriptor+0x5a>
    5a7c:	82 30       	cpi	r24, 0x02	; 2
    5a7e:	91 05       	cpc	r25, r1
    5a80:	41 f0       	breq	.+16     	; 0x5a92 <CALLBACK_USB_GetDescriptor+0x60>
    5a82:	89 2b       	or	r24, r25
    5a84:	89 f4       	brne	.+34     	; 0x5aa8 <CALLBACK_USB_GetDescriptor+0x76>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    5a86:	e1 ed       	ldi	r30, 0xD1	; 209
    5a88:	f8 e1       	ldi	r31, 0x18	; 24
    5a8a:	05 c0       	rjmp	.+10     	; 0x5a96 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    5a8c:	e7 eb       	ldi	r30, 0xB7	; 183
    5a8e:	f8 e1       	ldi	r31, 0x18	; 24
    5a90:	02 c0       	rjmp	.+4      	; 0x5a96 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    5a92:	e9 e8       	ldi	r30, 0x89	; 137
    5a94:	f8 e1       	ldi	r31, 0x18	; 24
    5a96:	84 91       	lpm	r24, Z
    5a98:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    5a9a:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    5a9c:	09 c0       	rjmp	.+18     	; 0x5ab0 <CALLBACK_USB_GetDescriptor+0x7e>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
    5a9e:	89 e0       	ldi	r24, 0x09	; 9
    5aa0:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_GenericHID;
    5aa2:	27 ee       	ldi	r18, 0xE7	; 231
    5aa4:	38 e1       	ldi	r19, 0x18	; 24
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
    5aa6:	04 c0       	rjmp	.+8      	; 0x5ab0 <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    5aa8:	80 e0       	ldi	r24, 0x00	; 0
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    5aac:	20 e0       	ldi	r18, 0x00	; 0
    5aae:	30 e0       	ldi	r19, 0x00	; 0
			Address = &GenericReport;
			Size    = sizeof(GenericReport);
			break;
	}

	*DescriptorAddress = Address;
    5ab0:	fa 01       	movw	r30, r20
    5ab2:	31 83       	std	Z+1, r19	; 0x01
    5ab4:	20 83       	st	Z, r18
	return Size;
}
    5ab6:	08 95       	ret

00005ab8 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    5ab8:	cf 92       	push	r12
    5aba:	df 92       	push	r13
    5abc:	ef 92       	push	r14
    5abe:	ff 92       	push	r15
    5ac0:	0f 93       	push	r16
    5ac2:	1f 93       	push	r17
    5ac4:	cf 93       	push	r28
    5ac6:	df 93       	push	r29
    5ac8:	ec 01       	movw	r28, r24
    5aca:	8b 01       	movw	r16, r22
    5acc:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    5ace:	d8 d1       	rcall	.+944    	; 0x5e80 <Endpoint_WaitUntilReady>
    5ad0:	81 11       	cpse	r24, r1
    5ad2:	33 c0       	rjmp	.+102    	; 0x5b3a <Endpoint_Write_Stream_LE+0x82>
    5ad4:	e1 14       	cp	r14, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    5ad6:	f1 04       	cpc	r15, r1
    5ad8:	39 f0       	breq	.+14     	; 0x5ae8 <Endpoint_Write_Stream_LE+0x30>
    5ada:	f7 01       	movw	r30, r14
	{
		Length -= *BytesProcessed;
    5adc:	80 81       	ld	r24, Z
    5ade:	91 81       	ldd	r25, Z+1	; 0x01
    5ae0:	08 1b       	sub	r16, r24
    5ae2:	19 0b       	sbc	r17, r25
    5ae4:	c8 0f       	add	r28, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    5ae6:	d9 1f       	adc	r29, r25
    5ae8:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    5aea:	d1 2c       	mov	r13, r1
    5aec:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    5aee:	11 05       	cpc	r17, r1
    5af0:	19 f1       	breq	.+70     	; 0x5b38 <Endpoint_Write_Stream_LE+0x80>
    5af2:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    5af6:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    5af8:	16 c0       	rjmp	.+44     	; 0x5b26 <Endpoint_Write_Stream_LE+0x6e>
    5afa:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5afe:	8e 77       	andi	r24, 0x7E	; 126
    5b00:	80 93 e8 00 	sts	0x00E8, r24
    5b04:	5b d4       	rcall	.+2230   	; 0x63bc <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    5b06:	e1 14       	cp	r14, r1
    5b08:	f1 04       	cpc	r15, r1
			#endif

			if (BytesProcessed != NULL)
    5b0a:	49 f0       	breq	.+18     	; 0x5b1e <Endpoint_Write_Stream_LE+0x66>
    5b0c:	f7 01       	movw	r30, r14
    5b0e:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
    5b10:	91 81       	ldd	r25, Z+1	; 0x01
    5b12:	c8 0e       	add	r12, r24
    5b14:	d9 1e       	adc	r13, r25
    5b16:	d1 82       	std	Z+1, r13	; 0x01
    5b18:	c0 82       	st	Z, r12
    5b1a:	85 e0       	ldi	r24, 0x05	; 5
    5b1c:	0e c0       	rjmp	.+28     	; 0x5b3a <Endpoint_Write_Stream_LE+0x82>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    5b1e:	b0 d1       	rcall	.+864    	; 0x5e80 <Endpoint_WaitUntilReady>
    5b20:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    5b22:	21 f3       	breq	.-56     	; 0x5aec <Endpoint_Write_Stream_LE+0x34>
    5b24:	0a c0       	rjmp	.+20     	; 0x5b3a <Endpoint_Write_Stream_LE+0x82>
    5b26:	89 91       	ld	r24, Y+
    5b28:	80 93 f1 00 	sts	0x00F1, r24
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    5b2c:	01 50       	subi	r16, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    5b2e:	11 09       	sbc	r17, r1
    5b30:	ff ef       	ldi	r31, 0xFF	; 255
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    5b32:	cf 1a       	sub	r12, r31
    5b34:	df 0a       	sbc	r13, r31
			BytesInTransfer++;
    5b36:	da cf       	rjmp	.-76     	; 0x5aec <Endpoint_Write_Stream_LE+0x34>
    5b38:	80 e0       	ldi	r24, 0x00	; 0
    5b3a:	df 91       	pop	r29
    5b3c:	cf 91       	pop	r28
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    5b3e:	1f 91       	pop	r17
}
    5b40:	0f 91       	pop	r16
    5b42:	ff 90       	pop	r15
    5b44:	ef 90       	pop	r14
    5b46:	df 90       	pop	r13
    5b48:	cf 90       	pop	r12
    5b4a:	08 95       	ret

00005b4c <Endpoint_Read_Stream_LE>:
    5b4c:	cf 92       	push	r12
    5b4e:	df 92       	push	r13
    5b50:	ef 92       	push	r14
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    5b52:	ff 92       	push	r15
    5b54:	0f 93       	push	r16
    5b56:	1f 93       	push	r17
    5b58:	cf 93       	push	r28
    5b5a:	df 93       	push	r29
    5b5c:	ec 01       	movw	r28, r24
    5b5e:	8b 01       	movw	r16, r22
    5b60:	7a 01       	movw	r14, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    5b62:	8e d1       	rcall	.+796    	; 0x5e80 <Endpoint_WaitUntilReady>
    5b64:	81 11       	cpse	r24, r1
    5b66:	33 c0       	rjmp	.+102    	; 0x5bce <Endpoint_Read_Stream_LE+0x82>
    5b68:	e1 14       	cp	r14, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
    5b6a:	f1 04       	cpc	r15, r1
    5b6c:	39 f0       	breq	.+14     	; 0x5b7c <Endpoint_Read_Stream_LE+0x30>
    5b6e:	f7 01       	movw	r30, r14
	{
		Length -= *BytesProcessed;
    5b70:	80 81       	ld	r24, Z
    5b72:	91 81       	ldd	r25, Z+1	; 0x01
    5b74:	08 1b       	sub	r16, r24
    5b76:	19 0b       	sbc	r17, r25
    5b78:	c8 0f       	add	r28, r24
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    5b7a:	d9 1f       	adc	r29, r25
    5b7c:	c1 2c       	mov	r12, r1

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    5b7e:	d1 2c       	mov	r13, r1
    5b80:	01 15       	cp	r16, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    5b82:	11 05       	cpc	r17, r1
    5b84:	19 f1       	breq	.+70     	; 0x5bcc <Endpoint_Read_Stream_LE+0x80>
    5b86:	80 91 e8 00 	lds	r24, 0x00E8
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    5b8a:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    5b8c:	16 c0       	rjmp	.+44     	; 0x5bba <Endpoint_Read_Stream_LE+0x6e>
    5b8e:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5b92:	8b 77       	andi	r24, 0x7B	; 123
    5b94:	80 93 e8 00 	sts	0x00E8, r24
    5b98:	11 d4       	rcall	.+2082   	; 0x63bc <USB_USBTask>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
    5b9a:	e1 14       	cp	r14, r1
    5b9c:	f1 04       	cpc	r15, r1
			#endif

			if (BytesProcessed != NULL)
    5b9e:	49 f0       	breq	.+18     	; 0x5bb2 <Endpoint_Read_Stream_LE+0x66>
    5ba0:	f7 01       	movw	r30, r14
    5ba2:	80 81       	ld	r24, Z
			{
				*BytesProcessed += BytesInTransfer;
    5ba4:	91 81       	ldd	r25, Z+1	; 0x01
    5ba6:	c8 0e       	add	r12, r24
    5ba8:	d9 1e       	adc	r13, r25
    5baa:	d1 82       	std	Z+1, r13	; 0x01
    5bac:	c0 82       	st	Z, r12
    5bae:	85 e0       	ldi	r24, 0x05	; 5
    5bb0:	0e c0       	rjmp	.+28     	; 0x5bce <Endpoint_Read_Stream_LE+0x82>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    5bb2:	66 d1       	rcall	.+716    	; 0x5e80 <Endpoint_WaitUntilReady>
    5bb4:	88 23       	and	r24, r24
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    5bb6:	21 f3       	breq	.-56     	; 0x5b80 <Endpoint_Read_Stream_LE+0x34>
    5bb8:	0a c0       	rjmp	.+20     	; 0x5bce <Endpoint_Read_Stream_LE+0x82>
    5bba:	80 91 f1 00 	lds	r24, 0x00F1
    5bbe:	89 93       	st	Y+, r24
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    5bc0:	01 50       	subi	r16, 0x01	; 1
    5bc2:	11 09       	sbc	r17, r1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    5bc4:	ff ef       	ldi	r31, 0xFF	; 255
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    5bc6:	cf 1a       	sub	r12, r31
    5bc8:	df 0a       	sbc	r13, r31
			BytesInTransfer++;
    5bca:	da cf       	rjmp	.-76     	; 0x5b80 <Endpoint_Read_Stream_LE+0x34>
    5bcc:	80 e0       	ldi	r24, 0x00	; 0
    5bce:	df 91       	pop	r29
    5bd0:	cf 91       	pop	r28
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    5bd2:	1f 91       	pop	r17
}
    5bd4:	0f 91       	pop	r16
    5bd6:	ff 90       	pop	r15
    5bd8:	ef 90       	pop	r14
    5bda:	df 90       	pop	r13
    5bdc:	cf 90       	pop	r12
    5bde:	08 95       	ret

00005be0 <Endpoint_Write_Control_Stream_LE>:
    5be0:	20 91 a0 02 	lds	r18, 0x02A0
    5be4:	30 91 a1 02 	lds	r19, 0x02A1
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    5be8:	26 17       	cp	r18, r22
    5bea:	37 07       	cpc	r19, r23
    5bec:	48 f0       	brcs	.+18     	; 0x5c00 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    5bee:	61 15       	cp	r22, r1
    5bf0:	71 05       	cpc	r23, r1
    5bf2:	39 f4       	brne	.+14     	; 0x5c02 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5bf4:	20 91 e8 00 	lds	r18, 0x00E8
    5bf8:	2e 77       	andi	r18, 0x7E	; 126
    5bfa:	20 93 e8 00 	sts	0x00E8, r18
    5bfe:	01 c0       	rjmp	.+2      	; 0x5c02 <Endpoint_Write_Control_Stream_LE+0x22>
    5c00:	b9 01       	movw	r22, r18
    5c02:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    5c04:	61 15       	cp	r22, r1
    5c06:	71 05       	cpc	r23, r1
    5c08:	a9 f1       	breq	.+106    	; 0x5c74 <Endpoint_Write_Control_Stream_LE+0x94>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5c0a:	20 91 99 02 	lds	r18, 0x0299

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5c0e:	22 23       	and	r18, r18
    5c10:	09 f4       	brne	.+2      	; 0x5c14 <Endpoint_Write_Control_Stream_LE+0x34>
    5c12:	41 c0       	rjmp	.+130    	; 0x5c96 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5c14:	25 30       	cpi	r18, 0x05	; 5
    5c16:	09 f4       	brne	.+2      	; 0x5c1a <Endpoint_Write_Control_Stream_LE+0x3a>
    5c18:	40 c0       	rjmp	.+128    	; 0x5c9a <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5c1a:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    5c1e:	23 fd       	sbrc	r18, 3
    5c20:	38 c0       	rjmp	.+112    	; 0x5c92 <Endpoint_Write_Control_Stream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5c22:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    5c26:	22 fd       	sbrc	r18, 2
    5c28:	2e c0       	rjmp	.+92     	; 0x5c86 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5c2a:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    5c2e:	20 ff       	sbrs	r18, 0
    5c30:	e9 cf       	rjmp	.-46     	; 0x5c04 <Endpoint_Write_Control_Stream_LE+0x24>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    5c32:	40 91 f3 00 	lds	r20, 0x00F3
    5c36:	20 91 f2 00 	lds	r18, 0x00F2
    5c3a:	30 e0       	ldi	r19, 0x00	; 0
    5c3c:	34 2b       	or	r19, r20
    5c3e:	fc 01       	movw	r30, r24
    5c40:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    5c42:	61 15       	cp	r22, r1
    5c44:	71 05       	cpc	r23, r1
    5c46:	59 f0       	breq	.+22     	; 0x5c5e <Endpoint_Write_Control_Stream_LE+0x7e>
    5c48:	28 30       	cpi	r18, 0x08	; 8
    5c4a:	31 05       	cpc	r19, r1
    5c4c:	40 f4       	brcc	.+16     	; 0x5c5e <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    5c4e:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    5c50:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    5c54:	61 50       	subi	r22, 0x01	; 1
    5c56:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    5c58:	2f 5f       	subi	r18, 0xFF	; 255
    5c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    5c5c:	f1 cf       	rjmp	.-30     	; 0x5c40 <Endpoint_Write_Control_Stream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    5c5e:	41 e0       	ldi	r20, 0x01	; 1
    5c60:	28 30       	cpi	r18, 0x08	; 8
    5c62:	31 05       	cpc	r19, r1
    5c64:	09 f0       	breq	.+2      	; 0x5c68 <Endpoint_Write_Control_Stream_LE+0x88>
    5c66:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5c68:	20 91 e8 00 	lds	r18, 0x00E8
    5c6c:	2e 77       	andi	r18, 0x7E	; 126
    5c6e:	20 93 e8 00 	sts	0x00E8, r18
    5c72:	c8 cf       	rjmp	.-112    	; 0x5c04 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    5c74:	41 11       	cpse	r20, r1
    5c76:	c9 cf       	rjmp	.-110    	; 0x5c0a <Endpoint_Write_Control_Stream_LE+0x2a>
    5c78:	06 c0       	rjmp	.+12     	; 0x5c86 <Endpoint_Write_Control_Stream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5c7a:	80 91 99 02 	lds	r24, 0x0299

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5c7e:	88 23       	and	r24, r24
    5c80:	51 f0       	breq	.+20     	; 0x5c96 <Endpoint_Write_Control_Stream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5c82:	85 30       	cpi	r24, 0x05	; 5
    5c84:	51 f0       	breq	.+20     	; 0x5c9a <Endpoint_Write_Control_Stream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5c86:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    5c8a:	82 ff       	sbrs	r24, 2
    5c8c:	f6 cf       	rjmp	.-20     	; 0x5c7a <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    5c8e:	80 e0       	ldi	r24, 0x00	; 0
    5c90:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    5c92:	81 e0       	ldi	r24, 0x01	; 1
    5c94:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    5c96:	82 e0       	ldi	r24, 0x02	; 2
    5c98:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    5c9a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    5c9c:	08 95       	ret

00005c9e <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    5c9e:	61 15       	cp	r22, r1
    5ca0:	71 05       	cpc	r23, r1
    5ca2:	29 f4       	brne	.+10     	; 0x5cae <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5ca4:	20 91 e8 00 	lds	r18, 0x00E8
    5ca8:	2b 77       	andi	r18, 0x7B	; 123
    5caa:	20 93 e8 00 	sts	0x00E8, r18

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    5cae:	fc 01       	movw	r30, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    5cb0:	61 15       	cp	r22, r1
    5cb2:	71 05       	cpc	r23, r1
    5cb4:	41 f1       	breq	.+80     	; 0x5d06 <Endpoint_Read_Control_Stream_LE+0x68>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5cb6:	80 91 99 02 	lds	r24, 0x0299

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5cba:	88 23       	and	r24, r24
    5cbc:	61 f1       	breq	.+88     	; 0x5d16 <Endpoint_Read_Control_Stream_LE+0x78>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5cbe:	85 30       	cpi	r24, 0x05	; 5
    5cc0:	61 f1       	breq	.+88     	; 0x5d1a <Endpoint_Read_Control_Stream_LE+0x7c>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5cc2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    5cc6:	83 fd       	sbrc	r24, 3
    5cc8:	24 c0       	rjmp	.+72     	; 0x5d12 <Endpoint_Read_Control_Stream_LE+0x74>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5cca:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    5cce:	82 ff       	sbrs	r24, 2
    5cd0:	ef cf       	rjmp	.-34     	; 0x5cb0 <Endpoint_Read_Control_Stream_LE+0x12>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    5cd2:	20 91 f3 00 	lds	r18, 0x00F3
    5cd6:	80 91 f2 00 	lds	r24, 0x00F2
    5cda:	90 e0       	ldi	r25, 0x00	; 0
    5cdc:	92 2b       	or	r25, r18
		{
			while (Length && Endpoint_BytesInEndpoint())
    5cde:	89 2b       	or	r24, r25
    5ce0:	31 f0       	breq	.+12     	; 0x5cee <Endpoint_Read_Control_Stream_LE+0x50>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    5ce2:	80 91 f1 00 	lds	r24, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    5ce6:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    5ce8:	61 50       	subi	r22, 0x01	; 1
    5cea:	71 09       	sbc	r23, r1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    5cec:	91 f7       	brne	.-28     	; 0x5cd2 <Endpoint_Read_Control_Stream_LE+0x34>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5cee:	80 91 e8 00 	lds	r24, 0x00E8
    5cf2:	8b 77       	andi	r24, 0x7B	; 123
    5cf4:	80 93 e8 00 	sts	0x00E8, r24
    5cf8:	db cf       	rjmp	.-74     	; 0x5cb0 <Endpoint_Read_Control_Stream_LE+0x12>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5cfa:	80 91 99 02 	lds	r24, 0x0299

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5cfe:	88 23       	and	r24, r24
    5d00:	51 f0       	breq	.+20     	; 0x5d16 <Endpoint_Read_Control_Stream_LE+0x78>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5d02:	85 30       	cpi	r24, 0x05	; 5
    5d04:	51 f0       	breq	.+20     	; 0x5d1a <Endpoint_Read_Control_Stream_LE+0x7c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5d06:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    5d0a:	80 ff       	sbrs	r24, 0
    5d0c:	f6 cf       	rjmp	.-20     	; 0x5cfa <Endpoint_Read_Control_Stream_LE+0x5c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    5d0e:	80 e0       	ldi	r24, 0x00	; 0
    5d10:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    5d12:	81 e0       	ldi	r24, 0x01	; 1
    5d14:	08 95       	ret
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    5d16:	82 e0       	ldi	r24, 0x02	; 2
    5d18:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    5d1a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    5d1c:	08 95       	ret

00005d1e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    5d1e:	20 91 a0 02 	lds	r18, 0x02A0
    5d22:	30 91 a1 02 	lds	r19, 0x02A1
    5d26:	26 17       	cp	r18, r22
    5d28:	37 07       	cpc	r19, r23
    5d2a:	48 f0       	brcs	.+18     	; 0x5d3e <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    5d2c:	61 15       	cp	r22, r1
    5d2e:	71 05       	cpc	r23, r1
    5d30:	39 f4       	brne	.+14     	; 0x5d40 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5d32:	20 91 e8 00 	lds	r18, 0x00E8
    5d36:	2e 77       	andi	r18, 0x7E	; 126
    5d38:	20 93 e8 00 	sts	0x00E8, r18
    5d3c:	01 c0       	rjmp	.+2      	; 0x5d40 <Endpoint_Write_Control_PStream_LE+0x22>
    5d3e:	b9 01       	movw	r22, r18
    5d40:	fc 01       	movw	r30, r24
    5d42:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    5d44:	61 15       	cp	r22, r1
    5d46:	71 05       	cpc	r23, r1
    5d48:	91 f1       	breq	.+100    	; 0x5dae <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5d4a:	80 91 99 02 	lds	r24, 0x0299

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5d4e:	88 23       	and	r24, r24
    5d50:	09 f4       	brne	.+2      	; 0x5d54 <Endpoint_Write_Control_PStream_LE+0x36>
    5d52:	3e c0       	rjmp	.+124    	; 0x5dd0 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5d54:	85 30       	cpi	r24, 0x05	; 5
    5d56:	09 f4       	brne	.+2      	; 0x5d5a <Endpoint_Write_Control_PStream_LE+0x3c>
    5d58:	3d c0       	rjmp	.+122    	; 0x5dd4 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    5d5a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    5d5e:	83 fd       	sbrc	r24, 3
    5d60:	35 c0       	rjmp	.+106    	; 0x5dcc <Endpoint_Write_Control_PStream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5d62:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    5d66:	82 fd       	sbrc	r24, 2
    5d68:	2b c0       	rjmp	.+86     	; 0x5dc0 <Endpoint_Write_Control_PStream_LE+0xa2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5d6a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    5d6e:	80 ff       	sbrs	r24, 0
    5d70:	e9 cf       	rjmp	.-46     	; 0x5d44 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    5d72:	20 91 f3 00 	lds	r18, 0x00F3
    5d76:	80 91 f2 00 	lds	r24, 0x00F2
    5d7a:	90 e0       	ldi	r25, 0x00	; 0
    5d7c:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    5d7e:	61 15       	cp	r22, r1
    5d80:	71 05       	cpc	r23, r1
    5d82:	59 f0       	breq	.+22     	; 0x5d9a <Endpoint_Write_Control_PStream_LE+0x7c>
    5d84:	88 30       	cpi	r24, 0x08	; 8
    5d86:	91 05       	cpc	r25, r1
    5d88:	40 f4       	brcc	.+16     	; 0x5d9a <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    5d8a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    5d8c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    5d90:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    5d92:	61 50       	subi	r22, 0x01	; 1
    5d94:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    5d96:	01 96       	adiw	r24, 0x01	; 1
    5d98:	f2 cf       	rjmp	.-28     	; 0x5d7e <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    5d9a:	21 e0       	ldi	r18, 0x01	; 1
    5d9c:	08 97       	sbiw	r24, 0x08	; 8
    5d9e:	09 f0       	breq	.+2      	; 0x5da2 <Endpoint_Write_Control_PStream_LE+0x84>
    5da0:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5da2:	80 91 e8 00 	lds	r24, 0x00E8
    5da6:	8e 77       	andi	r24, 0x7E	; 126
    5da8:	80 93 e8 00 	sts	0x00E8, r24
    5dac:	cb cf       	rjmp	.-106    	; 0x5d44 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    5dae:	21 11       	cpse	r18, r1
    5db0:	cc cf       	rjmp	.-104    	; 0x5d4a <Endpoint_Write_Control_PStream_LE+0x2c>
    5db2:	06 c0       	rjmp	.+12     	; 0x5dc0 <Endpoint_Write_Control_PStream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5db4:	80 91 99 02 	lds	r24, 0x0299

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5db8:	88 23       	and	r24, r24
    5dba:	51 f0       	breq	.+20     	; 0x5dd0 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5dbc:	85 30       	cpi	r24, 0x05	; 5
    5dbe:	51 f0       	breq	.+20     	; 0x5dd4 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5dc0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    5dc4:	82 ff       	sbrs	r24, 2
    5dc6:	f6 cf       	rjmp	.-20     	; 0x5db4 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    5dc8:	80 e0       	ldi	r24, 0x00	; 0
    5dca:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    5dcc:	81 e0       	ldi	r24, 0x01	; 1
    5dce:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    5dd0:	82 e0       	ldi	r24, 0x02	; 2
    5dd2:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    5dd4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    5dd6:	08 95       	ret

00005dd8 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    5dd8:	98 2f       	mov	r25, r24
    5dda:	97 30       	cpi	r25, 0x07	; 7
    5ddc:	58 f5       	brcc	.+86     	; 0x5e34 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5dde:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    5de2:	98 17       	cp	r25, r24
    5de4:	39 f0       	breq	.+14     	; 0x5df4 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    5de6:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    5dea:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    5dee:	50 91 f0 00 	lds	r21, 0x00F0
    5df2:	03 c0       	rjmp	.+6      	; 0x5dfa <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    5df4:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    5df6:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    5df8:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    5dfa:	21 ff       	sbrs	r18, 1
    5dfc:	19 c0       	rjmp	.+50     	; 0x5e30 <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    5dfe:	30 91 eb 00 	lds	r19, 0x00EB
    5e02:	3e 7f       	andi	r19, 0xFE	; 254
    5e04:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    5e08:	30 91 ed 00 	lds	r19, 0x00ED
    5e0c:	3d 7f       	andi	r19, 0xFD	; 253
    5e0e:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    5e12:	30 91 eb 00 	lds	r19, 0x00EB
    5e16:	31 60       	ori	r19, 0x01	; 1
    5e18:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    5e1c:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    5e20:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    5e24:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    5e28:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    5e2c:	27 ff       	sbrs	r18, 7
    5e2e:	07 c0       	rjmp	.+14     	; 0x5e3e <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    5e30:	9f 5f       	subi	r25, 0xFF	; 255
    5e32:	d3 cf       	rjmp	.-90     	; 0x5dda <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5e34:	8f 70       	andi	r24, 0x0F	; 15
    5e36:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    5e3a:	81 e0       	ldi	r24, 0x01	; 1
    5e3c:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    5e3e:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    5e40:	08 95       	ret

00005e42 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    5e42:	80 91 9a 02 	lds	r24, 0x029A
    5e46:	87 ff       	sbrs	r24, 7
    5e48:	11 c0       	rjmp	.+34     	; 0x5e6c <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5e4a:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    5e4e:	82 fd       	sbrc	r24, 2
    5e50:	05 c0       	rjmp	.+10     	; 0x5e5c <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    5e52:	80 91 99 02 	lds	r24, 0x0299
    5e56:	81 11       	cpse	r24, r1
    5e58:	f8 cf       	rjmp	.-16     	; 0x5e4a <Endpoint_ClearStatusStage+0x8>
    5e5a:	11 c0       	rjmp	.+34     	; 0x5e7e <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5e5c:	80 91 e8 00 	lds	r24, 0x00E8
    5e60:	8b 77       	andi	r24, 0x7B	; 123
    5e62:	0b c0       	rjmp	.+22     	; 0x5e7a <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    5e64:	80 91 99 02 	lds	r24, 0x0299
    5e68:	88 23       	and	r24, r24
    5e6a:	49 f0       	breq	.+18     	; 0x5e7e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5e6c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    5e70:	80 ff       	sbrs	r24, 0
    5e72:	f8 cf       	rjmp	.-16     	; 0x5e64 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5e74:	80 91 e8 00 	lds	r24, 0x00E8
    5e78:	8e 77       	andi	r24, 0x7E	; 126
    5e7a:	80 93 e8 00 	sts	0x00E8, r24
    5e7e:	08 95       	ret

00005e80 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    5e80:	20 91 e4 00 	lds	r18, 0x00E4
    5e84:	30 91 e5 00 	lds	r19, 0x00E5
    5e88:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    5e8a:	40 91 ec 00 	lds	r20, 0x00EC
    5e8e:	84 2f       	mov	r24, r20
    5e90:	81 70       	andi	r24, 0x01	; 1
    5e92:	40 ff       	sbrs	r20, 0
    5e94:	22 c0       	rjmp	.+68     	; 0x5eda <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    5e96:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    5e9a:	80 fd       	sbrc	r24, 0
    5e9c:	1c c0       	rjmp	.+56     	; 0x5ed6 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    5e9e:	80 91 99 02 	lds	r24, 0x0299

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    5ea2:	88 23       	and	r24, r24
    5ea4:	91 f0       	breq	.+36     	; 0x5eca <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    5ea6:	85 30       	cpi	r24, 0x05	; 5
    5ea8:	91 f0       	breq	.+36     	; 0x5ece <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    5eaa:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    5eae:	85 fd       	sbrc	r24, 5
    5eb0:	10 c0       	rjmp	.+32     	; 0x5ed2 <Endpoint_WaitUntilReady+0x52>
    5eb2:	40 91 e4 00 	lds	r20, 0x00E4
    5eb6:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    5eba:	42 17       	cp	r20, r18
    5ebc:	53 07       	cpc	r21, r19
    5ebe:	29 f3       	breq	.-54     	; 0x5e8a <Endpoint_WaitUntilReady+0xa>
    5ec0:	9a 01       	movw	r18, r20
    5ec2:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    5ec4:	11 f7       	brne	.-60     	; 0x5e8a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    5ec6:	84 e0       	ldi	r24, 0x04	; 4
    5ec8:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    5eca:	82 e0       	ldi	r24, 0x02	; 2
    5ecc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    5ece:	83 e0       	ldi	r24, 0x03	; 3
    5ed0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    5ed2:	81 e0       	ldi	r24, 0x01	; 1
    5ed4:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    5ed6:	80 e0       	ldi	r24, 0x00	; 0
    5ed8:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5eda:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    5ede:	42 ff       	sbrs	r20, 2
    5ee0:	de cf       	rjmp	.-68     	; 0x5e9e <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    5ee2:	08 95       	ret

00005ee4 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    5ee4:	0f 93       	push	r16
    5ee6:	1f 93       	push	r17
    5ee8:	cf 93       	push	r28
    5eea:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    5eec:	4b d0       	rcall	.+150    	; 0x5f84 <USB_INT_DisableAllInterrupts>
    5eee:	52 d0       	rcall	.+164    	; 0x5f94 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    5ef0:	c8 ed       	ldi	r28, 0xD8	; 216
    5ef2:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    5ef4:	88 81       	ld	r24, Y
    5ef6:	8f 77       	andi	r24, 0x7F	; 127
    5ef8:	88 83       	st	Y, r24
    5efa:	88 81       	ld	r24, Y
    5efc:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    5efe:	88 83       	st	Y, r24
    5f00:	88 81       	ld	r24, Y
    5f02:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    5f04:	88 83       	st	Y, r24
    5f06:	19 bc       	out	0x29, r1	; 41
    5f08:	10 92 99 02 	sts	0x0299, r1
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    5f0c:	10 92 95 02 	sts	0x0295, r1
	USB_Device_ConfigurationNumber  = 0;
    5f10:	10 92 97 02 	sts	0x0297, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    5f14:	10 92 96 02 	sts	0x0296, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    5f18:	00 ee       	ldi	r16, 0xE0	; 224
    5f1a:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    5f1c:	f8 01       	movw	r30, r16
    5f1e:	80 81       	ld	r24, Z
    5f20:	8b 7f       	andi	r24, 0xFB	; 251
    5f22:	80 83       	st	Z, r24
    5f24:	88 81       	ld	r24, Y
    5f26:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    5f28:	88 83       	st	Y, r24
    5f2a:	42 e0       	ldi	r20, 0x02	; 2
    5f2c:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    5f2e:	80 e0       	ldi	r24, 0x00	; 0
    5f30:	53 df       	rcall	.-346    	; 0x5dd8 <Endpoint_ConfigureEndpoint_Prv>
    5f32:	e1 ee       	ldi	r30, 0xE1	; 225
    5f34:	f0 e0       	ldi	r31, 0x00	; 0
    5f36:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    5f38:	8e 7f       	andi	r24, 0xFE	; 254
    5f3a:	80 83       	st	Z, r24
    5f3c:	e2 ee       	ldi	r30, 0xE2	; 226
    5f3e:	f0 e0       	ldi	r31, 0x00	; 0
    5f40:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    5f42:	81 60       	ori	r24, 0x01	; 1
    5f44:	80 83       	st	Z, r24
    5f46:	80 81       	ld	r24, Z
    5f48:	88 60       	ori	r24, 0x08	; 8
    5f4a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    5f4c:	f8 01       	movw	r30, r16
    5f4e:	80 81       	ld	r24, Z
    5f50:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    5f52:	80 83       	st	Z, r24
    5f54:	88 81       	ld	r24, Y
    5f56:	80 61       	ori	r24, 0x10	; 16
    5f58:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    5f5a:	df 91       	pop	r29
    5f5c:	cf 91       	pop	r28
    5f5e:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    5f60:	0f 91       	pop	r16
    5f62:	08 95       	ret

00005f64 <USB_Init>:
    5f64:	e8 ed       	ldi	r30, 0xD8	; 216
    5f66:	f0 e0       	ldi	r31, 0x00	; 0
    5f68:	80 81       	ld	r24, Z
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    5f6a:	8f 7e       	andi	r24, 0xEF	; 239
    5f6c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    5f6e:	e7 ed       	ldi	r30, 0xD7	; 215
    5f70:	f0 e0       	ldi	r31, 0x00	; 0
    5f72:	80 81       	ld	r24, Z
    5f74:	81 60       	ori	r24, 0x01	; 1
    5f76:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    5f78:	84 e0       	ldi	r24, 0x04	; 4
    5f7a:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    5f7c:	81 e0       	ldi	r24, 0x01	; 1
    5f7e:	80 93 98 02 	sts	0x0298, r24

	USB_ResetInterface();
    5f82:	b0 cf       	rjmp	.-160    	; 0x5ee4 <USB_ResetInterface>

00005f84 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    5f84:	e8 ed       	ldi	r30, 0xD8	; 216
    5f86:	f0 e0       	ldi	r31, 0x00	; 0
    5f88:	80 81       	ld	r24, Z
    5f8a:	8e 7f       	andi	r24, 0xFE	; 254
    5f8c:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    5f8e:	10 92 e2 00 	sts	0x00E2, r1
    5f92:	08 95       	ret

00005f94 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    5f94:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    5f98:	10 92 e1 00 	sts	0x00E1, r1
    5f9c:	08 95       	ret

00005f9e <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    5f9e:	1f 92       	push	r1
    5fa0:	0f 92       	push	r0
    5fa2:	0f b6       	in	r0, 0x3f	; 63
    5fa4:	0f 92       	push	r0
    5fa6:	11 24       	eor	r1, r1
    5fa8:	2f 93       	push	r18
    5faa:	3f 93       	push	r19
    5fac:	4f 93       	push	r20
    5fae:	5f 93       	push	r21
    5fb0:	6f 93       	push	r22
    5fb2:	7f 93       	push	r23
    5fb4:	8f 93       	push	r24
    5fb6:	9f 93       	push	r25
    5fb8:	af 93       	push	r26
    5fba:	bf 93       	push	r27
    5fbc:	ef 93       	push	r30
    5fbe:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    5fc0:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    5fc4:	82 ff       	sbrs	r24, 2
    5fc6:	0a c0       	rjmp	.+20     	; 0x5fdc <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    5fc8:	80 91 e2 00 	lds	r24, 0x00E2
    5fcc:	82 ff       	sbrs	r24, 2
    5fce:	06 c0       	rjmp	.+12     	; 0x5fdc <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    5fd0:	80 91 e1 00 	lds	r24, 0x00E1
    5fd4:	8b 7f       	andi	r24, 0xFB	; 251
    5fd6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    5fda:	ef d1       	rcall	.+990    	; 0x63ba <USB_Event_Stub>
    5fdc:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    5fe0:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    5fe2:	1d c0       	rjmp	.+58     	; 0x601e <__vector_10+0x80>
    5fe4:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    5fe8:	80 ff       	sbrs	r24, 0
    5fea:	19 c0       	rjmp	.+50     	; 0x601e <__vector_10+0x80>
    5fec:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    5ff0:	8e 7f       	andi	r24, 0xFE	; 254
    5ff2:	80 93 da 00 	sts	0x00DA, r24
    5ff6:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    5ffa:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    5ffc:	0c c0       	rjmp	.+24     	; 0x6016 <__vector_10+0x78>
    5ffe:	80 e1       	ldi	r24, 0x10	; 16

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    6000:	89 bd       	out	0x29, r24	; 41
    6002:	82 e1       	ldi	r24, 0x12	; 18
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    6004:	89 bd       	out	0x29, r24	; 41
    6006:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    6008:	00 fe       	sbrs	r0, 0
    600a:	fd cf       	rjmp	.-6      	; 0x6006 <__vector_10+0x68>
    600c:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    600e:	80 93 99 02 	sts	0x0299, r24
    6012:	b1 db       	rcall	.-2206   	; 0x5776 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
    6014:	04 c0       	rjmp	.+8      	; 0x601e <__vector_10+0x80>
    6016:	19 bc       	out	0x29, r1	; 41
    6018:	10 92 99 02 	sts	0x0299, r1
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    601c:	ad db       	rcall	.-2214   	; 0x5778 <EVENT_USB_Device_Disconnect>
    601e:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
    6022:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    6024:	18 c0       	rjmp	.+48     	; 0x6056 <__vector_10+0xb8>
    6026:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    602a:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    602c:	14 c0       	rjmp	.+40     	; 0x6056 <__vector_10+0xb8>
    602e:	80 91 e2 00 	lds	r24, 0x00E2
    6032:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    6034:	80 93 e2 00 	sts	0x00E2, r24
    6038:	80 91 e2 00 	lds	r24, 0x00E2
    603c:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    603e:	80 93 e2 00 	sts	0x00E2, r24
    6042:	80 91 d8 00 	lds	r24, 0x00D8
    6046:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    6048:	80 93 d8 00 	sts	0x00D8, r24
    604c:	19 bc       	out	0x29, r1	; 41
    604e:	85 e0       	ldi	r24, 0x05	; 5
    6050:	80 93 99 02 	sts	0x0299, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    6054:	b2 d1       	rcall	.+868    	; 0x63ba <USB_Event_Stub>
    6056:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    605a:	84 ff       	sbrs	r24, 4
    605c:	2f c0       	rjmp	.+94     	; 0x60bc <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    605e:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    6062:	84 ff       	sbrs	r24, 4
    6064:	2b c0       	rjmp	.+86     	; 0x60bc <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    6066:	80 e1       	ldi	r24, 0x10	; 16
    6068:	89 bd       	out	0x29, r24	; 41
    606a:	82 e1       	ldi	r24, 0x12	; 18
    606c:	89 bd       	out	0x29, r24	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    606e:	09 b4       	in	r0, 0x29	; 41
    6070:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    6072:	fd cf       	rjmp	.-6      	; 0x606e <__vector_10+0xd0>
    6074:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    6078:	8f 7d       	andi	r24, 0xDF	; 223
    607a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    607e:	80 91 e1 00 	lds	r24, 0x00E1
    6082:	8f 7e       	andi	r24, 0xEF	; 239
    6084:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    6088:	80 91 e2 00 	lds	r24, 0x00E2
    608c:	8f 7e       	andi	r24, 0xEF	; 239
    608e:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    6092:	80 91 e2 00 	lds	r24, 0x00E2
    6096:	81 60       	ori	r24, 0x01	; 1
    6098:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    609c:	80 91 95 02 	lds	r24, 0x0295
    60a0:	88 23       	and	r24, r24
    60a2:	11 f0       	breq	.+4      	; 0x60a8 <__vector_10+0x10a>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    60a4:	84 e0       	ldi	r24, 0x04	; 4
    60a6:	07 c0       	rjmp	.+14     	; 0x60b6 <__vector_10+0x118>
    60a8:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
    60ac:	87 fd       	sbrc	r24, 7
    60ae:	02 c0       	rjmp	.+4      	; 0x60b4 <__vector_10+0x116>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    60b0:	81 e0       	ldi	r24, 0x01	; 1
    60b2:	01 c0       	rjmp	.+2      	; 0x60b6 <__vector_10+0x118>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    60b4:	83 e0       	ldi	r24, 0x03	; 3
    60b6:	80 93 99 02 	sts	0x0299, r24
    60ba:	7f d1       	rcall	.+766    	; 0x63ba <USB_Event_Stub>
    60bc:	80 91 e1 00 	lds	r24, 0x00E1
    60c0:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    60c2:	22 c0       	rjmp	.+68     	; 0x6108 <__vector_10+0x16a>
    60c4:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    60c8:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    60ca:	1e c0       	rjmp	.+60     	; 0x6108 <__vector_10+0x16a>
    60cc:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    60d0:	87 7f       	andi	r24, 0xF7	; 247
    60d2:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    60d6:	82 e0       	ldi	r24, 0x02	; 2
    60d8:	80 93 99 02 	sts	0x0299, r24
    60dc:	10 92 95 02 	sts	0x0295, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    60e0:	80 91 e1 00 	lds	r24, 0x00E1
    60e4:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
    60e6:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    60ea:	80 91 e2 00 	lds	r24, 0x00E2
    60ee:	8e 7f       	andi	r24, 0xFE	; 254
    60f0:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    60f4:	80 91 e2 00 	lds	r24, 0x00E2
    60f8:	80 61       	ori	r24, 0x10	; 16
    60fa:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    60fe:	42 e0       	ldi	r20, 0x02	; 2
    6100:	60 e0       	ldi	r22, 0x00	; 0
    6102:	80 e0       	ldi	r24, 0x00	; 0
    6104:	69 de       	rcall	.-814    	; 0x5dd8 <Endpoint_ConfigureEndpoint_Prv>
    6106:	59 d1       	rcall	.+690    	; 0x63ba <USB_Event_Stub>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    6108:	ff 91       	pop	r31
    610a:	ef 91       	pop	r30
    610c:	bf 91       	pop	r27
    610e:	af 91       	pop	r26
    6110:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    6112:	8f 91       	pop	r24
    6114:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    6116:	6f 91       	pop	r22
    6118:	5f 91       	pop	r21
    611a:	4f 91       	pop	r20
    611c:	3f 91       	pop	r19
    611e:	2f 91       	pop	r18
    6120:	0f 90       	pop	r0
    6122:	0f be       	out	0x3f, r0	; 63
    6124:	0f 90       	pop	r0
    6126:	1f 90       	pop	r1
    6128:	18 95       	reti

0000612a <USB_Device_ProcessControlRequest>:
    612a:	1f 93       	push	r17
    612c:	cf 93       	push	r28
    612e:	df 93       	push	r29
    6130:	cd b7       	in	r28, 0x3d	; 61
    6132:	de b7       	in	r29, 0x3e	; 62
    6134:	aa 97       	sbiw	r28, 0x2a	; 42
    6136:	0f b6       	in	r0, 0x3f	; 63
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    6138:	f8 94       	cli
    613a:	de bf       	out	0x3e, r29	; 62
    613c:	0f be       	out	0x3f, r0	; 63
    613e:	cd bf       	out	0x3d, r28	; 61
    6140:	ea e9       	ldi	r30, 0x9A	; 154
    6142:	f2 e0       	ldi	r31, 0x02	; 2
    6144:	88 e0       	ldi	r24, 0x08	; 8
    6146:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    6148:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    614c:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    614e:	8e 13       	cpse	r24, r30
    6150:	fb cf       	rjmp	.-10     	; 0x6148 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    6152:	4a db       	rcall	.-2412   	; 0x57e8 <EVENT_USB_Device_ControlRequest>
    6154:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    6158:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    615a:	17 c1       	rjmp	.+558    	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    615c:	80 91 9a 02 	lds	r24, 0x029A
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    6160:	90 91 9b 02 	lds	r25, 0x029B

		switch (USB_ControlRequest.bRequest)
    6164:	49 2f       	mov	r20, r25
    6166:	50 e0       	ldi	r21, 0x00	; 0
    6168:	4a 30       	cpi	r20, 0x0A	; 10
    616a:	51 05       	cpc	r21, r1
    616c:	08 f0       	brcs	.+2      	; 0x6170 <USB_Device_ProcessControlRequest+0x46>
    616e:	0d c1       	rjmp	.+538    	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    6170:	fa 01       	movw	r30, r20
    6172:	e3 5a       	subi	r30, 0xA3	; 163
    6174:	ff 4f       	sbci	r31, 0xFF	; 255
    6176:	a2 c4       	rjmp	.+2372   	; 0x6abc <__tablejump2__>
    6178:	80 38       	cpi	r24, 0x80	; 128
    617a:	81 f0       	breq	.+32     	; 0x619c <USB_Device_ProcessControlRequest+0x72>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    617c:	82 38       	cpi	r24, 0x82	; 130
    617e:	09 f0       	breq	.+2      	; 0x6182 <USB_Device_ProcessControlRequest+0x58>
    6180:	04 c1       	rjmp	.+520    	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    6182:	80 91 9e 02 	lds	r24, 0x029E
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6186:	8f 70       	andi	r24, 0x0F	; 15
    6188:	80 93 e9 00 	sts	0x00E9, r24
    618c:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    6190:	85 fb       	bst	r24, 5
    6192:	88 27       	eor	r24, r24
    6194:	80 f9       	bld	r24, 0
    6196:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    619a:	06 c0       	rjmp	.+12     	; 0x61a8 <USB_Device_ProcessControlRequest+0x7e>
    619c:	80 91 96 02 	lds	r24, 0x0296
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    61a0:	90 91 97 02 	lds	r25, 0x0297
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    61a4:	91 11       	cpse	r25, r1
    61a6:	82 60       	ori	r24, 0x02	; 2
    61a8:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    61ac:	97 7f       	andi	r25, 0xF7	; 247
    61ae:	90 93 e8 00 	sts	0x00E8, r25
    61b2:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    61b6:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    61ba:	c4 c0       	rjmp	.+392    	; 0x6344 <USB_Device_ProcessControlRequest+0x21a>
    61bc:	28 2f       	mov	r18, r24
    61be:	2d 7f       	andi	r18, 0xFD	; 253
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    61c0:	09 f0       	breq	.+2      	; 0x61c4 <USB_Device_ProcessControlRequest+0x9a>
    61c2:	e3 c0       	rjmp	.+454    	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    61c4:	88 23       	and	r24, r24
    61c6:	19 f0       	breq	.+6      	; 0x61ce <USB_Device_ProcessControlRequest+0xa4>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    61c8:	82 30       	cpi	r24, 0x02	; 2
    61ca:	61 f0       	breq	.+24     	; 0x61e4 <USB_Device_ProcessControlRequest+0xba>
    61cc:	de c0       	rjmp	.+444    	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    61ce:	80 91 9c 02 	lds	r24, 0x029C
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    61d2:	81 30       	cpi	r24, 0x01	; 1
    61d4:	09 f0       	breq	.+2      	; 0x61d8 <USB_Device_ProcessControlRequest+0xae>
    61d6:	d9 c0       	rjmp	.+434    	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    61d8:	93 30       	cpi	r25, 0x03	; 3
    61da:	09 f0       	breq	.+2      	; 0x61de <USB_Device_ProcessControlRequest+0xb4>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    61dc:	80 e0       	ldi	r24, 0x00	; 0
    61de:	80 93 97 02 	sts	0x0297, r24
    61e2:	2b c0       	rjmp	.+86     	; 0x623a <USB_Device_ProcessControlRequest+0x110>
    61e4:	80 91 9c 02 	lds	r24, 0x029C

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    61e8:	81 11       	cpse	r24, r1
    61ea:	27 c0       	rjmp	.+78     	; 0x623a <USB_Device_ProcessControlRequest+0x110>
    61ec:	80 91 9e 02 	lds	r24, 0x029E
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    61f0:	8f 70       	andi	r24, 0x0F	; 15
    61f2:	09 f4       	brne	.+2      	; 0x61f6 <USB_Device_ProcessControlRequest+0xcc>
    61f4:	ca c0       	rjmp	.+404    	; 0x638a <USB_Device_ProcessControlRequest+0x260>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    61f6:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    61fa:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    61fe:	20 ff       	sbrs	r18, 0
    6200:	1c c0       	rjmp	.+56     	; 0x623a <USB_Device_ProcessControlRequest+0x110>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    6202:	93 30       	cpi	r25, 0x03	; 3
    6204:	21 f4       	brne	.+8      	; 0x620e <USB_Device_ProcessControlRequest+0xe4>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    6206:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    620a:	80 62       	ori	r24, 0x20	; 32
    620c:	14 c0       	rjmp	.+40     	; 0x6236 <USB_Device_ProcessControlRequest+0x10c>
    620e:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    6212:	90 61       	ori	r25, 0x10	; 16
    6214:	90 93 eb 00 	sts	0x00EB, r25
    6218:	21 e0       	ldi	r18, 0x01	; 1
    621a:	30 e0       	ldi	r19, 0x00	; 0
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    621c:	a9 01       	movw	r20, r18
    621e:	02 c0       	rjmp	.+4      	; 0x6224 <USB_Device_ProcessControlRequest+0xfa>
    6220:	44 0f       	add	r20, r20
    6222:	55 1f       	adc	r21, r21
    6224:	8a 95       	dec	r24
    6226:	e2 f7       	brpl	.-8      	; 0x6220 <USB_Device_ProcessControlRequest+0xf6>
    6228:	40 93 ea 00 	sts	0x00EA, r20
    622c:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    6230:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    6234:	88 60       	ori	r24, 0x08	; 8
    6236:	80 93 eb 00 	sts	0x00EB, r24
    623a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    623e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    6242:	87 7f       	andi	r24, 0xF7	; 247
    6244:	82 c0       	rjmp	.+260    	; 0x634a <USB_Device_ProcessControlRequest+0x220>
    6246:	81 11       	cpse	r24, r1
    6248:	a0 c0       	rjmp	.+320    	; 0x638a <USB_Device_ProcessControlRequest+0x260>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    624a:	10 91 9c 02 	lds	r17, 0x029C
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    624e:	1f 77       	andi	r17, 0x7F	; 127
    6250:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    6254:	80 78       	andi	r24, 0x80	; 128
    6256:	81 2b       	or	r24, r17
    6258:	80 93 e3 00 	sts	0x00E3, r24
    625c:	80 91 e8 00 	lds	r24, 0x00E8
    6260:	87 7f       	andi	r24, 0xF7	; 247
    6262:	80 93 e8 00 	sts	0x00E8, r24
    6266:	ed dd       	rcall	.-1062   	; 0x5e42 <Endpoint_ClearStatusStage>
    6268:	80 91 e8 00 	lds	r24, 0x00E8

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    626c:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    626e:	fc cf       	rjmp	.-8      	; 0x6268 <USB_Device_ProcessControlRequest+0x13e>
    6270:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
    6274:	80 68       	ori	r24, 0x80	; 128
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    6276:	80 93 e3 00 	sts	0x00E3, r24
    627a:	11 11       	cpse	r17, r1
    627c:	02 c0       	rjmp	.+4      	; 0x6282 <USB_Device_ProcessControlRequest+0x158>
    627e:	82 e0       	ldi	r24, 0x02	; 2

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    6280:	01 c0       	rjmp	.+2      	; 0x6284 <USB_Device_ProcessControlRequest+0x15a>
    6282:	83 e0       	ldi	r24, 0x03	; 3
    6284:	80 93 99 02 	sts	0x0299, r24
    6288:	80 c0       	rjmp	.+256    	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    628a:	80 58       	subi	r24, 0x80	; 128
    628c:	82 30       	cpi	r24, 0x02	; 2
    628e:	08 f0       	brcs	.+2      	; 0x6292 <USB_Device_ProcessControlRequest+0x168>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    6290:	7c c0       	rjmp	.+248    	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    6292:	80 91 9c 02 	lds	r24, 0x029C
    6296:	90 91 9d 02 	lds	r25, 0x029D
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    629a:	8c 3d       	cpi	r24, 0xDC	; 220
    629c:	53 e0       	ldi	r21, 0x03	; 3
    629e:	95 07       	cpc	r25, r21
    62a0:	71 f5       	brne	.+92     	; 0x62fe <USB_Device_ProcessControlRequest+0x1d4>
    62a2:	83 e0       	ldi	r24, 0x03	; 3
    62a4:	8a 83       	std	Y+2, r24	; 0x02
    62a6:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    62a8:	89 83       	std	Y+1, r24	; 0x01
    62aa:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    62ac:	f8 94       	cli
    62ae:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    62b0:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    62b2:	20 e0       	ldi	r18, 0x00	; 0
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    62b4:	3e e0       	ldi	r19, 0x0E	; 14
    62b6:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    62b8:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    62ba:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    62bc:	50 93 57 00 	sts	0x0057, r21
    62c0:	e4 91       	lpm	r30, Z
    62c2:	20 ff       	sbrs	r18, 0
    62c4:	03 c0       	rjmp	.+6      	; 0x62cc <USB_Device_ProcessControlRequest+0x1a2>
    62c6:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
    62c8:	ef 70       	andi	r30, 0x0F	; 15
    62ca:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
    62cc:	ef 70       	andi	r30, 0x0F	; 15
    62ce:	8e 2f       	mov	r24, r30
						SigReadAddress++;
    62d0:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
    62d2:	ea 30       	cpi	r30, 0x0A	; 10
    62d4:	10 f0       	brcs	.+4      	; 0x62da <USB_Device_ProcessControlRequest+0x1b0>
    62d6:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    62d8:	01 c0       	rjmp	.+2      	; 0x62dc <USB_Device_ProcessControlRequest+0x1b2>
    62da:	c0 96       	adiw	r24, 0x30	; 48
    62dc:	8d 93       	st	X+, r24
    62de:	9d 93       	st	X+, r25
    62e0:	2f 5f       	subi	r18, 0xFF	; 255
    62e2:	24 31       	cpi	r18, 0x14	; 20
    62e4:	49 f7       	brne	.-46     	; 0x62b8 <USB_Device_ProcessControlRequest+0x18e>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    62e6:	4f bf       	out	0x3f, r20	; 63
    62e8:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    62ec:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    62ee:	80 93 e8 00 	sts	0x00E8, r24
    62f2:	6a e2       	ldi	r22, 0x2A	; 42
    62f4:	70 e0       	ldi	r23, 0x00	; 0
    62f6:	ce 01       	movw	r24, r28

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    62f8:	01 96       	adiw	r24, 0x01	; 1
    62fa:	72 dc       	rcall	.-1820   	; 0x5be0 <Endpoint_Write_Control_Stream_LE>
    62fc:	12 c0       	rjmp	.+36     	; 0x6322 <USB_Device_ProcessControlRequest+0x1f8>
    62fe:	ae 01       	movw	r20, r28
    6300:	4f 5f       	subi	r20, 0xFF	; 255
    6302:	5f 4f       	sbci	r21, 0xFF	; 255
    6304:	60 91 9e 02 	lds	r22, 0x029E
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    6308:	94 db       	rcall	.-2264   	; 0x5a32 <CALLBACK_USB_GetDescriptor>
    630a:	bc 01       	movw	r22, r24
    630c:	00 97       	sbiw	r24, 0x00	; 0
    630e:	09 f4       	brne	.+2      	; 0x6312 <USB_Device_ProcessControlRequest+0x1e8>
    6310:	3c c0       	rjmp	.+120    	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    6312:	90 91 e8 00 	lds	r25, 0x00E8
    6316:	97 7f       	andi	r25, 0xF7	; 247
    6318:	90 93 e8 00 	sts	0x00E8, r25
    631c:	89 81       	ldd	r24, Y+1	; 0x01
    631e:	9a 81       	ldd	r25, Y+2	; 0x02
    6320:	fe dc       	rcall	.-1540   	; 0x5d1e <Endpoint_Write_Control_PStream_LE>
    6322:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    6326:	8b 77       	andi	r24, 0x7B	; 123
    6328:	80 93 e8 00 	sts	0x00E8, r24
    632c:	2e c0       	rjmp	.+92     	; 0x638a <USB_Device_ProcessControlRequest+0x260>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    632e:	80 38       	cpi	r24, 0x80	; 128
    6330:	61 f5       	brne	.+88     	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    6332:	80 91 e8 00 	lds	r24, 0x00E8
    6336:	87 7f       	andi	r24, 0xF7	; 247
    6338:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    633c:	80 91 95 02 	lds	r24, 0x0295
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    6340:	80 93 f1 00 	sts	0x00F1, r24
    6344:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    6348:	8e 77       	andi	r24, 0x7E	; 126
    634a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    634e:	79 dd       	rcall	.-1294   	; 0x5e42 <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6350:	1c c0       	rjmp	.+56     	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    6352:	81 11       	cpse	r24, r1
    6354:	1a c0       	rjmp	.+52     	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    6356:	90 91 9c 02 	lds	r25, 0x029C
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    635a:	92 30       	cpi	r25, 0x02	; 2
    635c:	b0 f4       	brcc	.+44     	; 0x638a <USB_Device_ProcessControlRequest+0x260>
    635e:	80 91 e8 00 	lds	r24, 0x00E8
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    6362:	87 7f       	andi	r24, 0xF7	; 247
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    6364:	80 93 e8 00 	sts	0x00E8, r24
    6368:	90 93 95 02 	sts	0x0295, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    636c:	6a dd       	rcall	.-1324   	; 0x5e42 <Endpoint_ClearStatusStage>
    636e:	80 91 95 02 	lds	r24, 0x0295
    6372:	81 11       	cpse	r24, r1
    6374:	06 c0       	rjmp	.+12     	; 0x6382 <USB_Device_ProcessControlRequest+0x258>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    6376:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
    637a:	87 fd       	sbrc	r24, 7
    637c:	02 c0       	rjmp	.+4      	; 0x6382 <USB_Device_ProcessControlRequest+0x258>

	if (USB_Device_ConfigurationNumber)
    637e:	81 e0       	ldi	r24, 0x01	; 1
    6380:	01 c0       	rjmp	.+2      	; 0x6384 <USB_Device_ProcessControlRequest+0x25a>
    6382:	84 e0       	ldi	r24, 0x04	; 4
    6384:	80 93 99 02 	sts	0x0299, r24
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    6388:	f8 d9       	rcall	.-3088   	; 0x577a <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    638a:	80 91 e8 00 	lds	r24, 0x00E8
    638e:	83 ff       	sbrs	r24, 3
    6390:	0a c0       	rjmp	.+20     	; 0x63a6 <USB_Device_ProcessControlRequest+0x27c>
    6392:	80 91 e8 00 	lds	r24, 0x00E8
    6396:	87 7f       	andi	r24, 0xF7	; 247

	EVENT_USB_Device_ConfigurationChanged();
    6398:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    639c:	80 91 eb 00 	lds	r24, 0x00EB
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    63a0:	80 62       	ori	r24, 0x20	; 32
    63a2:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    63a6:	aa 96       	adiw	r28, 0x2a	; 42
    63a8:	0f b6       	in	r0, 0x3f	; 63
    63aa:	f8 94       	cli
    63ac:	de bf       	out	0x3e, r29	; 62
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    63ae:	0f be       	out	0x3f, r0	; 63
    63b0:	cd bf       	out	0x3d, r28	; 61
    63b2:	df 91       	pop	r29
    63b4:	cf 91       	pop	r28
    63b6:	1f 91       	pop	r17
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    63b8:	08 95       	ret

000063ba <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    63ba:	08 95       	ret

000063bc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    63bc:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    63be:	80 91 99 02 	lds	r24, 0x0299
    63c2:	88 23       	and	r24, r24
    63c4:	99 f0       	breq	.+38     	; 0x63ec <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    63c6:	c0 91 e9 00 	lds	r28, 0x00E9
    63ca:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    63cc:	90 91 ec 00 	lds	r25, 0x00EC
    63d0:	89 2f       	mov	r24, r25
    63d2:	81 70       	andi	r24, 0x01	; 1
    63d4:	90 fd       	sbrc	r25, 0
    63d6:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    63d8:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    63da:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    63de:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    63e2:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    63e4:	a2 de       	rcall	.-700    	; 0x612a <USB_Device_ProcessControlRequest>
    63e6:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    63e8:	c0 93 e9 00 	sts	0x00E9, r28
    63ec:	cf 91       	pop	r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    63ee:	08 95       	ret

000063f0 <TWI_StartTransmission>:
    63f0:	94 ea       	ldi	r25, 0xA4	; 164
	for (;;)
	{
		bool     BusCaptured = false;
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    63f2:	90 93 bc 00 	sts	0x00BC, r25

		TimeoutRemaining = (TimeoutMS * 100);
    63f6:	94 e6       	ldi	r25, 0x64	; 100
    63f8:	69 9f       	mul	r22, r25
    63fa:	b0 01       	movw	r22, r0
    63fc:	11 24       	eor	r1, r1
    63fe:	9b 01       	movw	r18, r22
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress,
                              const uint8_t TimeoutMS)
{
	for (;;)
	{
		bool     BusCaptured = false;
    6400:	40 e0       	ldi	r20, 0x00	; 0
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    6402:	54 ea       	ldi	r21, 0xA4	; 164
		uint16_t TimeoutRemaining;

		TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining && !(BusCaptured))
    6404:	21 15       	cp	r18, r1
    6406:	31 05       	cpc	r19, r1
    6408:	f9 f0       	breq	.+62     	; 0x6448 <TWI_StartTransmission+0x58>
    640a:	41 11       	cpse	r20, r1
    640c:	22 c0       	rjmp	.+68     	; 0x6452 <TWI_StartTransmission+0x62>
		{
			if (TWCR & (1 << TWINT))
    640e:	90 91 bc 00 	lds	r25, 0x00BC
    6412:	97 ff       	sbrs	r25, 7
    6414:	12 c0       	rjmp	.+36     	; 0x643a <TWI_StartTransmission+0x4a>
			{
				switch (TWSR & TW_STATUS_MASK)
    6416:	90 91 b9 00 	lds	r25, 0x00B9
    641a:	98 7f       	andi	r25, 0xF8	; 248
    641c:	90 31       	cpi	r25, 0x10	; 16
    641e:	61 f0       	breq	.+24     	; 0x6438 <TWI_StartTransmission+0x48>
    6420:	98 33       	cpi	r25, 0x38	; 56
    6422:	39 f0       	breq	.+14     	; 0x6432 <TWI_StartTransmission+0x42>
    6424:	98 30       	cpi	r25, 0x08	; 8
    6426:	41 f0       	breq	.+16     	; 0x6438 <TWI_StartTransmission+0x48>
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
						continue;
					default:
						TWCR = (1 << TWEN);
    6428:	84 e0       	ldi	r24, 0x04	; 4
    642a:	80 93 bc 00 	sts	0x00BC, r24
						return TWI_ERROR_BusFault;
    642e:	81 e0       	ldi	r24, 0x01	; 1
    6430:	08 95       	ret
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
						break;
					case TW_MT_ARB_LOST:
						TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    6432:	50 93 bc 00 	sts	0x00BC, r21
						continue;
    6436:	e6 cf       	rjmp	.-52     	; 0x6404 <TWI_StartTransmission+0x14>
			{
				switch (TWSR & TW_STATUS_MASK)
				{
					case TW_START:
					case TW_REP_START:
						BusCaptured = true;
    6438:	41 e0       	ldi	r20, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    643a:	95 e3       	ldi	r25, 0x35	; 53
    643c:	9a 95       	dec	r25
    643e:	f1 f7       	brne	.-4      	; 0x643c <TWI_StartTransmission+0x4c>
    6440:	00 00       	nop
						return TWI_ERROR_BusFault;
				}
			}

			_delay_us(10);
			TimeoutRemaining--;
    6442:	21 50       	subi	r18, 0x01	; 1
    6444:	31 09       	sbc	r19, r1
    6446:	de cf       	rjmp	.-68     	; 0x6404 <TWI_StartTransmission+0x14>
		}

		if (!(TimeoutRemaining))
		{
			TWCR = (1 << TWEN);
    6448:	84 e0       	ldi	r24, 0x04	; 4
    644a:	80 93 bc 00 	sts	0x00BC, r24
			return TWI_ERROR_BusCaptureTimeout;
    644e:	82 e0       	ldi	r24, 0x02	; 2
    6450:	08 95       	ret
		}

		TWDR = SlaveAddress;
    6452:	80 93 bb 00 	sts	0x00BB, r24
		TWCR = ((1 << TWINT) | (1 << TWEN));
    6456:	84 e8       	ldi	r24, 0x84	; 132
    6458:	80 93 bc 00 	sts	0x00BC, r24

		TimeoutRemaining = (TimeoutMS * 100);
		while (TimeoutRemaining)
    645c:	61 15       	cp	r22, r1
    645e:	71 05       	cpc	r23, r1
    6460:	59 f0       	breq	.+22     	; 0x6478 <TWI_StartTransmission+0x88>
		{
			if (TWCR & (1 << TWINT))
    6462:	80 91 bc 00 	lds	r24, 0x00BC
    6466:	87 fd       	sbrc	r24, 7
    6468:	09 c0       	rjmp	.+18     	; 0x647c <TWI_StartTransmission+0x8c>
    646a:	85 e3       	ldi	r24, 0x35	; 53
    646c:	8a 95       	dec	r24
    646e:	f1 f7       	brne	.-4      	; 0x646c <TWI_StartTransmission+0x7c>
    6470:	00 00       	nop
			  break;

			_delay_us(10);
			TimeoutRemaining--;
    6472:	61 50       	subi	r22, 0x01	; 1
    6474:	71 09       	sbc	r23, r1
    6476:	f2 cf       	rjmp	.-28     	; 0x645c <TWI_StartTransmission+0x6c>
		}

		if (!(TimeoutRemaining))
		  return TWI_ERROR_SlaveResponseTimeout;
    6478:	83 e0       	ldi	r24, 0x03	; 3
    647a:	08 95       	ret

		switch (TWSR & TW_STATUS_MASK)
    647c:	80 91 b9 00 	lds	r24, 0x00B9
    6480:	88 7f       	andi	r24, 0xF8	; 248
    6482:	88 31       	cpi	r24, 0x18	; 24
    6484:	11 f4       	brne	.+4      	; 0x648a <TWI_StartTransmission+0x9a>
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
    6486:	80 e0       	ldi	r24, 0x00	; 0
    6488:	08 95       	ret
		}

		if (!(TimeoutRemaining))
		  return TWI_ERROR_SlaveResponseTimeout;

		switch (TWSR & TW_STATUS_MASK)
    648a:	80 34       	cpi	r24, 0x40	; 64
    648c:	e1 f3       	breq	.-8      	; 0x6486 <TWI_StartTransmission+0x96>
		{
			case TW_MT_SLA_ACK:
			case TW_MR_SLA_ACK:
				return TWI_ERROR_NoError;
			default:
				TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    648e:	84 e9       	ldi	r24, 0x94	; 148
    6490:	80 93 bc 00 	sts	0x00BC, r24
				return TWI_ERROR_SlaveNotReady;
    6494:	84 e0       	ldi	r24, 0x04	; 4
    6496:	08 95       	ret

00006498 <TWI_SendByte>:
	}
}

bool TWI_SendByte(const uint8_t Byte)
{
	TWDR = Byte;
    6498:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = ((1 << TWINT) | (1 << TWEN));
    649c:	84 e8       	ldi	r24, 0x84	; 132
    649e:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1 << TWINT)));
    64a2:	80 91 bc 00 	lds	r24, 0x00BC
    64a6:	87 ff       	sbrs	r24, 7
    64a8:	fc cf       	rjmp	.-8      	; 0x64a2 <TWI_SendByte+0xa>

	return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    64aa:	90 91 b9 00 	lds	r25, 0x00B9
    64ae:	98 7f       	andi	r25, 0xF8	; 248
    64b0:	81 e0       	ldi	r24, 0x01	; 1
    64b2:	98 32       	cpi	r25, 0x28	; 40
    64b4:	09 f0       	breq	.+2      	; 0x64b8 <TWI_SendByte+0x20>
    64b6:	80 e0       	ldi	r24, 0x00	; 0
}
    64b8:	08 95       	ret

000064ba <TWI_ReceiveByte>:

bool TWI_ReceiveByte(uint8_t* const Byte,
					 const bool LastByte)
{
    64ba:	fc 01       	movw	r30, r24
	uint8_t TWCRMask;

	if (LastByte)
    64bc:	61 11       	cpse	r22, r1
    64be:	02 c0       	rjmp	.+4      	; 0x64c4 <TWI_ReceiveByte+0xa>
	  TWCRMask = ((1 << TWINT) | (1 << TWEN));
	else
	  TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    64c0:	94 ec       	ldi	r25, 0xC4	; 196
    64c2:	01 c0       	rjmp	.+2      	; 0x64c6 <TWI_ReceiveByte+0xc>
					 const bool LastByte)
{
	uint8_t TWCRMask;

	if (LastByte)
	  TWCRMask = ((1 << TWINT) | (1 << TWEN));
    64c4:	94 e8       	ldi	r25, 0x84	; 132
	else
	  TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

	TWCR = TWCRMask;
    64c6:	90 93 bc 00 	sts	0x00BC, r25
	while (!(TWCR & (1 << TWINT)));
    64ca:	80 91 bc 00 	lds	r24, 0x00BC
    64ce:	87 ff       	sbrs	r24, 7
    64d0:	fc cf       	rjmp	.-8      	; 0x64ca <TWI_ReceiveByte+0x10>
	*Byte = TWDR;
    64d2:	80 91 bb 00 	lds	r24, 0x00BB
    64d6:	80 83       	st	Z, r24

	uint8_t Status = (TWSR & TW_STATUS_MASK);
    64d8:	90 91 b9 00 	lds	r25, 0x00B9
    64dc:	98 7f       	andi	r25, 0xF8	; 248

	return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    64de:	81 e0       	ldi	r24, 0x01	; 1
    64e0:	66 23       	and	r22, r22
    64e2:	19 f0       	breq	.+6      	; 0x64ea <TWI_ReceiveByte+0x30>
    64e4:	98 35       	cpi	r25, 0x58	; 88
    64e6:	19 f4       	brne	.+6      	; 0x64ee <TWI_ReceiveByte+0x34>
    64e8:	03 c0       	rjmp	.+6      	; 0x64f0 <TWI_ReceiveByte+0x36>
    64ea:	90 35       	cpi	r25, 0x50	; 80
    64ec:	09 f0       	breq	.+2      	; 0x64f0 <TWI_ReceiveByte+0x36>
    64ee:	80 e0       	ldi	r24, 0x00	; 0
}
    64f0:	08 95       	ret

000064f2 <__subsf3>:
    64f2:	50 58       	subi	r21, 0x80	; 128

000064f4 <__addsf3>:
    64f4:	bb 27       	eor	r27, r27
    64f6:	aa 27       	eor	r26, r26
    64f8:	0e d0       	rcall	.+28     	; 0x6516 <__addsf3x>
    64fa:	9b c1       	rjmp	.+822    	; 0x6832 <__fp_round>
    64fc:	64 d1       	rcall	.+712    	; 0x67c6 <__fp_pscA>
    64fe:	30 f0       	brcs	.+12     	; 0x650c <__addsf3+0x18>
    6500:	69 d1       	rcall	.+722    	; 0x67d4 <__fp_pscB>
    6502:	20 f0       	brcs	.+8      	; 0x650c <__addsf3+0x18>
    6504:	31 f4       	brne	.+12     	; 0x6512 <__addsf3+0x1e>
    6506:	9f 3f       	cpi	r25, 0xFF	; 255
    6508:	11 f4       	brne	.+4      	; 0x650e <__addsf3+0x1a>
    650a:	1e f4       	brtc	.+6      	; 0x6512 <__addsf3+0x1e>
    650c:	59 c1       	rjmp	.+690    	; 0x67c0 <__fp_nan>
    650e:	0e f4       	brtc	.+2      	; 0x6512 <__addsf3+0x1e>
    6510:	e0 95       	com	r30
    6512:	e7 fb       	bst	r30, 7
    6514:	4f c1       	rjmp	.+670    	; 0x67b4 <__fp_inf>

00006516 <__addsf3x>:
    6516:	e9 2f       	mov	r30, r25
    6518:	ae d1       	rcall	.+860    	; 0x6876 <__fp_split3>
    651a:	80 f3       	brcs	.-32     	; 0x64fc <__addsf3+0x8>
    651c:	ba 17       	cp	r27, r26
    651e:	62 07       	cpc	r22, r18
    6520:	73 07       	cpc	r23, r19
    6522:	84 07       	cpc	r24, r20
    6524:	95 07       	cpc	r25, r21
    6526:	18 f0       	brcs	.+6      	; 0x652e <__addsf3x+0x18>
    6528:	71 f4       	brne	.+28     	; 0x6546 <__addsf3x+0x30>
    652a:	9e f5       	brtc	.+102    	; 0x6592 <__addsf3x+0x7c>
    652c:	c6 c1       	rjmp	.+908    	; 0x68ba <__fp_zero>
    652e:	0e f4       	brtc	.+2      	; 0x6532 <__addsf3x+0x1c>
    6530:	e0 95       	com	r30
    6532:	0b 2e       	mov	r0, r27
    6534:	ba 2f       	mov	r27, r26
    6536:	a0 2d       	mov	r26, r0
    6538:	0b 01       	movw	r0, r22
    653a:	b9 01       	movw	r22, r18
    653c:	90 01       	movw	r18, r0
    653e:	0c 01       	movw	r0, r24
    6540:	ca 01       	movw	r24, r20
    6542:	a0 01       	movw	r20, r0
    6544:	11 24       	eor	r1, r1
    6546:	ff 27       	eor	r31, r31
    6548:	59 1b       	sub	r21, r25
    654a:	99 f0       	breq	.+38     	; 0x6572 <__addsf3x+0x5c>
    654c:	59 3f       	cpi	r21, 0xF9	; 249
    654e:	50 f4       	brcc	.+20     	; 0x6564 <__addsf3x+0x4e>
    6550:	50 3e       	cpi	r21, 0xE0	; 224
    6552:	68 f1       	brcs	.+90     	; 0x65ae <__addsf3x+0x98>
    6554:	1a 16       	cp	r1, r26
    6556:	f0 40       	sbci	r31, 0x00	; 0
    6558:	a2 2f       	mov	r26, r18
    655a:	23 2f       	mov	r18, r19
    655c:	34 2f       	mov	r19, r20
    655e:	44 27       	eor	r20, r20
    6560:	58 5f       	subi	r21, 0xF8	; 248
    6562:	f3 cf       	rjmp	.-26     	; 0x654a <__addsf3x+0x34>
    6564:	46 95       	lsr	r20
    6566:	37 95       	ror	r19
    6568:	27 95       	ror	r18
    656a:	a7 95       	ror	r26
    656c:	f0 40       	sbci	r31, 0x00	; 0
    656e:	53 95       	inc	r21
    6570:	c9 f7       	brne	.-14     	; 0x6564 <__addsf3x+0x4e>
    6572:	7e f4       	brtc	.+30     	; 0x6592 <__addsf3x+0x7c>
    6574:	1f 16       	cp	r1, r31
    6576:	ba 0b       	sbc	r27, r26
    6578:	62 0b       	sbc	r22, r18
    657a:	73 0b       	sbc	r23, r19
    657c:	84 0b       	sbc	r24, r20
    657e:	ba f0       	brmi	.+46     	; 0x65ae <__addsf3x+0x98>
    6580:	91 50       	subi	r25, 0x01	; 1
    6582:	a1 f0       	breq	.+40     	; 0x65ac <__addsf3x+0x96>
    6584:	ff 0f       	add	r31, r31
    6586:	bb 1f       	adc	r27, r27
    6588:	66 1f       	adc	r22, r22
    658a:	77 1f       	adc	r23, r23
    658c:	88 1f       	adc	r24, r24
    658e:	c2 f7       	brpl	.-16     	; 0x6580 <__addsf3x+0x6a>
    6590:	0e c0       	rjmp	.+28     	; 0x65ae <__addsf3x+0x98>
    6592:	ba 0f       	add	r27, r26
    6594:	62 1f       	adc	r22, r18
    6596:	73 1f       	adc	r23, r19
    6598:	84 1f       	adc	r24, r20
    659a:	48 f4       	brcc	.+18     	; 0x65ae <__addsf3x+0x98>
    659c:	87 95       	ror	r24
    659e:	77 95       	ror	r23
    65a0:	67 95       	ror	r22
    65a2:	b7 95       	ror	r27
    65a4:	f7 95       	ror	r31
    65a6:	9e 3f       	cpi	r25, 0xFE	; 254
    65a8:	08 f0       	brcs	.+2      	; 0x65ac <__addsf3x+0x96>
    65aa:	b3 cf       	rjmp	.-154    	; 0x6512 <__addsf3+0x1e>
    65ac:	93 95       	inc	r25
    65ae:	88 0f       	add	r24, r24
    65b0:	08 f0       	brcs	.+2      	; 0x65b4 <__addsf3x+0x9e>
    65b2:	99 27       	eor	r25, r25
    65b4:	ee 0f       	add	r30, r30
    65b6:	97 95       	ror	r25
    65b8:	87 95       	ror	r24
    65ba:	08 95       	ret

000065bc <__cmpsf2>:
    65bc:	d7 d0       	rcall	.+430    	; 0x676c <__fp_cmp>
    65be:	08 f4       	brcc	.+2      	; 0x65c2 <__cmpsf2+0x6>
    65c0:	81 e0       	ldi	r24, 0x01	; 1
    65c2:	08 95       	ret

000065c4 <cos>:
    65c4:	0f d1       	rcall	.+542    	; 0x67e4 <__fp_rempio2>
    65c6:	e3 95       	inc	r30
    65c8:	45 c1       	rjmp	.+650    	; 0x6854 <__fp_sinus>

000065ca <__divsf3>:
    65ca:	0c d0       	rcall	.+24     	; 0x65e4 <__divsf3x>
    65cc:	32 c1       	rjmp	.+612    	; 0x6832 <__fp_round>
    65ce:	02 d1       	rcall	.+516    	; 0x67d4 <__fp_pscB>
    65d0:	40 f0       	brcs	.+16     	; 0x65e2 <__divsf3+0x18>
    65d2:	f9 d0       	rcall	.+498    	; 0x67c6 <__fp_pscA>
    65d4:	30 f0       	brcs	.+12     	; 0x65e2 <__divsf3+0x18>
    65d6:	21 f4       	brne	.+8      	; 0x65e0 <__divsf3+0x16>
    65d8:	5f 3f       	cpi	r21, 0xFF	; 255
    65da:	19 f0       	breq	.+6      	; 0x65e2 <__divsf3+0x18>
    65dc:	eb c0       	rjmp	.+470    	; 0x67b4 <__fp_inf>
    65de:	51 11       	cpse	r21, r1
    65e0:	6d c1       	rjmp	.+730    	; 0x68bc <__fp_szero>
    65e2:	ee c0       	rjmp	.+476    	; 0x67c0 <__fp_nan>

000065e4 <__divsf3x>:
    65e4:	48 d1       	rcall	.+656    	; 0x6876 <__fp_split3>
    65e6:	98 f3       	brcs	.-26     	; 0x65ce <__divsf3+0x4>

000065e8 <__divsf3_pse>:
    65e8:	99 23       	and	r25, r25
    65ea:	c9 f3       	breq	.-14     	; 0x65de <__divsf3+0x14>
    65ec:	55 23       	and	r21, r21
    65ee:	b1 f3       	breq	.-20     	; 0x65dc <__divsf3+0x12>
    65f0:	95 1b       	sub	r25, r21
    65f2:	55 0b       	sbc	r21, r21
    65f4:	bb 27       	eor	r27, r27
    65f6:	aa 27       	eor	r26, r26
    65f8:	62 17       	cp	r22, r18
    65fa:	73 07       	cpc	r23, r19
    65fc:	84 07       	cpc	r24, r20
    65fe:	38 f0       	brcs	.+14     	; 0x660e <__divsf3_pse+0x26>
    6600:	9f 5f       	subi	r25, 0xFF	; 255
    6602:	5f 4f       	sbci	r21, 0xFF	; 255
    6604:	22 0f       	add	r18, r18
    6606:	33 1f       	adc	r19, r19
    6608:	44 1f       	adc	r20, r20
    660a:	aa 1f       	adc	r26, r26
    660c:	a9 f3       	breq	.-22     	; 0x65f8 <__divsf3_pse+0x10>
    660e:	33 d0       	rcall	.+102    	; 0x6676 <__divsf3_pse+0x8e>
    6610:	0e 2e       	mov	r0, r30
    6612:	3a f0       	brmi	.+14     	; 0x6622 <__divsf3_pse+0x3a>
    6614:	e0 e8       	ldi	r30, 0x80	; 128
    6616:	30 d0       	rcall	.+96     	; 0x6678 <__divsf3_pse+0x90>
    6618:	91 50       	subi	r25, 0x01	; 1
    661a:	50 40       	sbci	r21, 0x00	; 0
    661c:	e6 95       	lsr	r30
    661e:	00 1c       	adc	r0, r0
    6620:	ca f7       	brpl	.-14     	; 0x6614 <__divsf3_pse+0x2c>
    6622:	29 d0       	rcall	.+82     	; 0x6676 <__divsf3_pse+0x8e>
    6624:	fe 2f       	mov	r31, r30
    6626:	27 d0       	rcall	.+78     	; 0x6676 <__divsf3_pse+0x8e>
    6628:	66 0f       	add	r22, r22
    662a:	77 1f       	adc	r23, r23
    662c:	88 1f       	adc	r24, r24
    662e:	bb 1f       	adc	r27, r27
    6630:	26 17       	cp	r18, r22
    6632:	37 07       	cpc	r19, r23
    6634:	48 07       	cpc	r20, r24
    6636:	ab 07       	cpc	r26, r27
    6638:	b0 e8       	ldi	r27, 0x80	; 128
    663a:	09 f0       	breq	.+2      	; 0x663e <__divsf3_pse+0x56>
    663c:	bb 0b       	sbc	r27, r27
    663e:	80 2d       	mov	r24, r0
    6640:	bf 01       	movw	r22, r30
    6642:	ff 27       	eor	r31, r31
    6644:	93 58       	subi	r25, 0x83	; 131
    6646:	5f 4f       	sbci	r21, 0xFF	; 255
    6648:	2a f0       	brmi	.+10     	; 0x6654 <__divsf3_pse+0x6c>
    664a:	9e 3f       	cpi	r25, 0xFE	; 254
    664c:	51 05       	cpc	r21, r1
    664e:	68 f0       	brcs	.+26     	; 0x666a <__divsf3_pse+0x82>
    6650:	b1 c0       	rjmp	.+354    	; 0x67b4 <__fp_inf>
    6652:	34 c1       	rjmp	.+616    	; 0x68bc <__fp_szero>
    6654:	5f 3f       	cpi	r21, 0xFF	; 255
    6656:	ec f3       	brlt	.-6      	; 0x6652 <__divsf3_pse+0x6a>
    6658:	98 3e       	cpi	r25, 0xE8	; 232
    665a:	dc f3       	brlt	.-10     	; 0x6652 <__divsf3_pse+0x6a>
    665c:	86 95       	lsr	r24
    665e:	77 95       	ror	r23
    6660:	67 95       	ror	r22
    6662:	b7 95       	ror	r27
    6664:	f7 95       	ror	r31
    6666:	9f 5f       	subi	r25, 0xFF	; 255
    6668:	c9 f7       	brne	.-14     	; 0x665c <__divsf3_pse+0x74>
    666a:	88 0f       	add	r24, r24
    666c:	91 1d       	adc	r25, r1
    666e:	96 95       	lsr	r25
    6670:	87 95       	ror	r24
    6672:	97 f9       	bld	r25, 7
    6674:	08 95       	ret
    6676:	e1 e0       	ldi	r30, 0x01	; 1
    6678:	66 0f       	add	r22, r22
    667a:	77 1f       	adc	r23, r23
    667c:	88 1f       	adc	r24, r24
    667e:	bb 1f       	adc	r27, r27
    6680:	62 17       	cp	r22, r18
    6682:	73 07       	cpc	r23, r19
    6684:	84 07       	cpc	r24, r20
    6686:	ba 07       	cpc	r27, r26
    6688:	20 f0       	brcs	.+8      	; 0x6692 <__divsf3_pse+0xaa>
    668a:	62 1b       	sub	r22, r18
    668c:	73 0b       	sbc	r23, r19
    668e:	84 0b       	sbc	r24, r20
    6690:	ba 0b       	sbc	r27, r26
    6692:	ee 1f       	adc	r30, r30
    6694:	88 f7       	brcc	.-30     	; 0x6678 <__divsf3_pse+0x90>
    6696:	e0 95       	com	r30
    6698:	08 95       	ret

0000669a <__fixunssfsi>:
    669a:	f5 d0       	rcall	.+490    	; 0x6886 <__fp_splitA>
    669c:	88 f0       	brcs	.+34     	; 0x66c0 <__fixunssfsi+0x26>
    669e:	9f 57       	subi	r25, 0x7F	; 127
    66a0:	90 f0       	brcs	.+36     	; 0x66c6 <__fixunssfsi+0x2c>
    66a2:	b9 2f       	mov	r27, r25
    66a4:	99 27       	eor	r25, r25
    66a6:	b7 51       	subi	r27, 0x17	; 23
    66a8:	a0 f0       	brcs	.+40     	; 0x66d2 <__fixunssfsi+0x38>
    66aa:	d1 f0       	breq	.+52     	; 0x66e0 <__fixunssfsi+0x46>
    66ac:	66 0f       	add	r22, r22
    66ae:	77 1f       	adc	r23, r23
    66b0:	88 1f       	adc	r24, r24
    66b2:	99 1f       	adc	r25, r25
    66b4:	1a f0       	brmi	.+6      	; 0x66bc <__fixunssfsi+0x22>
    66b6:	ba 95       	dec	r27
    66b8:	c9 f7       	brne	.-14     	; 0x66ac <__fixunssfsi+0x12>
    66ba:	12 c0       	rjmp	.+36     	; 0x66e0 <__fixunssfsi+0x46>
    66bc:	b1 30       	cpi	r27, 0x01	; 1
    66be:	81 f0       	breq	.+32     	; 0x66e0 <__fixunssfsi+0x46>
    66c0:	fc d0       	rcall	.+504    	; 0x68ba <__fp_zero>
    66c2:	b1 e0       	ldi	r27, 0x01	; 1
    66c4:	08 95       	ret
    66c6:	f9 c0       	rjmp	.+498    	; 0x68ba <__fp_zero>
    66c8:	67 2f       	mov	r22, r23
    66ca:	78 2f       	mov	r23, r24
    66cc:	88 27       	eor	r24, r24
    66ce:	b8 5f       	subi	r27, 0xF8	; 248
    66d0:	39 f0       	breq	.+14     	; 0x66e0 <__fixunssfsi+0x46>
    66d2:	b9 3f       	cpi	r27, 0xF9	; 249
    66d4:	cc f3       	brlt	.-14     	; 0x66c8 <__fixunssfsi+0x2e>
    66d6:	86 95       	lsr	r24
    66d8:	77 95       	ror	r23
    66da:	67 95       	ror	r22
    66dc:	b3 95       	inc	r27
    66de:	d9 f7       	brne	.-10     	; 0x66d6 <__fixunssfsi+0x3c>
    66e0:	3e f4       	brtc	.+14     	; 0x66f0 <__fixunssfsi+0x56>
    66e2:	90 95       	com	r25
    66e4:	80 95       	com	r24
    66e6:	70 95       	com	r23
    66e8:	61 95       	neg	r22
    66ea:	7f 4f       	sbci	r23, 0xFF	; 255
    66ec:	8f 4f       	sbci	r24, 0xFF	; 255
    66ee:	9f 4f       	sbci	r25, 0xFF	; 255
    66f0:	08 95       	ret

000066f2 <__floatunsisf>:
    66f2:	e8 94       	clt
    66f4:	09 c0       	rjmp	.+18     	; 0x6708 <__floatsisf+0x12>

000066f6 <__floatsisf>:
    66f6:	97 fb       	bst	r25, 7
    66f8:	3e f4       	brtc	.+14     	; 0x6708 <__floatsisf+0x12>
    66fa:	90 95       	com	r25
    66fc:	80 95       	com	r24
    66fe:	70 95       	com	r23
    6700:	61 95       	neg	r22
    6702:	7f 4f       	sbci	r23, 0xFF	; 255
    6704:	8f 4f       	sbci	r24, 0xFF	; 255
    6706:	9f 4f       	sbci	r25, 0xFF	; 255
    6708:	99 23       	and	r25, r25
    670a:	a9 f0       	breq	.+42     	; 0x6736 <__floatsisf+0x40>
    670c:	f9 2f       	mov	r31, r25
    670e:	96 e9       	ldi	r25, 0x96	; 150
    6710:	bb 27       	eor	r27, r27
    6712:	93 95       	inc	r25
    6714:	f6 95       	lsr	r31
    6716:	87 95       	ror	r24
    6718:	77 95       	ror	r23
    671a:	67 95       	ror	r22
    671c:	b7 95       	ror	r27
    671e:	f1 11       	cpse	r31, r1
    6720:	f8 cf       	rjmp	.-16     	; 0x6712 <__floatsisf+0x1c>
    6722:	fa f4       	brpl	.+62     	; 0x6762 <__floatsisf+0x6c>
    6724:	bb 0f       	add	r27, r27
    6726:	11 f4       	brne	.+4      	; 0x672c <__floatsisf+0x36>
    6728:	60 ff       	sbrs	r22, 0
    672a:	1b c0       	rjmp	.+54     	; 0x6762 <__floatsisf+0x6c>
    672c:	6f 5f       	subi	r22, 0xFF	; 255
    672e:	7f 4f       	sbci	r23, 0xFF	; 255
    6730:	8f 4f       	sbci	r24, 0xFF	; 255
    6732:	9f 4f       	sbci	r25, 0xFF	; 255
    6734:	16 c0       	rjmp	.+44     	; 0x6762 <__floatsisf+0x6c>
    6736:	88 23       	and	r24, r24
    6738:	11 f0       	breq	.+4      	; 0x673e <__floatsisf+0x48>
    673a:	96 e9       	ldi	r25, 0x96	; 150
    673c:	11 c0       	rjmp	.+34     	; 0x6760 <__floatsisf+0x6a>
    673e:	77 23       	and	r23, r23
    6740:	21 f0       	breq	.+8      	; 0x674a <__floatsisf+0x54>
    6742:	9e e8       	ldi	r25, 0x8E	; 142
    6744:	87 2f       	mov	r24, r23
    6746:	76 2f       	mov	r23, r22
    6748:	05 c0       	rjmp	.+10     	; 0x6754 <__floatsisf+0x5e>
    674a:	66 23       	and	r22, r22
    674c:	71 f0       	breq	.+28     	; 0x676a <__floatsisf+0x74>
    674e:	96 e8       	ldi	r25, 0x86	; 134
    6750:	86 2f       	mov	r24, r22
    6752:	70 e0       	ldi	r23, 0x00	; 0
    6754:	60 e0       	ldi	r22, 0x00	; 0
    6756:	2a f0       	brmi	.+10     	; 0x6762 <__floatsisf+0x6c>
    6758:	9a 95       	dec	r25
    675a:	66 0f       	add	r22, r22
    675c:	77 1f       	adc	r23, r23
    675e:	88 1f       	adc	r24, r24
    6760:	da f7       	brpl	.-10     	; 0x6758 <__floatsisf+0x62>
    6762:	88 0f       	add	r24, r24
    6764:	96 95       	lsr	r25
    6766:	87 95       	ror	r24
    6768:	97 f9       	bld	r25, 7
    676a:	08 95       	ret

0000676c <__fp_cmp>:
    676c:	99 0f       	add	r25, r25
    676e:	00 08       	sbc	r0, r0
    6770:	55 0f       	add	r21, r21
    6772:	aa 0b       	sbc	r26, r26
    6774:	e0 e8       	ldi	r30, 0x80	; 128
    6776:	fe ef       	ldi	r31, 0xFE	; 254
    6778:	16 16       	cp	r1, r22
    677a:	17 06       	cpc	r1, r23
    677c:	e8 07       	cpc	r30, r24
    677e:	f9 07       	cpc	r31, r25
    6780:	c0 f0       	brcs	.+48     	; 0x67b2 <__fp_cmp+0x46>
    6782:	12 16       	cp	r1, r18
    6784:	13 06       	cpc	r1, r19
    6786:	e4 07       	cpc	r30, r20
    6788:	f5 07       	cpc	r31, r21
    678a:	98 f0       	brcs	.+38     	; 0x67b2 <__fp_cmp+0x46>
    678c:	62 1b       	sub	r22, r18
    678e:	73 0b       	sbc	r23, r19
    6790:	84 0b       	sbc	r24, r20
    6792:	95 0b       	sbc	r25, r21
    6794:	39 f4       	brne	.+14     	; 0x67a4 <__fp_cmp+0x38>
    6796:	0a 26       	eor	r0, r26
    6798:	61 f0       	breq	.+24     	; 0x67b2 <__fp_cmp+0x46>
    679a:	23 2b       	or	r18, r19
    679c:	24 2b       	or	r18, r20
    679e:	25 2b       	or	r18, r21
    67a0:	21 f4       	brne	.+8      	; 0x67aa <__fp_cmp+0x3e>
    67a2:	08 95       	ret
    67a4:	0a 26       	eor	r0, r26
    67a6:	09 f4       	brne	.+2      	; 0x67aa <__fp_cmp+0x3e>
    67a8:	a1 40       	sbci	r26, 0x01	; 1
    67aa:	a6 95       	lsr	r26
    67ac:	8f ef       	ldi	r24, 0xFF	; 255
    67ae:	81 1d       	adc	r24, r1
    67b0:	81 1d       	adc	r24, r1
    67b2:	08 95       	ret

000067b4 <__fp_inf>:
    67b4:	97 f9       	bld	r25, 7
    67b6:	9f 67       	ori	r25, 0x7F	; 127
    67b8:	80 e8       	ldi	r24, 0x80	; 128
    67ba:	70 e0       	ldi	r23, 0x00	; 0
    67bc:	60 e0       	ldi	r22, 0x00	; 0
    67be:	08 95       	ret

000067c0 <__fp_nan>:
    67c0:	9f ef       	ldi	r25, 0xFF	; 255
    67c2:	80 ec       	ldi	r24, 0xC0	; 192
    67c4:	08 95       	ret

000067c6 <__fp_pscA>:
    67c6:	00 24       	eor	r0, r0
    67c8:	0a 94       	dec	r0
    67ca:	16 16       	cp	r1, r22
    67cc:	17 06       	cpc	r1, r23
    67ce:	18 06       	cpc	r1, r24
    67d0:	09 06       	cpc	r0, r25
    67d2:	08 95       	ret

000067d4 <__fp_pscB>:
    67d4:	00 24       	eor	r0, r0
    67d6:	0a 94       	dec	r0
    67d8:	12 16       	cp	r1, r18
    67da:	13 06       	cpc	r1, r19
    67dc:	14 06       	cpc	r1, r20
    67de:	05 06       	cpc	r0, r21
    67e0:	08 95       	ret
    67e2:	ee cf       	rjmp	.-36     	; 0x67c0 <__fp_nan>

000067e4 <__fp_rempio2>:
    67e4:	50 d0       	rcall	.+160    	; 0x6886 <__fp_splitA>
    67e6:	e8 f3       	brcs	.-6      	; 0x67e2 <__fp_pscB+0xe>
    67e8:	e8 94       	clt
    67ea:	e0 e0       	ldi	r30, 0x00	; 0
    67ec:	bb 27       	eor	r27, r27
    67ee:	9f 57       	subi	r25, 0x7F	; 127
    67f0:	f0 f0       	brcs	.+60     	; 0x682e <__fp_rempio2+0x4a>
    67f2:	2a ed       	ldi	r18, 0xDA	; 218
    67f4:	3f e0       	ldi	r19, 0x0F	; 15
    67f6:	49 ec       	ldi	r20, 0xC9	; 201
    67f8:	06 c0       	rjmp	.+12     	; 0x6806 <__fp_rempio2+0x22>
    67fa:	ee 0f       	add	r30, r30
    67fc:	bb 0f       	add	r27, r27
    67fe:	66 1f       	adc	r22, r22
    6800:	77 1f       	adc	r23, r23
    6802:	88 1f       	adc	r24, r24
    6804:	28 f0       	brcs	.+10     	; 0x6810 <__fp_rempio2+0x2c>
    6806:	b2 3a       	cpi	r27, 0xA2	; 162
    6808:	62 07       	cpc	r22, r18
    680a:	73 07       	cpc	r23, r19
    680c:	84 07       	cpc	r24, r20
    680e:	28 f0       	brcs	.+10     	; 0x681a <__fp_rempio2+0x36>
    6810:	b2 5a       	subi	r27, 0xA2	; 162
    6812:	62 0b       	sbc	r22, r18
    6814:	73 0b       	sbc	r23, r19
    6816:	84 0b       	sbc	r24, r20
    6818:	e3 95       	inc	r30
    681a:	9a 95       	dec	r25
    681c:	72 f7       	brpl	.-36     	; 0x67fa <__fp_rempio2+0x16>
    681e:	80 38       	cpi	r24, 0x80	; 128
    6820:	30 f4       	brcc	.+12     	; 0x682e <__fp_rempio2+0x4a>
    6822:	9a 95       	dec	r25
    6824:	bb 0f       	add	r27, r27
    6826:	66 1f       	adc	r22, r22
    6828:	77 1f       	adc	r23, r23
    682a:	88 1f       	adc	r24, r24
    682c:	d2 f7       	brpl	.-12     	; 0x6822 <__fp_rempio2+0x3e>
    682e:	90 48       	sbci	r25, 0x80	; 128
    6830:	fc c0       	rjmp	.+504    	; 0x6a2a <__fp_mpack_finite>

00006832 <__fp_round>:
    6832:	09 2e       	mov	r0, r25
    6834:	03 94       	inc	r0
    6836:	00 0c       	add	r0, r0
    6838:	11 f4       	brne	.+4      	; 0x683e <__fp_round+0xc>
    683a:	88 23       	and	r24, r24
    683c:	52 f0       	brmi	.+20     	; 0x6852 <__fp_round+0x20>
    683e:	bb 0f       	add	r27, r27
    6840:	40 f4       	brcc	.+16     	; 0x6852 <__fp_round+0x20>
    6842:	bf 2b       	or	r27, r31
    6844:	11 f4       	brne	.+4      	; 0x684a <__fp_round+0x18>
    6846:	60 ff       	sbrs	r22, 0
    6848:	04 c0       	rjmp	.+8      	; 0x6852 <__fp_round+0x20>
    684a:	6f 5f       	subi	r22, 0xFF	; 255
    684c:	7f 4f       	sbci	r23, 0xFF	; 255
    684e:	8f 4f       	sbci	r24, 0xFF	; 255
    6850:	9f 4f       	sbci	r25, 0xFF	; 255
    6852:	08 95       	ret

00006854 <__fp_sinus>:
    6854:	ef 93       	push	r30
    6856:	e0 ff       	sbrs	r30, 0
    6858:	06 c0       	rjmp	.+12     	; 0x6866 <__fp_sinus+0x12>
    685a:	a2 ea       	ldi	r26, 0xA2	; 162
    685c:	2a ed       	ldi	r18, 0xDA	; 218
    685e:	3f e0       	ldi	r19, 0x0F	; 15
    6860:	49 ec       	ldi	r20, 0xC9	; 201
    6862:	5f eb       	ldi	r21, 0xBF	; 191
    6864:	58 de       	rcall	.-848    	; 0x6516 <__addsf3x>
    6866:	e5 df       	rcall	.-54     	; 0x6832 <__fp_round>
    6868:	0f 90       	pop	r0
    686a:	03 94       	inc	r0
    686c:	01 fc       	sbrc	r0, 1
    686e:	90 58       	subi	r25, 0x80	; 128
    6870:	ee ec       	ldi	r30, 0xCE	; 206
    6872:	f0 e0       	ldi	r31, 0x00	; 0
    6874:	ed c0       	rjmp	.+474    	; 0x6a50 <__fp_powsodd>

00006876 <__fp_split3>:
    6876:	57 fd       	sbrc	r21, 7
    6878:	90 58       	subi	r25, 0x80	; 128
    687a:	44 0f       	add	r20, r20
    687c:	55 1f       	adc	r21, r21
    687e:	59 f0       	breq	.+22     	; 0x6896 <__fp_splitA+0x10>
    6880:	5f 3f       	cpi	r21, 0xFF	; 255
    6882:	71 f0       	breq	.+28     	; 0x68a0 <__fp_splitA+0x1a>
    6884:	47 95       	ror	r20

00006886 <__fp_splitA>:
    6886:	88 0f       	add	r24, r24
    6888:	97 fb       	bst	r25, 7
    688a:	99 1f       	adc	r25, r25
    688c:	61 f0       	breq	.+24     	; 0x68a6 <__fp_splitA+0x20>
    688e:	9f 3f       	cpi	r25, 0xFF	; 255
    6890:	79 f0       	breq	.+30     	; 0x68b0 <__fp_splitA+0x2a>
    6892:	87 95       	ror	r24
    6894:	08 95       	ret
    6896:	12 16       	cp	r1, r18
    6898:	13 06       	cpc	r1, r19
    689a:	14 06       	cpc	r1, r20
    689c:	55 1f       	adc	r21, r21
    689e:	f2 cf       	rjmp	.-28     	; 0x6884 <__fp_split3+0xe>
    68a0:	46 95       	lsr	r20
    68a2:	f1 df       	rcall	.-30     	; 0x6886 <__fp_splitA>
    68a4:	08 c0       	rjmp	.+16     	; 0x68b6 <__fp_splitA+0x30>
    68a6:	16 16       	cp	r1, r22
    68a8:	17 06       	cpc	r1, r23
    68aa:	18 06       	cpc	r1, r24
    68ac:	99 1f       	adc	r25, r25
    68ae:	f1 cf       	rjmp	.-30     	; 0x6892 <__fp_splitA+0xc>
    68b0:	86 95       	lsr	r24
    68b2:	71 05       	cpc	r23, r1
    68b4:	61 05       	cpc	r22, r1
    68b6:	08 94       	sec
    68b8:	08 95       	ret

000068ba <__fp_zero>:
    68ba:	e8 94       	clt

000068bc <__fp_szero>:
    68bc:	bb 27       	eor	r27, r27
    68be:	66 27       	eor	r22, r22
    68c0:	77 27       	eor	r23, r23
    68c2:	cb 01       	movw	r24, r22
    68c4:	97 f9       	bld	r25, 7
    68c6:	08 95       	ret

000068c8 <__gesf2>:
    68c8:	51 df       	rcall	.-350    	; 0x676c <__fp_cmp>
    68ca:	08 f4       	brcc	.+2      	; 0x68ce <__gesf2+0x6>
    68cc:	8f ef       	ldi	r24, 0xFF	; 255
    68ce:	08 95       	ret

000068d0 <__mulsf3>:
    68d0:	0b d0       	rcall	.+22     	; 0x68e8 <__mulsf3x>
    68d2:	af cf       	rjmp	.-162    	; 0x6832 <__fp_round>
    68d4:	78 df       	rcall	.-272    	; 0x67c6 <__fp_pscA>
    68d6:	28 f0       	brcs	.+10     	; 0x68e2 <__mulsf3+0x12>
    68d8:	7d df       	rcall	.-262    	; 0x67d4 <__fp_pscB>
    68da:	18 f0       	brcs	.+6      	; 0x68e2 <__mulsf3+0x12>
    68dc:	95 23       	and	r25, r21
    68de:	09 f0       	breq	.+2      	; 0x68e2 <__mulsf3+0x12>
    68e0:	69 cf       	rjmp	.-302    	; 0x67b4 <__fp_inf>
    68e2:	6e cf       	rjmp	.-292    	; 0x67c0 <__fp_nan>
    68e4:	11 24       	eor	r1, r1
    68e6:	ea cf       	rjmp	.-44     	; 0x68bc <__fp_szero>

000068e8 <__mulsf3x>:
    68e8:	c6 df       	rcall	.-116    	; 0x6876 <__fp_split3>
    68ea:	a0 f3       	brcs	.-24     	; 0x68d4 <__mulsf3+0x4>

000068ec <__mulsf3_pse>:
    68ec:	95 9f       	mul	r25, r21
    68ee:	d1 f3       	breq	.-12     	; 0x68e4 <__mulsf3+0x14>
    68f0:	95 0f       	add	r25, r21
    68f2:	50 e0       	ldi	r21, 0x00	; 0
    68f4:	55 1f       	adc	r21, r21
    68f6:	62 9f       	mul	r22, r18
    68f8:	f0 01       	movw	r30, r0
    68fa:	72 9f       	mul	r23, r18
    68fc:	bb 27       	eor	r27, r27
    68fe:	f0 0d       	add	r31, r0
    6900:	b1 1d       	adc	r27, r1
    6902:	63 9f       	mul	r22, r19
    6904:	aa 27       	eor	r26, r26
    6906:	f0 0d       	add	r31, r0
    6908:	b1 1d       	adc	r27, r1
    690a:	aa 1f       	adc	r26, r26
    690c:	64 9f       	mul	r22, r20
    690e:	66 27       	eor	r22, r22
    6910:	b0 0d       	add	r27, r0
    6912:	a1 1d       	adc	r26, r1
    6914:	66 1f       	adc	r22, r22
    6916:	82 9f       	mul	r24, r18
    6918:	22 27       	eor	r18, r18
    691a:	b0 0d       	add	r27, r0
    691c:	a1 1d       	adc	r26, r1
    691e:	62 1f       	adc	r22, r18
    6920:	73 9f       	mul	r23, r19
    6922:	b0 0d       	add	r27, r0
    6924:	a1 1d       	adc	r26, r1
    6926:	62 1f       	adc	r22, r18
    6928:	83 9f       	mul	r24, r19
    692a:	a0 0d       	add	r26, r0
    692c:	61 1d       	adc	r22, r1
    692e:	22 1f       	adc	r18, r18
    6930:	74 9f       	mul	r23, r20
    6932:	33 27       	eor	r19, r19
    6934:	a0 0d       	add	r26, r0
    6936:	61 1d       	adc	r22, r1
    6938:	23 1f       	adc	r18, r19
    693a:	84 9f       	mul	r24, r20
    693c:	60 0d       	add	r22, r0
    693e:	21 1d       	adc	r18, r1
    6940:	82 2f       	mov	r24, r18
    6942:	76 2f       	mov	r23, r22
    6944:	6a 2f       	mov	r22, r26
    6946:	11 24       	eor	r1, r1
    6948:	9f 57       	subi	r25, 0x7F	; 127
    694a:	50 40       	sbci	r21, 0x00	; 0
    694c:	8a f0       	brmi	.+34     	; 0x6970 <__mulsf3_pse+0x84>
    694e:	e1 f0       	breq	.+56     	; 0x6988 <__mulsf3_pse+0x9c>
    6950:	88 23       	and	r24, r24
    6952:	4a f0       	brmi	.+18     	; 0x6966 <__mulsf3_pse+0x7a>
    6954:	ee 0f       	add	r30, r30
    6956:	ff 1f       	adc	r31, r31
    6958:	bb 1f       	adc	r27, r27
    695a:	66 1f       	adc	r22, r22
    695c:	77 1f       	adc	r23, r23
    695e:	88 1f       	adc	r24, r24
    6960:	91 50       	subi	r25, 0x01	; 1
    6962:	50 40       	sbci	r21, 0x00	; 0
    6964:	a9 f7       	brne	.-22     	; 0x6950 <__mulsf3_pse+0x64>
    6966:	9e 3f       	cpi	r25, 0xFE	; 254
    6968:	51 05       	cpc	r21, r1
    696a:	70 f0       	brcs	.+28     	; 0x6988 <__mulsf3_pse+0x9c>
    696c:	23 cf       	rjmp	.-442    	; 0x67b4 <__fp_inf>
    696e:	a6 cf       	rjmp	.-180    	; 0x68bc <__fp_szero>
    6970:	5f 3f       	cpi	r21, 0xFF	; 255
    6972:	ec f3       	brlt	.-6      	; 0x696e <__mulsf3_pse+0x82>
    6974:	98 3e       	cpi	r25, 0xE8	; 232
    6976:	dc f3       	brlt	.-10     	; 0x696e <__mulsf3_pse+0x82>
    6978:	86 95       	lsr	r24
    697a:	77 95       	ror	r23
    697c:	67 95       	ror	r22
    697e:	b7 95       	ror	r27
    6980:	f7 95       	ror	r31
    6982:	e7 95       	ror	r30
    6984:	9f 5f       	subi	r25, 0xFF	; 255
    6986:	c1 f7       	brne	.-16     	; 0x6978 <__mulsf3_pse+0x8c>
    6988:	fe 2b       	or	r31, r30
    698a:	88 0f       	add	r24, r24
    698c:	91 1d       	adc	r25, r1
    698e:	96 95       	lsr	r25
    6990:	87 95       	ror	r24
    6992:	97 f9       	bld	r25, 7
    6994:	08 95       	ret

00006996 <sin>:
    6996:	9f 93       	push	r25
    6998:	25 df       	rcall	.-438    	; 0x67e4 <__fp_rempio2>
    699a:	0f 90       	pop	r0
    699c:	07 fc       	sbrc	r0, 7
    699e:	ee 5f       	subi	r30, 0xFE	; 254
    69a0:	59 cf       	rjmp	.-334    	; 0x6854 <__fp_sinus>
    69a2:	11 f4       	brne	.+4      	; 0x69a8 <sin+0x12>
    69a4:	0e f4       	brtc	.+2      	; 0x69a8 <sin+0x12>
    69a6:	0c cf       	rjmp	.-488    	; 0x67c0 <__fp_nan>
    69a8:	3e c0       	rjmp	.+124    	; 0x6a26 <__fp_mpack>

000069aa <sqrt>:
    69aa:	6d df       	rcall	.-294    	; 0x6886 <__fp_splitA>
    69ac:	d0 f3       	brcs	.-12     	; 0x69a2 <sin+0xc>
    69ae:	99 23       	and	r25, r25
    69b0:	d9 f3       	breq	.-10     	; 0x69a8 <sin+0x12>
    69b2:	ce f3       	brts	.-14     	; 0x69a6 <sin+0x10>
    69b4:	9f 57       	subi	r25, 0x7F	; 127
    69b6:	55 0b       	sbc	r21, r21
    69b8:	87 ff       	sbrs	r24, 7
    69ba:	43 d0       	rcall	.+134    	; 0x6a42 <__fp_norm2>
    69bc:	00 24       	eor	r0, r0
    69be:	a0 e6       	ldi	r26, 0x60	; 96
    69c0:	40 ea       	ldi	r20, 0xA0	; 160
    69c2:	90 01       	movw	r18, r0
    69c4:	80 58       	subi	r24, 0x80	; 128
    69c6:	56 95       	lsr	r21
    69c8:	97 95       	ror	r25
    69ca:	28 f4       	brcc	.+10     	; 0x69d6 <sqrt+0x2c>
    69cc:	80 5c       	subi	r24, 0xC0	; 192
    69ce:	66 0f       	add	r22, r22
    69d0:	77 1f       	adc	r23, r23
    69d2:	88 1f       	adc	r24, r24
    69d4:	20 f0       	brcs	.+8      	; 0x69de <sqrt+0x34>
    69d6:	26 17       	cp	r18, r22
    69d8:	37 07       	cpc	r19, r23
    69da:	48 07       	cpc	r20, r24
    69dc:	30 f4       	brcc	.+12     	; 0x69ea <sqrt+0x40>
    69de:	62 1b       	sub	r22, r18
    69e0:	73 0b       	sbc	r23, r19
    69e2:	84 0b       	sbc	r24, r20
    69e4:	20 29       	or	r18, r0
    69e6:	31 29       	or	r19, r1
    69e8:	4a 2b       	or	r20, r26
    69ea:	a6 95       	lsr	r26
    69ec:	17 94       	ror	r1
    69ee:	07 94       	ror	r0
    69f0:	20 25       	eor	r18, r0
    69f2:	31 25       	eor	r19, r1
    69f4:	4a 27       	eor	r20, r26
    69f6:	58 f7       	brcc	.-42     	; 0x69ce <sqrt+0x24>
    69f8:	66 0f       	add	r22, r22
    69fa:	77 1f       	adc	r23, r23
    69fc:	88 1f       	adc	r24, r24
    69fe:	20 f0       	brcs	.+8      	; 0x6a08 <sqrt+0x5e>
    6a00:	26 17       	cp	r18, r22
    6a02:	37 07       	cpc	r19, r23
    6a04:	48 07       	cpc	r20, r24
    6a06:	30 f4       	brcc	.+12     	; 0x6a14 <sqrt+0x6a>
    6a08:	62 0b       	sbc	r22, r18
    6a0a:	73 0b       	sbc	r23, r19
    6a0c:	84 0b       	sbc	r24, r20
    6a0e:	20 0d       	add	r18, r0
    6a10:	31 1d       	adc	r19, r1
    6a12:	41 1d       	adc	r20, r1
    6a14:	a0 95       	com	r26
    6a16:	81 f7       	brne	.-32     	; 0x69f8 <sqrt+0x4e>
    6a18:	b9 01       	movw	r22, r18
    6a1a:	84 2f       	mov	r24, r20
    6a1c:	91 58       	subi	r25, 0x81	; 129
    6a1e:	88 0f       	add	r24, r24
    6a20:	96 95       	lsr	r25
    6a22:	87 95       	ror	r24
    6a24:	08 95       	ret

00006a26 <__fp_mpack>:
    6a26:	9f 3f       	cpi	r25, 0xFF	; 255
    6a28:	31 f0       	breq	.+12     	; 0x6a36 <__fp_mpack_finite+0xc>

00006a2a <__fp_mpack_finite>:
    6a2a:	91 50       	subi	r25, 0x01	; 1
    6a2c:	20 f4       	brcc	.+8      	; 0x6a36 <__fp_mpack_finite+0xc>
    6a2e:	87 95       	ror	r24
    6a30:	77 95       	ror	r23
    6a32:	67 95       	ror	r22
    6a34:	b7 95       	ror	r27
    6a36:	88 0f       	add	r24, r24
    6a38:	91 1d       	adc	r25, r1
    6a3a:	96 95       	lsr	r25
    6a3c:	87 95       	ror	r24
    6a3e:	97 f9       	bld	r25, 7
    6a40:	08 95       	ret

00006a42 <__fp_norm2>:
    6a42:	91 50       	subi	r25, 0x01	; 1
    6a44:	50 40       	sbci	r21, 0x00	; 0
    6a46:	66 0f       	add	r22, r22
    6a48:	77 1f       	adc	r23, r23
    6a4a:	88 1f       	adc	r24, r24
    6a4c:	d2 f7       	brpl	.-12     	; 0x6a42 <__fp_norm2>
    6a4e:	08 95       	ret

00006a50 <__fp_powsodd>:
    6a50:	9f 93       	push	r25
    6a52:	8f 93       	push	r24
    6a54:	7f 93       	push	r23
    6a56:	6f 93       	push	r22
    6a58:	ff 93       	push	r31
    6a5a:	ef 93       	push	r30
    6a5c:	9b 01       	movw	r18, r22
    6a5e:	ac 01       	movw	r20, r24
    6a60:	37 df       	rcall	.-402    	; 0x68d0 <__mulsf3>
    6a62:	ef 91       	pop	r30
    6a64:	ff 91       	pop	r31
    6a66:	05 d0       	rcall	.+10     	; 0x6a72 <__fp_powser>
    6a68:	2f 91       	pop	r18
    6a6a:	3f 91       	pop	r19
    6a6c:	4f 91       	pop	r20
    6a6e:	5f 91       	pop	r21
    6a70:	2f cf       	rjmp	.-418    	; 0x68d0 <__mulsf3>

00006a72 <__fp_powser>:
    6a72:	df 93       	push	r29
    6a74:	cf 93       	push	r28
    6a76:	1f 93       	push	r17
    6a78:	0f 93       	push	r16
    6a7a:	ff 92       	push	r15
    6a7c:	ef 92       	push	r14
    6a7e:	df 92       	push	r13
    6a80:	7b 01       	movw	r14, r22
    6a82:	8c 01       	movw	r16, r24
    6a84:	68 94       	set
    6a86:	05 c0       	rjmp	.+10     	; 0x6a92 <__fp_powser+0x20>
    6a88:	da 2e       	mov	r13, r26
    6a8a:	ef 01       	movw	r28, r30
    6a8c:	2d df       	rcall	.-422    	; 0x68e8 <__mulsf3x>
    6a8e:	fe 01       	movw	r30, r28
    6a90:	e8 94       	clt
    6a92:	a5 91       	lpm	r26, Z+
    6a94:	25 91       	lpm	r18, Z+
    6a96:	35 91       	lpm	r19, Z+
    6a98:	45 91       	lpm	r20, Z+
    6a9a:	55 91       	lpm	r21, Z+
    6a9c:	ae f3       	brts	.-22     	; 0x6a88 <__fp_powser+0x16>
    6a9e:	ef 01       	movw	r28, r30
    6aa0:	3a dd       	rcall	.-1420   	; 0x6516 <__addsf3x>
    6aa2:	fe 01       	movw	r30, r28
    6aa4:	97 01       	movw	r18, r14
    6aa6:	a8 01       	movw	r20, r16
    6aa8:	da 94       	dec	r13
    6aaa:	79 f7       	brne	.-34     	; 0x6a8a <__fp_powser+0x18>
    6aac:	df 90       	pop	r13
    6aae:	ef 90       	pop	r14
    6ab0:	ff 90       	pop	r15
    6ab2:	0f 91       	pop	r16
    6ab4:	1f 91       	pop	r17
    6ab6:	cf 91       	pop	r28
    6ab8:	df 91       	pop	r29
    6aba:	08 95       	ret

00006abc <__tablejump2__>:
    6abc:	ee 0f       	add	r30, r30
    6abe:	ff 1f       	adc	r31, r31
    6ac0:	05 90       	lpm	r0, Z+
    6ac2:	f4 91       	lpm	r31, Z
    6ac4:	e0 2d       	mov	r30, r0
    6ac6:	09 94       	ijmp

00006ac8 <memcpy_P>:
    6ac8:	fb 01       	movw	r30, r22
    6aca:	dc 01       	movw	r26, r24
    6acc:	02 c0       	rjmp	.+4      	; 0x6ad2 <memcpy_P+0xa>
    6ace:	05 90       	lpm	r0, Z+
    6ad0:	0d 92       	st	X+, r0
    6ad2:	41 50       	subi	r20, 0x01	; 1
    6ad4:	50 40       	sbci	r21, 0x00	; 0
    6ad6:	d8 f7       	brcc	.-10     	; 0x6ace <memcpy_P+0x6>
    6ad8:	08 95       	ret

00006ada <__eerd_byte_m32u4>:
    6ada:	f9 99       	sbic	0x1f, 1	; 31
    6adc:	fe cf       	rjmp	.-4      	; 0x6ada <__eerd_byte_m32u4>
    6ade:	92 bd       	out	0x22, r25	; 34
    6ae0:	81 bd       	out	0x21, r24	; 33
    6ae2:	f8 9a       	sbi	0x1f, 0	; 31
    6ae4:	99 27       	eor	r25, r25
    6ae6:	80 b5       	in	r24, 0x20	; 32
    6ae8:	08 95       	ret

00006aea <__eerd_dword_m32u4>:
    6aea:	a6 e1       	ldi	r26, 0x16	; 22
    6aec:	b0 e0       	ldi	r27, 0x00	; 0
    6aee:	44 e0       	ldi	r20, 0x04	; 4
    6af0:	50 e0       	ldi	r21, 0x00	; 0
    6af2:	19 c0       	rjmp	.+50     	; 0x6b26 <__eerd_blraw_m32u4>

00006af4 <__eewr_block_m32u4>:
    6af4:	dc 01       	movw	r26, r24
    6af6:	cb 01       	movw	r24, r22
    6af8:	02 c0       	rjmp	.+4      	; 0x6afe <__eewr_block_m32u4+0xa>
    6afa:	2d 91       	ld	r18, X+
    6afc:	05 d0       	rcall	.+10     	; 0x6b08 <__eewr_r18_m32u4>
    6afe:	41 50       	subi	r20, 0x01	; 1
    6b00:	50 40       	sbci	r21, 0x00	; 0
    6b02:	d8 f7       	brcc	.-10     	; 0x6afa <__eewr_block_m32u4+0x6>
    6b04:	08 95       	ret

00006b06 <__eewr_byte_m32u4>:
    6b06:	26 2f       	mov	r18, r22

00006b08 <__eewr_r18_m32u4>:
    6b08:	f9 99       	sbic	0x1f, 1	; 31
    6b0a:	fe cf       	rjmp	.-4      	; 0x6b08 <__eewr_r18_m32u4>
    6b0c:	1f ba       	out	0x1f, r1	; 31
    6b0e:	92 bd       	out	0x22, r25	; 34
    6b10:	81 bd       	out	0x21, r24	; 33
    6b12:	20 bd       	out	0x20, r18	; 32
    6b14:	0f b6       	in	r0, 0x3f	; 63
    6b16:	f8 94       	cli
    6b18:	fa 9a       	sbi	0x1f, 2	; 31
    6b1a:	f9 9a       	sbi	0x1f, 1	; 31
    6b1c:	0f be       	out	0x3f, r0	; 63
    6b1e:	01 96       	adiw	r24, 0x01	; 1
    6b20:	08 95       	ret

00006b22 <__eerd_block_m32u4>:
    6b22:	dc 01       	movw	r26, r24
    6b24:	cb 01       	movw	r24, r22

00006b26 <__eerd_blraw_m32u4>:
    6b26:	fc 01       	movw	r30, r24
    6b28:	f9 99       	sbic	0x1f, 1	; 31
    6b2a:	fe cf       	rjmp	.-4      	; 0x6b28 <__eerd_blraw_m32u4+0x2>
    6b2c:	06 c0       	rjmp	.+12     	; 0x6b3a <__eerd_blraw_m32u4+0x14>
    6b2e:	f2 bd       	out	0x22, r31	; 34
    6b30:	e1 bd       	out	0x21, r30	; 33
    6b32:	f8 9a       	sbi	0x1f, 0	; 31
    6b34:	31 96       	adiw	r30, 0x01	; 1
    6b36:	00 b4       	in	r0, 0x20	; 32
    6b38:	0d 92       	st	X+, r0
    6b3a:	41 50       	subi	r20, 0x01	; 1
    6b3c:	50 40       	sbci	r21, 0x00	; 0
    6b3e:	b8 f7       	brcc	.-18     	; 0x6b2e <__eerd_blraw_m32u4+0x8>
    6b40:	08 95       	ret

00006b42 <_exit>:
    6b42:	f8 94       	cli

00006b44 <__stop_program>:
    6b44:	ff cf       	rjmp	.-2      	; 0x6b44 <__stop_program>
